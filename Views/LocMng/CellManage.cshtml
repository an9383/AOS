@model HACCP.Models.LocMng.CellManage
@using System.Data
@using HACCP.Libs.Views;

@{
    Layout = null;
    ViewData["Title"] = "CellManage";
    string sData = ViewData["data"] as String;
}
@{  
    var CellManageData = @Html.Raw(Json.Encode(ViewBag.CellManage.Data));
    var CellManageAuth = @Html.Raw(Json.Encode(ViewBag.CellManageAuth.Data));

    var WorkroomDataJson = @Html.Raw(Json.Encode(ViewBag.WorkroomData.Data));
}

    <script id="CellManageJs" type="text/javascript">
    //SP 구문, gubun 변수
    var cellGubun = "";
    var _CellManageAuth;
    var CellManageData = @CellManageData

        $(function () {

            var ws = JSON.parse(@WorkroomDataJson);

            $("#CM_cellworkroomDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: ws, key: "workroom_cd" }));

            $("#CMsearch_cellworkroomDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: ws, key: "workroom_cd" }));

        if (CellManageData.length <= 0) {
            $("#CellManageGrid").dxDataGrid("instance").option("dataSource", []);
            $("#CellManageGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        } else {
            $("#CellManageGrid").dxDataGrid("instance").option("dataSource", JSON.parse(@CellManageData));
            $("#CellManageGrid").dxDataGrid("instance").option("focusedRowEnabled", true);
            $("#CellManageGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
        }


        //수정중 체크
        Cell_EditCheck(false);

        //사용자 권한
        _CellManageAuth = JSON.parse(@CellManageAuth)[0];

        if (_CellManageAuth.form_query != "Y") {
            $("#CellManageSearch").remove();
        }
        if (_CellManageAuth.form_insert != "Y") {
            $("#CellManageInput").remove();
        }
        if (_CellManageAuth.form_edit != "Y") {
            $("#CellManageEdit").remove();
        }
        if (_CellManageAuth.form_delete != "Y") {
            $("#CellManageDelete").remove();
        }

    });

    //수정중인지 체크
    function Cell_EditCheck(nowEdit) {
        $("#CM_cellworkroomDropBox").dxDropDownBox("option", "disabled", true);
        $("#CM_zoneDropBox").dxDropDownBox("option", "disabled", true);
        $("#CellManageRightForm input[name=cell_isle]").attr("readonly", true);
        $("#CellManageRightForm input[name=cell_height]").attr("readonly", true);
        $("#CellManageRightForm input[name=cell_column]").attr("readonly", true);
        $("#CellManageRightForm input[name=cell_fix_cd]").attr("readonly", true);
        $("#CellManageRightForm input[name=cell_middle_cd]").attr("readonly", true);
        $("#CellManageRightForm input[name=cell_cd]").attr("readonly", true);

        if (nowEdit) {
            $("#CellManageSave").dxButton().parent().parent().removeClass("display-none");
            $("#CellManageUndo").dxButton().parent().parent().removeClass("display-none");
            $("#CellManageSearch").dxButton().parent().parent().addClass("display-none");
            $("#CellManageInput").dxButton().parent().parent().addClass("display-none");
            $("#CellManageEdit").dxButton().parent().parent().addClass("display-none");
            $("#CellManageDelete").dxButton().parent().parent().addClass("display-none");
            $("#CellManageExcel").dxButton().parent().parent().addClass("display-none");

            $("#CellManageRightForm :disabled").attr('disabled', false);
            $("#CellManageGrid").dxDataGrid("option", "disabled", true);
        }
        if (!nowEdit) {
            $("#CellManageSave").dxButton().parent().parent().addClass("display-none");
            $("#CellManageUndo").dxButton().parent().parent().addClass("display-none");
            $("#CellManageSearch").dxButton().parent().parent().removeClass("display-none");
            $("#CellManageInput").dxButton().parent().parent().removeClass("display-none");
            $("#CellManageEdit").dxButton().parent().parent().removeClass("display-none");
            $("#CellManageDelete").dxButton().parent().parent().removeClass("display-none");
            $("#CellManageExcel").dxButton().parent().parent().removeClass("display-none");

            $("#CellManageRightForm :enabled").attr('disabled', true);
            $("#CellManageGrid").dxDataGrid("option", "disabled", false);
        }
    }

    //좌측 그리드 선택 변경 시, 이벤트 처리
    function CellManageFocus_changed(e) {
        if (!e.row.data) {
            return;
        }
        CM_fillData(e.row.data);
    }

    //우측 폼 데이터 채우기
    function CM_fillData(data) {

        $("#CM_cellworkroomDropBox").dxDropDownBox("instance").option("value", data.workroom_cd);
        $("#CM_zoneDropBox").dxDropDownBox("instance").option("value", data.zone_cd);

        $("#CellManageRightForm input[name=cell_fix_cd]").val(data.cell_fix_cd);
        $("#CellManageRightForm input[name=cell_middle_cd]").val(data.cell_middle_cd);
        $("#CellManageRightForm input[name=cell_cd]").val(data.cell_cd);

        $("#CellManageRightForm input[name=cell_isle]").val(data.cell_isle);
        $("#CellManageRightForm input[name=cell_height]").val(data.cell_height);
        $("#CellManageRightForm input[name=cell_column]").val(data.cell_column);

        $("#CellManageRightForm input[name=cell_nm]").val(data.cell_nm);
        $("#CellManageRightForm select[name=cell_type]").val(data.cell_type);
        $("#CellManageRightForm input[name=cell_priority]").val(data.cell_priority);
        $("#CellManageRightForm select[name=cell_status]").val(data.cell_status);
        $("#CellManageRightForm input[name=cell_max_capacity]").val(data.cell_max_capacity);
        $("#CellManageRightForm input[name=cell_min_capacity]").val(data.cell_min_capacity);
        $("#CellManageRightForm textarea[name=cell_remark]").val(data.cell_remark);

    }

    //조회기능
    function CellManageSearch() {

        cellGubun = "Select";

        var formData = new FormData($("#CellManage_sform")[0]);        

        formData.set("gubun", cellGubun);
        formData.set("workroom_cd", $("#CellManage_sform input[name=sv_workroom_cd]").val());
        formData.set("zone_cd", $("#CellManage_sform input[name=sv_zone_cd]").val());
        formData.set("cell_isle", $("#CellManage_sform input[name=sv_cell_isle]").val());
        formData.set("cell_height", $("#CellManage_sform input[name=sv_cell_height]").val());        

        $.ajax({
            type: 'POST',
            url: '/LocMng/CellManageSelect',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {
                if (result.length <= 0) {
                    $("#CellManageGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#CellManageGrid").dxDataGrid("instance").option("focusedRowEnabled", false);

                    $("#CellManageRightForm")[0].reset();
                    return;
                }

                cellGubun = "";

                $("#CellManageGrid").dxDataGrid("instance").option("dataSource", JSON.parse(result));
                $("#CellManageGrid").dxDataGrid("instance").option("focusedRowEnabled", true);
                $("#CellManageGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
            }
        })
    }

    //0자리수 적용시키기
    function CM_leadingZeros(n, digits) {
        var zero = '';
        n = n.toString();

        if (n.length < digits) {
            for (var i = 0; i < digits - n.length; i++)
                zero += '0';
        }
        return zero + n;
    }

    //cell_cd에 자동 입력
    function autoInput() {
        var CM_autoCell = new Array();

        //랙
        $("#CellManageRightForm input[name=cell_isle]").on("propertychange change keyup paste input", function () {
            var isle = $("#CellManageRightForm input[name=cell_isle]").val();
            CM_autoCell[0] = isle;
            $("#CellManageRightForm input[name=cell_cd]").val(CM_autoCell.join(''));
        })
        //단
        $("#CellManageRightForm input[name=cell_height]").on("propertychange change keyup paste input", function () {
            var height = CM_leadingZeros($("#CellManageRightForm input[name=cell_height]").val(), 2);
            CM_autoCell[1] = height;
            $("#CellManageRightForm input[name=cell_cd]").val(CM_autoCell.join(''));
        })
        //열
        $("#CellManageRightForm input[name=cell_column]").on("propertychange change keyup paste input", function () {
            var column = CM_leadingZeros($("#CellManageRightForm input[name=cell_column]").val(), 2);
            CM_autoCell[2] = column;
            $("#CellManageRightForm input[name=cell_cd]").val(CM_autoCell.join(''));
        })
    }


    //입력
    function CellManageInput() {
        Cell_EditCheck(true);

        $("#CellManageRightForm")[0].reset();

        $("#CM_cellworkroomDropBox").dxDropDownBox("instance").option("value", "");
        $("#CM_zoneDropBox").dxDropDownBox("instance").option("value", "");

        $("#CellManageRightForm input[name=cell_fix_cd]").val("C");

        $("#CM_cellworkroomDropBox").dxDropDownBox("option", "disabled", false);
        $("#CM_zoneDropBox").dxDropDownBox("option", "disabled", false);
        $("#CellManageRightForm input[name=cell_isle]").attr("readonly", false);
        $("#CellManageRightForm input[name=cell_height]").attr("readonly", false);
        $("#CellManageRightForm input[name=cell_column]").attr("readonly", false);

        autoInput();
        cellGubun = "Insert";
    }

    //수정
    function CellManageEdit() {
        Cell_EditCheck(true);

        var grid = $("#CellManageGrid").dxDataGrid("instance");

        if (grid.totalCount() <= 0) {
            alert("수정할 항목이 존재하지 않습니다.");
            CellManageUndo();
            return;
        }

        cellGubun = "Update";

    }

    //취소
    function CellManageUndo() {
        Cell_EditCheck(false);
        cellGubun = "";

        CellManageSearch();
    }

    //저장
    function CellManageSave() {
        var formData = new FormData($("#CellManageRightForm")[0]);

        //#region 랙, 단 2자리수로 저장
        var height = $("#CellManageRightForm input[name=cell_height]").val();
        var column = $("#CellManageRightForm input[name=cell_column]").val();
        
        var cell_height = height < 10 ? "0" + height : height;
        var cell_column = column < 10 ? "0" + column : column;
        //#endregion

        formData.set("cell_cd",
            $("#CellManageRightForm input[name=cell_fix_cd").val()
            + $("#CellManageRightForm input[name=cell_middle_cd").val()
            + $("#CellManageRightForm input[name=cell_cd").val()
        );
        formData.set("cell_height", cell_height);
        formData.set("cell_column", cell_column);

        formData.set("gubun", cellGubun);

        var formID = "CellManageRightForm";
        var cols = [
            { name: "cell_isle", text: "랙", type: "input" },
            { name: "cell_height", text: "단", type: "input" },
            { name: "cell_column", text: "열", type: "input" },
            { name: "cell_nm", text: "셀명", type: "input" }
        ];
        var isValid = validationCk(formID, cols);

        if (!isValid) {
            return;
        }
        
        $.ajax({
            type: 'POST',
            url: '/LocMng/CellManageCRUD',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {

                //alert(json.message);
                alert("저장되었습니다.");
                cellGubun = "";

                Cell_EditCheck(false);
                CellManageSearch();
            }
        })
    }

    //삭제
    function CellManageDelete() {
        // 삭제 여부 팝업
        if (confirm("정말 삭제하시겠습니까??") === true) {

            // 그리드 객체를 가져온다
            var grid = $("#CellManageGrid").dxDataGrid("instance");
            // 그리드에 포커스 된 로우의 키를 통해서 해당 데이터를 가져온다.
            var data = getGridRowByKey('CellManageGrid', grid.option("focusedRowKey"));

            cellGubun = "Delete";

            $.ajax({
                type: 'POST',
                url: '/LocMng/CellManageCRUD',
                data: {
                    zone_cd: data.zone_cd,
                    cell_cd: data.cell_fix_cd + data.cell_middle_cd + data.cell_cd,
                    gubun: cellGubun
                },
                success: function (result) {

                    var json = JSON.parse(result);

                    //alert(json.messege);
                    alert("삭제되었습니다.");

                    Cell_EditCheck(false);
                    CellManageSearch();

                }
            })

        } else {   //취소

            return;

        }
    }

    //Excel
    function CellManageExcel() {
        gridExportToExcel("CellManageGrid", "CellManageData");
    }

    //창고 값
        function CM_gridBox_valueChanged(e) {

            if (e.value === null || e.value.length <= 0) {
                $("#CM_zoneDropBox").dxDropDownBox("instance").option("dataSource", []);
                $("#CM_zoneDropBox").dxDropDownBox("instance").reset();
                return;
            }

            $.ajax({
                type: 'POST',
                url: '/LocMng/SelectTable',
                data: {
                    workroom_cd: e.value[0],
                },
                success: function (result) {

                    $("#CM_zoneDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: JSON.parse(result), key: "zone_cd" }));
                    $("#CM_zoneDropBox").dxDropDownBox("instance").repaint();

                    $("#CM_cellworkroomDropBox").dxDropDownBox("instance").close();
                }
            })
        }

        //구역 값
        function CM_gridBox_zonevalueChanged(e) {

            if (e.value === null || e.value.length <= 0) {
                return;
            }
            if (e.value !== null || e.value.length > 0) {
                $("#CM_zoneDropBox").dxDropDownBox("instance").close();                
            }            
            $("#CellManageRightForm input[name=cell_middle_cd]").val((e.value[0]).substr(1, e.value[0].length -1));
        }


        //searchform 창고 영역 변경
        function CMsearch_gridBox_valueChanged(e) {

            if ($("#CMsearch_cellworkroomDropBox").val() === "") {
                $("#CellManage_sform input[name=sv_workroom_cd]").val("");
            }

            // 구역/랙/단 초기화
            $("#CMsearch_zoneDropBox").dxDropDownBox("instance").option("dataSource", []);
            $("#CMsearch_zoneDropBox").dxDropDownBox("instance").reset();
            $("#CMsearch_isleDropBox").dxDropDownBox("instance").option("dataSource", []);
            $("#CMsearch_isleDropBox").dxDropDownBox("instance").reset();
            $("#CMsearch_heightDropBox").dxDropDownBox("instance").option("dataSource", []);
            $("#CMsearch_heightDropBox").dxDropDownBox("instance").reset();

            //hidden value 초기화
            $("#CellManage_sform input[name=sv_zone_cd]").val("");
            $("#CellManage_sform input[name=sv_cell_isle]").val("");
            $("#CellManage_sform input[name=sv_cell_height]").val("");

            if (e.value === null || e.value.length <= 0) {
                return;
            }

            $.ajax({
                type: 'POST',
                url: '/LocMng/SelectTable',
                data: {
                    workroom_cd: e.value[0],
                },
                success: function (result) {

                    $("#CMsearch_zoneDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: JSON.parse(result), key: "zone_cd" }));
                    $("#CMsearch_zoneDropBox").dxDropDownBox("instance").repaint();

                    $("#CMsearch_cellworkroomDropBox").dxDropDownBox("instance").close();

                    // 창고 hidden value 설정
                    $("#CellManage_sform input[name=sv_workroom_cd]").val(e.value[0]);
                }
            });
        }

    //searchform 구역 영역 변경
        function CMsearch_gridBox_zonevalueChanged(e) {

            // 랙/단 초기화
            $("#CMsearch_isleDropBox").dxDropDownBox("instance").option("dataSource", []);
            $("#CMsearch_isleDropBox").dxDropDownBox("instance").reset();
            $("#CMsearch_heightDropBox").dxDropDownBox("instance").option("dataSource", []);
            $("#CMsearch_heightDropBox").dxDropDownBox("instance").reset();

            //hidden value 초기화            
            $("#CellManage_sform input[name=sv_cell_isle]").val("");
            $("#CellManage_sform input[name=sv_cell_height]").val("");

            if (e.value === null || e.value.length <= 0) {
                $("#CMsearch_isleDropBox").dxDropDownBox("instance").option("dataSource", []);
                $("#CMsearch_isleDropBox").dxDropDownBox("instance").reset();
                return;
            }

            $.ajax({
                type: 'POST',
                url: '/LocMng/SelectCell',
                data: {
                    zone_cd: e.value[0],
                },
                success: function (result) {

                    $("#CMsearch_isleDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: JSON.parse(result), key: "cell_isle" }));
                    $("#CMsearch_isleDropBox").dxDropDownBox("instance").repaint();

                    $("#CMsearch_zoneDropBox").dxDropDownBox("instance").close();

                    // 구역 hidden value 설정
                    $("#CellManage_sform input[name=sv_zone_cd]").val(e.value[0]);
                }
            });

        }

        //searchform 랙 영역 변경
        function CMsearch_gridBox_islevalueChanged(e) {

            // 단 초기화
            $("#CMsearch_heightDropBox").dxDropDownBox("instance").option("dataSource", []);
            $("#CMsearch_heightDropBox").dxDropDownBox("instance").reset();

            //hidden value 초기화
            $("#CellManage_sform input[name=sv_cell_height]").val("");

            if (e.value === null || e.value.length <= 0) {
                $("#CMsearch_heightDropBox").dxDropDownBox("instance").option("dataSource", []);
                $("#CMsearch_heightDropBox").dxDropDownBox("instance").reset();
                return;
            }

            $.ajax({
                type: 'POST',
                url: '/LocMng/SelectHeight',
                data: {
                    cell_isle: e.value[0],
                    zone_cd: $("#CellManage_sform input[name=sv_zone_cd]").val()
                },
                success: function (result) {

                    $("#CMsearch_heightDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: JSON.parse(result), key: "cell_height" }));
                    $("#CMsearch_heightDropBox").dxDropDownBox("instance").repaint();

                    $("#CMsearch_isleDropBox").dxDropDownBox("instance").close();

                    // 랙 hidden value 설정
                    $("#CellManage_sform input[name=sv_cell_isle]").val(e.value[0]);
                }
            });

        }

        //searchform 단 영역 변경
        function CMsearch_gridBox_heightvalueChanged(e) {

            if (e.value === null || e.value.length <= 0) {
                return;
            }

            if (e.value !== null || e.value.length > 0) {
                $("#CMsearch_heightDropBox").dxDropDownBox("instance").close();
                // 창고 hidden value 설정
                $("#CellManage_sform input[name=sv_cell_height]").val(e.value[0]);
            }

        }

        //선택된 항목 바코드 출력
        function CellManageBarCodePrint() {

            if ($("#CellManageGrid").dxDataGrid("instance").option("focusedRowIndex") < 0) {
                alert("프린트 대상이 없습니다.");
                return;
            }

            var grid = $("#CellManageGrid").dxDataGrid("instance");            
            var selectedData = grid.getSelectedRowsData(); // 체크된 값

            //선택한 cell_cd 값 param으로 넘기기
            var reportParam = "";
            for (var i = 0; i < selectedData.length; i++) {
                reportParam += selectedData[i].cell_all_cd;
                if (i !== (selectedData.length - 1)) {
                    reportParam += ',';
                }
            }
            
            if (selectedData.length === 0) {
                alert("프린트 대상이 없습니다.");
                return;
            }

            // report 선언
            var report = new ReportHelper();

            report.addParam({
                objFile: { path: "LocMng", RptFileName: "CellManageNewR" },
                //objSp: { SpName: "SP_MA_CellManage", GUBUN: "barcode_print", reportParam: "cell_cd:" + cell_all_cd },
                objSp: { SpName: "SP_MA_CellManage", GUBUN: "barcode_print", reportParam: "cell_cd_value:" + reportParam },                
                objEtcInfo: { subParam: "", viewerName: "", nCopies: "" },
                objTblNm: { tblName: "CellManage_D" }
            })

                report.print();
        }

    ////창고 값 이름
    //function CM_gridBox_displayExpr(item) {

    //    return item.workroom_nm;
    //}

    ////구역 값 이름
    //function CM_gridBox_zonedisplayExpr(item) {

    //    return item.zone_nm;
    //}

    </script>

<div id="CellManage" autoresize="Y">    

    @*<h4 class="divTitle">셀(Cell) 등록</h4>*@

    <div class="mainTop row">
        
        <div class="col-8">            
            <form id="CellManage_sform">
                <div class="input-wrapper">
                    <div class="col-15 input-group input-group-sm">
                        <!--#region 창고 search폼-->
                        <div class="input-group-prepend">
                            <span class="input-group-text">창고</span>
                        </div>
                        <div class="col-3" style="display:inline-block;">
                            @(Html.DevExtreme().DropDownBox()
                                .ID("CMsearch_cellworkroomDropBox")
                                .Name("workroom_nm")
                                .ValueExpr("workroom_cd")
                                .DisplayExpr("workroom_nm")
                                .Height(30)
                                .Placeholder("창고를 선택하시오")
                                //.ShowClearButton(true)
                                .OnValueChanged("CMsearch_gridBox_valueChanged")
                                .OnClosed("DropDownBoxReload")
                                .ContentTemplate(new TemplateName("CMsearch_WorkroomDropboxTemplate"))
                            )
                            @using (Html.DevExtreme().NamedTemplate("CMsearch_WorkroomDropboxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                                            .ID("S_workroomDropdownGrid")
                                            .DataSource(new JS(@"component.getDataSource()"))
                                            .Columns(columns => {
                                                columns.Add().DataField("workroom_cd").Caption("창고코드");
                                                columns.Add().DataField("workroom_nm").Caption("창고명");
                                            })
                                            .HoverStateEnabled(true)
                                            .SearchPanel(searchPanel =>
                                            {
                                                searchPanel.Visible(true);
                                                searchPanel.Width(130);
                                            })
                                            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                                            .Width(200)
                                            .Height(500)
                                            .Selection(s => s.Mode(SelectionMode.Single))
                                            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                            .OnSelectionChanged(@<text>
                                                        function(selectedItems) {
                                                            var keys = selectedItems.selectedRowKeys;
                                                            component.option("value", keys);
                                                        }
                                                        </text>)
                                        )
                            }
                        </div>
                        <!--#endregion-->
                        <!--#region 구역 search폼-->
                        <div class="input-group-prepend">
                            <span class="input-group-text">구역</span>
                        </div>
                        <div class="col-3" style="display:inline-block;">
                            @(Html.DevExtreme().DropDownBox()
                        .ID("CMsearch_zoneDropBox")
                        .Name("zone_cd")
                        .ValueExpr("zone_cd")
                        .DisplayExpr("zone_nm")
                        .Height(30)
                        .Placeholder("구역을 선택하시오")
                        //.ShowClearButton(true)
                        .OnValueChanged("CMsearch_gridBox_zonevalueChanged")
                        .OnClosed("DropDownBoxReload")
                        .ContentTemplate(new TemplateName("CMsearch_ZoneDropboxTemplate"))
                    )

                            @using (Html.DevExtreme().NamedTemplate("CMsearch_ZoneDropboxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                            .ID("CMsearch_zoneDropdownGrid")
                            .DataSource(new JS(@"component.getDataSource()"))
                            .Columns(columns => {
                                columns.Add().DataField("zone_cd").Caption("구역코드");
                                columns.Add().DataField("zone_nm").Caption("구역명");
                            })
                            .HoverStateEnabled(true)
                            .SearchPanel(searchPanel =>
                            {
                                searchPanel.Visible(true);
                                searchPanel.Width(130);
                            })
                            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                            .Width(200)
                            .Height(500)
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                            .OnSelectionChanged(@<text>
                                        function(selectedItems) {
                                            var keys = selectedItems.selectedRowKeys;
                                            component.option("value", keys);
                                        }
                                        </text>)
                        )
                            }
                        </div>
                        <!--#endregion-->
                        <!--#region 랙 search폼-->
                        <div class="input-group-prepend">
                            <span class="input-group-text">랙</span>
                        </div>
                        <div class="col-2" style="display:inline-block;">
                            @(Html.DevExtreme().DropDownBox()
                        .ID("CMsearch_isleDropBox")
                        .Name("cell_isle")
                        .ValueExpr("cell_isle")
                        .DisplayExpr("cell_isle")
                        .Height(30)
                        .Placeholder("랙을 선택하시오")
                        //.ShowClearButton(true)
                        .OnValueChanged("CMsearch_gridBox_islevalueChanged")
                        .OnClosed("DropDownBoxReload")
                        .ContentTemplate(new TemplateName("CMsearch_isleDropboxTemplate"))
                    )

                            @using (Html.DevExtreme().NamedTemplate("CMsearch_isleDropboxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                            .ID("CMsearch_isleDropdownGrid")
                            .DataSource(new JS(@"component.getDataSource()"))
                            .Columns(columns => {
                                columns.Add().DataField("cell_isle").Caption("랙");
                            })
                            .HoverStateEnabled(true)
                            .SearchPanel(searchPanel =>
                            {
                                searchPanel.Visible(true);
                                searchPanel.Width(60);
                            })
                            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                            .Width(100)
                            .Height(500)
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                            .OnSelectionChanged(@<text>
                                        function(selectedItems) {
                                            var keys = selectedItems.selectedRowKeys;
                                            component.option("value", keys);
                                        }
                                        </text>)
                        )
                            }
                        </div>
                        <!--#endregion-->
                        <!--#region 단 search폼-->
                        <div class="input-group-prepend">
                            <span class="input-group-text">단</span>
                        </div>                        
                        <div class="col-2" style="display:inline-block;">
                            @(Html.DevExtreme().DropDownBox()
                        .ID("CMsearch_heightDropBox")
                        .Name("cell_height")
                        .ValueExpr("cell_height")
                        .DisplayExpr("cell_height")
                        .Height(30)
                        .Placeholder("단을 선택하시오")
                        //.ShowClearButton(true)
                        .OnValueChanged("CMsearch_gridBox_heightvalueChanged")
                        .OnClosed("DropDownBoxReload")
                        .ContentTemplate(new TemplateName("CMsearch_heightDropboxTemplate"))
                    )

                            @using (Html.DevExtreme().NamedTemplate("CMsearch_heightDropboxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                            .ID("CMsearch_heightDropdownGrid")
                            .DataSource(new JS(@"component.getDataSource()"))
                            .Columns(columns => {
                                columns.Add().DataField("cell_height").Caption("단");
                            })
                            .HoverStateEnabled(true)
                            .SearchPanel(searchPanel =>
                            {
                                searchPanel.Visible(true);
                                searchPanel.Width(60);
                            })
                            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                            .Width(100)
                            .Height(500)
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                            .OnSelectionChanged(@<text>
                                        function(selectedItems) {
                                            var keys = selectedItems.selectedRowKeys;
                                            component.option("value", keys);
                                        }
                                        </text>)
                        )
                            }
                        </div>
                        <!--#endregion-->
                    </div>
                </div>

                <!--search form value-->
                <input type="hidden" name="sv_workroom_cd" value="" />
                <input type="hidden" name="sv_zone_cd" value="" />
                <input type="hidden" name="sv_cell_isle" value="" />
                <input type="hidden" name="sv_cell_height" value="" />
            </form>
        </div>
        


            <div class="CRUD-btn col-4">
                @{ Html.SetToolbar(0, true, "Search;Input;Edit;Delete;Save;Undo;Excel");}
                <div class="align-end-only">
                    <button class="btn btn-secondary" onclick="CellManageBarCodePrint()">바코드 출력</button>
                </div>
            </div>
        </div>

    <div class="row">
        <!-- 좌측 그리드 -->
        <div class="col-8 pr-0">
            <div id="CellManageLeftMain" class="box mb-0">

                @(Html.DevExtreme().DataGrid()
                    .ID("CellManageGrid")
                    .ShowBorders(true)
                    .SearchPanel(searchPanel => searchPanel.Visible(true))
                    .Selection(s => s.Mode(SelectionMode.Multiple).ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always))
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))                    
                    .ShowColumnLines(true)                    
                    .ColumnAutoWidth(true)
                    .AllowColumnResizing(true)
                    .HoverStateEnabled(true)                    
                    .KeyExpr("cell_all_cd")
                    .Height(900)
                    .Columns(c =>
                    {
                        c.Add().DataField("cell_all_cd").Caption("셀코드");
                        c.Add().DataField("cell_nm").Caption("셀명");
                        c.Add().DataField("zone_cd").Caption("Zone코드");
                        c.Add().DataField("zone_nm").Caption("구역명");
                        c.Add().DataField("workroom_nm").Caption("창고");
                    })
                    .OnFocusedRowChanged("CellManageFocus_changed")
                )

            </div>

        </div>

        <!-- 우측 그리드 -->
        <div id="CellManageRightMain" class="col-4 pl-1">

            <div class="box mb-0">                

                <form id="CellManageRightForm">

                    <div class="divName">
                        <p>셀 정보</p>
                    </div>

                    <div class="input-wrapper">
                        <label class="col-3">창고<star>*</star></label>
                        <div class="input-group col-6">
                            <div class="required" style="display:inline-block;">
                                @(Html.DevExtreme().DropDownBox()
                                            .ID("CM_cellworkroomDropBox")
                                            .Name("workroom_nm")
                                            .ValueExpr("workroom_cd")
                                            //.DisplayExpr(new JS("CM_gridBox_displayExpr"))
                                            .DisplayExpr("workroom_nm")
                                            .Placeholder("창고를 선택하시오")
                                            //.ShowClearButton(true)
                                            .Width(250)
                                            .OnValueChanged("CM_gridBox_valueChanged")
                                            .OnClosed("DropDownBoxReload")
                                            .ContentTemplate(new TemplateName("CM_WorkroomDropboxTemplate"))
                                    )

                                @using (Html.DevExtreme().NamedTemplate("CM_WorkroomDropboxTemplate"))
                                {
                                    @(Html.DevExtreme().DataGrid()
                                            .ID("workroomDropdownGrid")
                                            .DataSource(new JS(@"component.getDataSource()"))
                                            .Columns(columns => {
                                                columns.Add().DataField("workroom_cd").Caption("창고코드");
                                                columns.Add().DataField("workroom_nm").Caption("창고명");
                                            })
                                            .HoverStateEnabled(true)
                                            .SearchPanel(searchPanel =>
                                            {
                                                searchPanel.Visible(true);
                                                searchPanel.Width(130);
                                            })
                                            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                                            .Width(210)
                                            .Height(500)
                                            .Selection(s => s.Mode(SelectionMode.Single))
                                            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                            .OnSelectionChanged(@<text>
                                                        function(selectedItems) {
                                                            var keys = selectedItems.selectedRowKeys;
                                                            component.option("value", keys);
                                                        }
                                                        </text>)
                                        )
                                }
                            </div>
                        </div>
                    </div>

                    <div class="input-wrapper">
                        <label class="col-3">구역<star>*</star></label>
                        <div class="input-group col-6">
                            <div class="required" style="display:inline-block;">
                                @(Html.DevExtreme().DropDownBox()
                                            .ID("CM_zoneDropBox")
                                            .Name("zone_cd")
                                            .ValueExpr("zone_cd")
                                            //.DisplayExpr(new JS("CM_gridBox_zonedisplayExpr"))
                                            .DisplayExpr("zone_nm")
                                            .Placeholder("구역을 선택하시오")
                                            //.ShowClearButton(true)
                                            .Width(250)
                                            .OnValueChanged("CM_gridBox_zonevalueChanged")
                                            .OnClosed("DropDownBoxReload")
                                            .ContentTemplate(new TemplateName("CM_ZoneDropboxTemplate"))
                                    )

                                @using (Html.DevExtreme().NamedTemplate("CM_ZoneDropboxTemplate"))
                                {
                                    @(Html.DevExtreme().DataGrid()
                                            .ID("CM_zoneDropdownGrid")
                                            .DataSource(new JS(@"component.getDataSource()"))
                                            .Columns(columns => {
                                                columns.Add().DataField("zone_cd").Caption("구역코드");
                                                columns.Add().DataField("zone_nm").Caption("구역명");
                                            })
                                            .HoverStateEnabled(true)
                                            .SearchPanel(searchPanel =>
                                            {
                                                searchPanel.Visible(true);
                                                searchPanel.Width(130);
                                            })
                                            .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                                            .Width(210)
                                            .Height(500)
                                            .Selection(s => s.Mode(SelectionMode.Single))
                                            .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                            .OnSelectionChanged(@<text>
                                                function(selectedItems) {
                                                    var keys = selectedItems.selectedRowKeys;
                                                    component.option("value", keys);
                                                }
                                                </text>)
                                )
                                }
                            </div>
                        </div>
                    </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀위치<star>*</star></label>
                            <div class="input-group col-1">
                                <input type="text" class="form-control required" name="cell_isle" />
                            </div>

                            <label class="col-1">랙</label>
                            <div class="input-group col-1">
                                <input type="number" class="form-control required" name="cell_height" />
                            </div>

                            <label class="col-1">단</label>
                            <div class="input-group col-1">
                                <input type="number" class="form-control required" name="cell_column" />
                            </div>
                            <label class="col-1">열</label>                                                        
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀코드</label>
                            <div class="input-group col-1">
                                <input type="text" class="form-control" name="cell_fix_cd" />
                            </div>
                            <div class="input-group col-2">
                                <input type="text" class="form-control" name="cell_middle_cd" />
                            </div>
                            <div class="input-group col-2">
                                <input type="text" class="form-control" name="cell_cd" />
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀명<star>*</star></label>
                            <div class="input-group col-4">
                                <input type="text" class="form-control required" name="cell_nm" />
                            </div>
                        </div>

                        <hr />

                        <div class="input-wrapper">
                            <label class="col-3">셀타입</label>
                            <div class="input-group col-4">
                                <select class="form-control" name="cell_type">
                                    <option value=""></option>
                                    @foreach (DataRow row in ((DataTable)ViewBag.cell_type).Rows)
                                    {
                                        <option value="@row["keyfield"]">@row["displayfield"]</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀우선순위</label>
                            <div class="input-group col-4">
                                <input type="number" class="form-control" name="cell_priority">
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀최대적치량</label>
                            <div class="input-group col-4">
                                <input type="text" class="form-control" name="cell_max_capacity" />
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀최소적치량</label>
                            <div class="input-group col-4">
                                <input type="text" class="form-control" name="cell_min_capacity" />
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">셀상태</label>
                            <div class="input-group col-4">
                                <select class="form-control" name="cell_status">
                                    @foreach (DataRow row in ((DataTable)ViewBag.cell_status).Rows)
                                    {
                                        <option value="@row["keyfield"]">@row["displayfield"]</option>
                                    }
                                </select>
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-3">설명</label>
                            <div class="input-group col-6">
                                <textarea rows="3" class="form-control" name="cell_remark"></textarea>
                            </div>
                        </div>
                </form>

            </div>
        </div>
    </div>



</div>