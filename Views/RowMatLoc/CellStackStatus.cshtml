@using System.Data
@using HACCP.Libs.Views
@{
    Layout = null;
    ViewData["Title"] = "CellStackStatus";
}

@{
    var CellStackStatusData = @Html.Raw(Json.Encode(ViewBag.CellStackStatusData.Data));
    var CellStackStatusAuth = @Html.Raw(Json.Encode(ViewBag.CellStackStatusAuth.Data));

    var WorkroomData_CSS = @Html.Raw(Json.Encode(ViewBag.WorkroomData_CSS.Data));
}

<script type="text/javascript" id="CellStackStatusJs">

    // SP 구문, gubun 변수
    var curdGubun = "";

    // 메뉴 권한
    var _CellStackStatusAuth;

    // 랙 높이
    var _CELL_HEIGHT = 0;

    $(function () {

        // 컬럼 초기셋팅
        Init_CELL_HEIGHT();

        // 사용자 권한
        _CellStackStatusAuth = JSON.parse(@CellStackStatusAuth)[0];

        if (_CellStackStatusAuth.form_query != "Y") {
            $("#CellStackStatusSearch").remove();
        }

        // 창고 드랍박스
        var WorkroomData_CSS = JSON.parse(@WorkroomData_CSS);
        $("#CSS_WorkRoomDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: WorkroomData_CSS, key: "workroom_cd" }));

        /* 드랍박스 CSS 조정 */
        // 드랍박스 dx-placeholder
        $(".dx-placeholder").css('margin-top', '-1%');
        // 창고
        $("#CSS_WorkRoomDropBox").removeClass('dx-editor-underlined');
        $("#CSS_WorkRoomDropBox").css('margin-top', '-1%');
        // 구역
        $("#CSS_ZoneDropBox").removeClass('dx-editor-underlined');
        $("#CSS_ZoneDropBox").css('margin-top', '-1%');
        // 셀
        $("#CSS_CellDropBox").removeClass('dx-editor-underlined');
        $("#CSS_CellDropBox").css('margin-top', '-1%');



    });

    // 창고 셀렉트 박스 선택시,
    function CSS_WorkRoom_DropBoxChanged(e) {

        // 구역, 셀 드랍박스 초기화
        $("#CSS_ZoneDropBox").dxDropDownBox("instance").option("dataSource", []);
        $("#CSS_ZoneDropBox").dxDropDownBox("instance").reset();
        $("#CSS_CellDropBox").dxDropDownBox("instance").option("dataSource", []);
        $("#CSS_CellDropBox").dxDropDownBox("instance").reset();

        // 랙 높이 초기화
        _CELL_HEIGHT = 0;

        if (e.value === null || e.value.length <= 0) {

            $("#CSS_ZoneDropBox").dxDropDownBox("instance").repaint();
            $("#CSS_CellDropBox").dxDropDownBox("instance").repaint();

            // CSS 설정
            $(".dx-placeholder").css('margin-top', '-1%');
            $("#CSS_ZoneDropBox").removeClass('dx-editor-underlined');
            $("#CSS_ZoneDropBox").css('margin-top', '-1%');
            $("#CSS_CellDropBox").removeClass('dx-editor-underlined');
            $("#CSS_CellDropBox").css('margin-top', '-1%');

            return;
        }

        $.ajax({
            type: 'POST',
            url: '/RowMatLoc/CellStackStatus_Zone_Select',
            data: {
                workroom_cd: e.value[0],
            },
            success: function (result) {

                $("#CSS_ZoneDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: JSON.parse(result), key: "zone_cd" }));

                $("#CSS_ZoneDropBox").dxDropDownBox("instance").repaint();
                // 창고 드랍박스 닫기
                $("#CSS_WorkRoomDropBox").dxDropDownBox("instance").close();

                // CSS 설정
                $(".dx-placeholder").css('margin-top', '-1%');
                $("#CSS_ZoneDropBox").removeClass('dx-editor-underlined');
                $("#CSS_ZoneDropBox").css('margin-top', '-1%');
                $("#CSS_CellDropBox").removeClass('dx-editor-underlined');
                $("#CSS_CellDropBox").css('margin-top', '-1%');

            }
        });
    }

    function CSS_Zone_DropBoxChanged(e) {

        // 셀 드랍박스 초기화
        $("#CSS_CellDropBox").dxDropDownBox("instance").option("dataSource", []);
        $("#CSS_CellDropBox").dxDropDownBox("instance").reset();

        // 랙 높이 초기화
        _CELL_HEIGHT = 0;

        if (e.value === null || e.value.length <= 0) {
            $("#CSS_CellDropBox").dxDropDownBox("instance").repaint();

            // CSS 설정
            $(".dx-placeholder").css('margin-top', '-1%');
            $("#CSS_CellDropBox").removeClass('dx-editor-underlined');
            $("#CSS_CellDropBox").css('margin-top', '-1%');
            return;
        }

        $.ajax({
            type: 'POST',
            url: '/RowMatLoc/CellStackStatus_Cell_Select',
            data: {
                zone_cd: e.value[0],
            },
            success: function (result) {

                $("#CSS_CellDropBox").dxDropDownBox("instance").option("dataSource", new DevExpress.data.ArrayStore({ data: JSON.parse(result), key: "cell_isle" }));

                $("#CSS_CellDropBox").dxDropDownBox("instance").repaint();
                // 구역 드랍박스 닫기
                $("#CSS_ZoneDropBox").dxDropDownBox("instance").close();

                // CSS 설정
                $(".dx-placeholder").css('margin-top', '-1%');
                $("#CSS_CellDropBox").removeClass('dx-editor-underlined');
                $("#CSS_CellDropBox").css('margin-top', '-1%');


            }
        });

    }

    function CSS_Cell_DropBoxChanged(e) {

        var formData = new FormData($("#CellStackStatus_form")[0]);

        // 랙 높이 초기화
        _CELL_HEIGHT = 0;

        if (e.value === null || e.value.length <= 0) {
            return;
        }

        $.ajax({
            type: 'POST',
            url: '/RowMatLoc/MAX_CELL_HEIGHT',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {

                if (result.length <= 0) {
                    // 셀 드랍박스 닫기
                    $("#CSS_CellDropBox").dxDropDownBox("instance").close();
                }

                // 랙 높이 셋팅
                _CELL_HEIGHT = parseInt(JSON.parse(result)[0]["max_cell_height"]);

                // 셀 드랍박스 닫기
                $("#CSS_CellDropBox").dxDropDownBox("instance").close();

            }
        });


    }

    function Init_CELL_HEIGHT() {

        _CELL_HEIGHT = 0;

        for (var i = 2; i < 9; i++) {

            $("#CellStackStatust_Main").dxDataGrid("instance").columnOption("cell_height_" + i, "visible", false);
        }
    }

    // 조회
    function CellStackStatusSearch() {

        var formData = new FormData($("#CellStackStatus_form")[0]);

        if (_CELL_HEIGHT === 0) {
            alert("랙을 선택하세요.");
            return;
        }

        $.ajax({
            type: 'POST',
            url: '/RowMatLoc/CellStackStatus_Search',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {

                // 검색 결과가 없을 경우
                if (result.length <= 0) {
                    $("#CellStackStatust_Main").dxDataGrid("instance").option("dataSource", []);
                    //$("#CellStackStatust_Main").dxDataGrid("instance").option("focusedRowEnabled", false);

                    return;
                }

                // 컬럼 수 셋팅
                for (var i = 1; i <= _CELL_HEIGHT; i++) {

                    $("#CellStackStatust_Main").dxDataGrid("instance").columnOption("cell_height_" + i, "visible", true);
                }

                // 개행을 위한 replace
                var newLine = result.replace(/\n/g, "<br>");

                var json = JSON.parse(newLine);

                $("#CellStackStatust_Main").dxDataGrid("instance").option("dataSource", json);


            }
        });


    }

    // 엑셀 다운로드
    function CellStackStatusExcel(gridName, ExcelName) {
        gridExportToExcel("CellStackStatust_Main", "원자재 셀 적치 현황");
    }

    // 개행 HTML
    function CellStackStatustGridLineBreak(container, cellInfo) {

        $("<div>").html(cellInfo.value)
            .appendTo(container);
    }

    // 셀 더블 클릭시, 팝업 노출
    function CellDoubleClick(e) {

        if (e.value === "") {
            return;
        }

        var formData = new FormData($("#CellStackStatus_form")[0]);
        var cell_column = e.data.cell_column;
        var cell_height = "0" + e.columnIndex;

        formData.set("cell_column", cell_column);
        formData.set("cell_height", cell_height);

        $.ajax({
            type: 'POST',
            url: '/RowMatLoc/CellStackStatus_Popup_Select',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {

                if (result.length <= 0) {
                    return;
                }

                var columns = [
                    { dataField: "item_cd", caption: "품목코드" },
                    { dataField: "item_nm", caption: "품목명" },
                    { dataField: "receipt_time", caption: "입고일자" },
                    { dataField: "receipt_qc_no3", caption: "시험번호" },
                    { dataField: "receipt_qc_no1", caption: "시험의뢰번호" },
                    { dataField: "lot_no", caption: "제조번호" },
                    { dataField: "item_qty", caption: "수량" }
                ];

                createPopup("CellStackStatus", "셀 상세 정보", result, columns, "item_cd", 950, 500);

                $("#CellStackStatusPopup").dxPopup("instance").show();
            }
        });


    }


    // Hover 모드 (보류)
    function fn_Hover(e) {
        var element = e.cellElement[0];

        if (element.getAttribute("role") && !element.getAttribute("tabindex") && element.getAttribute("role") == "gridcell") {

            element.style.background = "blue";
        }

    }

    // 그리드 행 높이 조절
    function Init_CellStackStatust_Main() {
        $("#CellStackStatust_Main tr.dx-row.dx-data-row").attr("height", "120px;");
    }

</script>


<div id="CellStackStatus" autoresize="Y">

    <!-- 팝업 -->
    <div id="CellStackStatusPopup"></div>

    <div class="mainTop row">

        <!-- $검색폼-->
        <div class="col-8">

            <form id="CellStackStatus_form">

                <div class="input-wrapper">

                    <div class="col-4 input-group input-group-sm">
                        <div class="input-group-prepend">
                            <span class="input-group-text">창고</span>
                        </div>
                        <div class="form-control">                            
                            @(Html.DevExtreme().DropDownBox()
                                    .ID("CSS_WorkRoomDropBox")
                                    .Name("workroom_cd")
                                    .ValueExpr("workroom_cd")
                                    .DisplayExpr("workroom_nm")
                                    .Placeholder("창고를 선택하시오")
                                    .Height(24)
                                    //.ShowClearButton(true)
                                    .OnValueChanged("CSS_WorkRoom_DropBoxChanged")
                                    .OnClosed("DropDownBoxReload")
                                    .ContentTemplate(new TemplateName("CSS_WorkRoomDropBoxTemplate"))


                            )

                            @using (Html.DevExtreme().NamedTemplate("CSS_WorkRoomDropBoxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                                    .ID("CSS_workroomDropdownGrid")
                                    .DataSource(new JS(@"component.getDataSource()"))
                                    .Columns(columns => {
                                        columns.Add().DataField("workroom_cd").Caption("창고코드").Alignment(HorizontalAlignment.Center);
                                        columns.Add().DataField("workroom_nm").Caption("창고명").Alignment(HorizontalAlignment.Center);
                                    })
                                    .HoverStateEnabled(true)
                                    .SearchPanel(searchPanel =>
                                    {
                                        searchPanel.Visible(true);
                                        searchPanel.Visible(true);
                                    })
                                    .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                                    //.Width(350)
                                    .Height(500)
                                    .Selection(s => s.Mode(SelectionMode.Single))
                                    .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                    .OnSelectionChanged(@<text>
                                                function(selectedItems) {
                                                    var keys = selectedItems.selectedRowKeys;
                                                    component.option("value", keys);
                                                }
                                                </text>)
                                )
                            }
                        </div>

                    </div>

                    <div class="col-4 input-group input-group-sm">

                        <div class="input-group-prepend">
                            <span class="input-group-text">구역</span>
                        </div>

                        <div class="form-control">
                            @(Html.DevExtreme().DropDownBox()
                                    .ID("CSS_ZoneDropBox")
                                    .Name("zone_cd")
                                    .ValueExpr("zone_cd")
                                    .DisplayExpr("zone_nm")
                                    .Height(24)
                                    .Placeholder("구역을 선택하시오")
                                    //.ShowClearButton(true)
                                    .OnValueChanged("CSS_Zone_DropBoxChanged")
                                    .OnClosed("DropDownBoxReload")
                                    .ContentTemplate(new TemplateName("CSS_ZoneDropBoxTemplate"))
                            )

                            @using (Html.DevExtreme().NamedTemplate("CSS_ZoneDropBoxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                                    .ID("CSS_ZoneDropdownGrid")
                                    .DataSource(new JS(@"component.getDataSource()"))
                                    .Columns(columns => {
                                        columns.Add().DataField("zone_cd").Caption("구역코드");
                                        columns.Add().DataField("zone_nm").Caption("구역명");
                                    })
                                    .HoverStateEnabled(true)
                                    .SearchPanel(searchPanel =>
                                    {
                                        searchPanel.Visible(true);
                                        searchPanel.Visible(true);
                                    })
                                    .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                                    //.Width(350)
                                    .Height(500)
                                    .Selection(s => s.Mode(SelectionMode.Single))
                                    .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                    .OnSelectionChanged(@<text>
                                                function(selectedItems) {
                                                    var keys = selectedItems.selectedRowKeys;
                                                    component.option("value", keys);
                                                }
                                                </text>)
                                )
                            }
                        </div>

                    </div>


                    <div class="col-3 input-group input-group-sm">

                        <div class="input-group-prepend">
                            <span class="input-group-text">셀</span>
                        </div>

                        <div class="form-control">
                            @(Html.DevExtreme().DropDownBox()
                                    .ID("CSS_CellDropBox")
                                    .Name("cell_isle")
                                    .ValueExpr("cell_isle")
                                    .DisplayExpr("cell_nm")
                                    .Height(24)
                                    .Placeholder("랙을 선택하시오")
                                    //.ShowClearButton(true)
                                    .OnValueChanged("CSS_Cell_DropBoxChanged")
                                    .OnClosed("DropDownBoxReload")
                                    .ContentTemplate(new TemplateName("CSS_CellDropBoxTemplate"))

                            )

                            @using (Html.DevExtreme().NamedTemplate("CSS_CellDropBoxTemplate"))
                            {
                                @(Html.DevExtreme().DataGrid()
                                    .ID("CSS_CellDropdownGrid")
                                    .DataSource(new JS(@"component.getDataSource()"))
                                    .Columns(columns => {
                                        columns.Add().DataField("cell_nm").Caption("셀명");
                                        columns.Add().DataField("cell_isle").Caption("랙명");
                                    })
                                    .HoverStateEnabled(true)
                                    .SearchPanel(searchPanel =>
                                    {
                                        searchPanel.Visible(true);
                                        searchPanel.Visible(true);
                                    })
                                    .Scrolling(s => s.Mode(GridScrollingMode.Virtual))
                                    //.Width(350)
                                    .Height(500)
                                    .Selection(s => s.Mode(SelectionMode.Single))
                                    .SelectedRowKeys(new JS(@"[component.option(""value"")]"))
                                    .OnSelectionChanged(@<text>
                                                function(selectedItems) {
                                                    var keys = selectedItems.selectedRowKeys;
                                                    component.option("value", keys);
                                                }
                                                </text>)
                                )
                            }
                        </div>

                    </div>

                </div>

            </form>

        </div>

        <!-- $CRUD버튼-->
        <div class="CRUD-btn col-4">
            @* === CRUD 버튼 === *@
            @{Html.SetToolbar(0, true, "Search;Excel");}
            @*@(Html.DevExtreme().Toolbar()
                .ID("CellStackStatusToolBar")
                .Items(items =>
                {
                    items.Add()
                        .Widget(w => w
                        .Button()
                        .Type(ButtonType.Default)
                        .StylingMode(ButtonStylingMode.Contained)
                        .ID("CellStackStatusSearch")
                        .Icon("search")
                        .Text("조회")
                        .OnClick("CellStackStatusSearch")
                        )
                        .Location(ToolbarItemLocation.After);
                })
            )*@

        </div>

    </div>

    <div class="row">

        <!-- 위 그리드 -->
        <div class="col-12">
            <div class="box mb-0">
                @(Html.DevExtreme().DataGrid()
                    .ID("CellStackStatust_Main")
                    .ShowBorders(true)
                    //.SearchPanel(searchPanel => searchPanel.Visible(true))
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                    .ColumnAutoWidth(true)
                    .AllowColumnResizing(true)
                    .KeyExpr("cell_column")
                    .ShowColumnLines(true)
                    .ShowRowLines(true)
                    .Height(869)
                    .OnCellPrepared("Init_CellStackStatust_Main")
                    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                    .OnToolbarPreparing("HideToolbarButton")
                    .Columns(c =>
                    {
                        c.Add().DataField("cell_column").Caption("cell_column").Width("130px");
                        c.Add().DataField("cell_height_1").Caption("1층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_2").Caption("2층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_3").Caption("3층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_4").Caption("4층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_5").Caption("5층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_6").Caption("6층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_7").Caption("7층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                        c.Add().DataField("cell_height_8").Caption("8층").CellTemplate(new JS("CellStackStatustGridLineBreak"));
                    })
                    .OnCellDblClick("CellDoubleClick")
                //.OnCellHoverChanged("fn_Hover")


                )
            </div>
        </div>

    </div>
    
</div>