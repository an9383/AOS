@model HACCP.Models.SysOp.AlarmManage
@using System.Data
@using HACCP.Libs.Views

@{
    Layout = null;
    ViewData["Title"] = "AlarmManage";
    string sData = ViewData["data"] as String;
}
@{
    var AlarmManage_almList = @Html.Raw(Json.Encode(ViewBag.alm_List.Data));
    var AlarmManage_empList = @Html.Raw(Json.Encode(ViewBag.emp_List.Data));
}

<script id="AlarmManageJs" type="text/javascript">

    var alm_List = @AlarmManage_almList;
    var emp_List = @AlarmManage_empList;

    var AlarmManage_crudGubun = "";

    //그리드 수정내용 담는 Array
    var _AlarmManage_List = new Array();
    //validation check
    var _AlarmManage_Valid = true;

    $(function () {

        var AM_emp_columns = [
            { dataField: "emp_cd", caption: "사원코드" },
            { dataField: "emp_nm", caption: "사원명", width: "15%" },
            { dataField: "dept_nm", caption: "부서명", width: "20%" },
            { dataField: "phone_no", caption: "핸드폰번호", width: "20%" },
            { dataField: "email_addr", caption: "이메일주소", width:"25%" }
        ];

        createPopup("AlarmManageEmployee", "사원목록", emp_List, AM_emp_columns, "emp_cd");

        if (alm_List.length <= 0) {
            $("#AlarmManageMSTGrid").dxDataGrid("instance").option("dataSource", []);
            $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
    } else {
            $("#AlarmManageMSTGrid").dxDataGrid("instance").option("dataSource", JSON.parse(@AlarmManage_almList));
            $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowEnabled", true);
            $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
        }

        //수정중 아님
        AlarmManageEditCheck(false, 'N');
        AlarmManageEmployee_EditCheck(false);

    });


    function alarmManageFocusChanged(e) {
        EMP_Detail(e.row.data);
    }

    function EMP_Detail(data) {

        //알람 상세
        $("#AlarmManage input[name=alarm_cd]").val(data.ALM_CODE);
        $("#AlarmManage input[name=alarm_nm]").val(data.ALM_NAME);
        $("#AlarmManage textarea[name=alarm_body]").val(data.ALM_BODY);
        $("#AlarmManage textarea[name=alarm_kakao]").val(data.ALM_FORMAT_KAKAO);
        $("#AlarmManage input[name=kakao_format_code]").val(data.ALM_FORMAT_CODE);

        //사원 목록
        $.ajax({
            type: 'POST',
            url: '/SysOp/AlarmManage_Detail',
            data: {
                alm_code: data.ALM_CODE
            },
            success: function (result) {

                if (result.length <= 0) {
                    $("#AlarmManageEMPGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#AlarmManageEMPGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
                    return;
                }

                var json = JSON.parse(result);

                if (json.sessionLoss) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                $("#AlarmManageEMPGrid").dxDataGrid("instance").option("dataSource", json);
                $("#AlarmManageEMPGrid").dxDataGrid("instance").option("focusedRowEnabled", true);
                $("#AlarmManageEMPGrid").dxDataGrid("instance").option("focusedRowIndex", 0);

                AlarmManageEditCheck(false, 'N');
            }
        });
    }


    function AlarmManageEditCheck(nowEdit, status) {
        // (공통) 화면영역별 element 활성/비활성처리
        UtilView.setActiveElement(nowEdit
            , status
            , "AlarmManageToolbar"
            , "AlarmManageMSTGrid;AlarmManageEMPGrid" //AlarmManageMSTGrid
            , "alarmManageForm"
            , ""
        );

        if (status == "U") {
            $("#alarmManageForm input[name=alarm_cd]").attr("readonly", true);
        }
        else {
            $("#alarmManageForm input[name=alarm_cd]").attr("readonly", false);
        }
    }


    function AlarmManageEmployee_EditCheck(nowEdit) {
        if (nowEdit) {
            $("#AlarmManageEmployeeSave").dxButton().parent().parent().removeClass("display-none");
            $("#AlarmManageEmployeeUndo").dxButton().parent().parent().removeClass("display-none");
            $("#AlarmManageEmployeeInput").dxButton().parent().parent().addClass("display-none");
            $("#AlarmManageEmployeeEdit").dxButton().parent().parent().addClass("display-none");

            $("#AlarmManageMSTGrid").dxDataGrid("option", "disabled", true);

            var editing = {
                allowUpdating: true,
                allowAdding: true,
                allowDeleting: true,
                selectTextOnEditStart: true,
                mode: 'batch'
            }

            var grid = $("#AlarmManageEMPGrid").dxDataGrid("instance");
            grid.option("editing", editing);
        }
        else {
            $("#AlarmManageEmployeeInput").dxButton().parent().parent().removeClass("display-none");
            $("#AlarmManageEmployeeEdit").dxButton().parent().parent().removeClass("display-none");
            $("#AlarmManageEmployeeSave").dxButton().parent().parent().addClass("display-none");
            $("#AlarmManageEmployeeUndo").dxButton().parent().parent().addClass("display-none");

            $("#AlarmManageMSTGrid").dxDataGrid("option", "disabled", false);

            var editing = {
                allowUpdating: false,
                allowAdding: false,
                allowDeleting: false,
                selectTextOnEditStart: true,
                mode: 'batch'
            }
            AlarmManage_crudGubun = "";

            var grid = $("#AlarmManageEMPGrid").dxDataGrid("instance");
            grid.option("editing", editing);

        }
    }

    function AlarmManageEditableCell(e) {


        if (e.parentType === "dataRow") {
            if (e.columnIndex == 1 || e.dataField == "emp_cd") {
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 2 || e.dataField == "emp_nm") {
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 3 || e.dataField == "dept_nm") {
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 4 || e.dataField == "use_yn") {
                e.editorOptions.disabled = true;
            }
        }
    }

   //#region 알람목록 CRUD 버튼 처리
   // 목록 다시 불러오기
    function AlarmManageSearch() {
        $("#AlarmManageMSTGrid").dxDataGrid("instance").option("dataSource", []);
        $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowIndex", 0);

        $("#alarmManageForm")[0].reset();

        $("#AlarmManageEMPGrid").dxDataGrid("instance").option("dataSource", []);
        $("#AlarmManageEMPGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#AlarmManageEMPGrid").dxDataGrid("instance").option("focusedRowIndex", 0);

        $.ajax({
            type: 'POST',
            url: '/SysOp/AlarmManage_Search',
            success: function (result) {

                AlarmManageEditCheck(false, 'N');

                if (result.length <= 0) {
                    $("#AlarmManageMSTGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowEnabled", false);

                    return;
                }

                var json = JSON.parse(result);
                if (json.sessionLoss) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                $("#AlarmManageMSTGrid").dxDataGrid("instance").option("dataSource", json);
                $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowEnabled", true);
                $("#AlarmManageMSTGrid").dxDataGrid("instance").option("focusedRowIndex", 0);

                EMP_Detail(json[0]);

            }
        });

    }


    //저장 버튼 비활성화
    function AlarmManage_ToolbarEdit(e) {

        var toolbarItems = e.toolbarOptions.items;

        $.each(toolbarItems, function (_, item) {
            if (item.name == "saveButton") {
                item.visible = false;
            }
        });
    }

    //그리드 validation check
    function AlarmManage_Required(e) {
        _AlarmManage_Valid = e.isValid;
    }

    // 입력 버튼
    function AlarmManageInput() {

        // 버튼 상태값 체크 및 셋팅
        AlarmManageEditCheck(true, 'I');

        $("#alarmManageForm")[0].reset();

        // 구분 값
        AlarmManage_crudGubun = "Insert";
    }

    // 수정 버튼
    function AlarmManageEdit() {

        // 버튼 상태값 체크 및 셋팅
        AlarmManageEditCheck(true, 'U');
        // 구분 값
        AlarmManage_crudGubun = "Update";

    }

    // 취소 버튼
    function AlarmManageUndo() {

        // 버튼 상태값 체크 및 셋팅
        AlarmManageEditCheck(false, 'N');
        // 구분 값
        AlarmManage_crudGubun = "Undo";
        AlarmManageSearch();
    }

    // 저장 버튼
    function AlarmManageSave() {

        var formData = new FormData($("#alarmManageForm")[0]);
        formData.set("gubun", AlarmManage_crudGubun);


        $.ajax({
            type: 'POST',
            url: '/SysOp/AlarmManageCRUD',
            data: formData,
            contentType: false,
            processData: false,
            success: function (result) {

                var json = JSON.parse(result);

                if (JSON.parse(result).sessionLoss) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }
                alert(json.messege);

                AlarmManageEditCheck(false, 'N');
                AlarmManageSearch();

            }
        });
    }

        // 삭제 버튼
    function AlarmManageDelete() {

        AlarmManageEditCheck(true, 'D');

        // 삭제 여부 팝업
        if (confirm("정말 삭제하시겠습니까??") === true) {

            AlarmManage_crudGubun = "Delete";
            var formData = new FormData($("#alarmManageForm")[0]);
            formData.set("gubun", AlarmManage_crudGubun);


            $.ajax({
                type: 'POST',
                url: '/SysOp/AlarmManageCRUD',
                data: formData,
                contentType: false,
                processData: false,
                success: function (result) {

                    var json = JSON.parse(result);

                    if (JSON.parse(result).sessionLoss) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    alert(json.messege);

                    AlarmManageEditCheck(false, 'N');
                    AlarmManageSearch();

                }
            });


        } else {   //취소

            AlarmManageEditCheck(false, 'N');
            AlarmManageSearch();
            return;

        }

    }


    //구분값에 따라 Cell Readonly
    function EditableCell(e) {

        if (e.parentType === "dataRow") {
            if (e.columnIndex == 1 || e.dataField == "emp_nm") { //사원명
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 2 || e.dataField == "emp_cd") { //사원코드
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 3 || e.dataField == "dept_nm") { //부서명
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 4 || e.dataField == "dept_cd") { //부서코드
                e.editorOptions.disabled = true;
            }
            if (e.columnIndex == 5 || e.dataField == "use_yn") { //사용여부
                e.editorOptions.disabled = true;
            }
        }

    }
    //#end region


    //#region 사원입력 CRUD 버튼 처리

    function AlarmManageEmployee_Search() {

    }


    //CellClick 이벤트
    function AME_NewEmpButton(AM_container, AM_cellInfo) {

        if (typeof AM_cellInfo.value == "undefined" || AM_cellInfo.value == null)
            AM_cellInfo.value = "";

        if (AlarmManage_crudGubun == "") {
            $("<div>").html(AM_cellInfo.value)
                .appendTo(AM_container);
            return;
        }

        $("<div>").html("<div style='float:left; padding-top: 7%;'>" + AM_cellInfo.value + "</div><div style='float:right;' id='AM_icon-plus" + (AM_cellInfo.rowIndex + 1) + "'></div>")
            .appendTo(AM_container);

        //$("<div>").html("<div style='float:left;'>" + AM_cellInfo.value + "</div><div style='float:right;' id='icon-plus" + (AM_cellInfo.rowIndex + 1) + "'></div>")
        //    .appendTo(AM_container);

        $("#AM_icon-plus" + (AM_cellInfo.rowIndex + 1)).dxButton({
            icon: "search",
            onClick: function (e) {
            }
        });
    }

    function AlarmManageCellEvent(e) {

        if (AlarmManage_crudGubun!= "") {

            if (e.columnIndex == 1 && !e.row.isNewRow) {
                alert("사원명은 수정할 수 없습니다.");
                return;
            }

            if (e.columnIndex == 1) {
                var popup = $("#AlarmManageEmployeePopup").dxPopup("instance");
                popup.show();
            }
        }

    }

    function AlarmManageEmployee_Input() {

        // 버튼 상태값 체크 및 셋팅
        AlarmManageEmployee_EditCheck(true);
        // 구분 값
        AlarmManage_crudGubun = "Insert_EMP";

    }

    // 수정 버튼
    function AlarmManageEmployee_Edit() {

        // 버튼 상태값 체크 및 셋팅
        AlarmManageEmployee_EditCheck(true);
        // 구분 값
        AlarmManage_crudGubun = "Update_EMP";
        _AlarmManage_List = new Array();

    }

    // 취소 버튼
    function AlarmManageEmployee_Undo() {

        // 버튼 상태값 체크 및 셋팅
        AlarmManageEmployee_EditCheck(false);
        // 구분 값
        _AlarmManage_List = new Array();
        _AlarmManage_Valid = true;
        AlarmManage_crudGubun = "";
        AlarmManageSearch();
    }

    //Dev 수정
    function AlarmManageEmployee_Updated(info) {
        AlarmManageEmployee_EditCheck(true, 'U');
        AlarmManage_crudGubun = "Update_EMP";

        AlarmManage_CheckCRUDData(info.data);
    }

    //Dev 입력버튼
    function AlarmManageEmployeeInsert(info) {

        AlarmManageEmployee_EditCheck(true, 'I');
        AlarmManage_crudGubun = "Insert_EMP";

        AlarmManage_CheckCRUDData(info.data);
    }

    //dev 삭제버튼
    function AlarmManageEmployee_Delete(info) {
        AlarmManage_crudGubun = "Delete_EMP";

        AlarmManage_CheckCRUDData(info.data);
    }

    function AlarmManage_CheckCRUDData(data) {


        if (data.ALD_VIEW == null || data.ALD_VIEW == false || data.ALD_VIEW == "N")
            data.ALD_VIEW = "N";
        else
            data.ALD_VIEW = "Y";

        if (data.ALD_SMS == null || data.ALD_SMS == false || data.ALD_SMS == "N")
            data.ALD_SMS = "N";
        else
            data.ALD_SMS = "Y";
        if (data.ALD_KAKAO == null || data.ALD_KAKAO == false || data.ALD_KAKAO == "N")
            data.ALD_KAKAO = "N";
        else
            data.ALD_KAKAO = "Y";
        if (data.ALD_EMAIL == null || data.ALD_EMAIL == false || data.ALD_EMAIL == "N")
            data.ALD_EMAIL = "N";
        else
            data.ALD_EMAIL = "Y";

        //체크박스가 하나라도 체크 안되어 있으면 저장안함.
        if (data.ALD_VIEW == "N" && data.ALD_SMS == "N" && data.ALD_KAKAO == "N" && data.ALD_EMAIL == "N") {
            alert(data.emp_nm + "님의 알람 받을 경로를 하나 이상 선택 해 주세요.");
            _AlarmManage_Valid = false;
            return;
        }

        data.gubun = AlarmManage_crudGubun;
        data.alarm_cd = $("#alarmManageForm input[name=alarm_cd]").val();

        _AlarmManage_List.push(data);
    }

    // 파란 저장 버튼 //Insert, Update
    async function AlarmManageEmployee_Save() {

        if (!confirm("변경사항을 저장하시겠습니까?")) {
            return;
        }

        await $("#AlarmManageEMPGrid").dxDataGrid("instance").saveEditData();

        if (!_AlarmManage_Valid) {
            //alert("필수 데이터를 입력 해 주세요.");
            return;
        }

        EMP_CRUD(_AlarmManage_List);
    }



    function EMP_CRUD(data) {

        $.ajax({
            type: 'POST',
            url: '/SysOp/AlarmManage_EMP_CRUD',
            data: {
                iModel: JSON.stringify(data)
            },
            dataType: 'json',
            async: false,
            success: function (result) {
                alert("수정 되었습니다.");

                AlarmManageEmployee_EditCheck(false);
                AlarmManageSearch();

            }
        });
    }

    //#end region



    function AlarmManageEmployeeRowDblClick(selectedItems) {

        //main 상단 그리드
        var grid = $("#AlarmManageEMPGrid").dxDataGrid("instance");

        var data = grid.getVisibleRows();
        var total_cnt = grid.totalCount();

        console.log(data);

        for (var i = 0; i < total_cnt; i++) {

            if (data[i].data.emp_cd == selectedItems.values[0]) {
                alert("같은 사원은 중복해서 입력할 수 없습니다.");
                var popup = $("#AlarmManageEmployeePopup").dxPopup("instance");
                popup.hide();
                return;
            }
        }

        grid.cellValue(0, "emp_cd", selectedItems.values[0]);
        grid.cellValue(0, "emp_nm", selectedItems.values[1]);
        grid.cellValue(0, "dept_nm", selectedItems.values[2]);
        grid.cellValue(0, "phone_no", selectedItems.values[3]);
        grid.cellValue(0, "email_addr", selectedItems.values[4]);
        grid.cellValue(0, "use_yn", selectedItems.values[5]);

        var popup = $("#AlarmManageEmployeePopup").dxPopup("instance");
        popup.hide();
    }


</script>


<div id="AlarmManage" autoresize="Y">

    <div id="AlarmManageEmployeePopup"> </div>

    <div class="mainTop row pb-0 m-0">
        <div class="CRUD-btn col-4">
        </div>
        <div class="CRUD-btn col-8 pr-0" >
            @* === 알람목록 CRUD 버튼 === *@
            @{Html.SetToolbar(0, true, "Search;Input;Edit;Delete;Save;Undo");}
        </div>
    </div>

    <div class="row m-0 p-0">
        <div class="col-4" style="padding:0px">
            <div class="box mr-1" style="height:410px;margin:0px">
                <div class="divName">
                    <p>알람 목록</p>
                </div>
                @(Html.DevExtreme().DataGrid()
                    .ID("AlarmManageMSTGrid")
                    .ShowBorders(true)
                    .ShowColumnLines(true)
                    .HoverStateEnabled(true)
                    .ColumnAutoWidth(true)
                    .AllowColumnResizing(true)
                    .Height("371")
                    .SearchPanel(searchPanel => searchPanel.Visible(true))
                    .KeyExpr("ALM_CODE")
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                    .Columns(c =>
                    {
                        c.Add().DataField("ALM_CODE").Caption("알람코드").Alignment(HorizontalAlignment.Center);
                        c.Add().DataField("ALM_NAME").Caption("알람이름").Alignment(HorizontalAlignment.Center);
                    })
                    .OnFocusedRowChanged("alarmManageFocusChanged")
                )
            </div>
        </div>
        <div class="col-8" style="height:410px; padding:0px">
            <div class="box pt-0 pb-0" style="height:410px; margin:0px">
                <form id="alarmManageForm">
                    <div class="divName">
                        <p>알람 상세</p>
                    </div>
                    <br />
                    <div class="input-wrapper">
                        <label class="col-2">알람코드<star>*</star></label>
                        <div class="input-group col-3">
                            <input type="text" class=" form-control col-12 required" id="alarm_cd" name="alarm_cd" />
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-2">알람명<star>*</star></label>
                        <div class="input-group col-3">
                            <input type="text" class="col-12 form-control required" name="alarm_nm" />
                        </div>
                        <label class="col-2">포맷코드</label>
                        <div class="input-group col-3">
                            <input type="text" class="col-12 form-control" name="kakao_format_code" />
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-2">알람내용<star>*</star></label>
                        <div class="input-group col-3">
                            <textarea style="height:280px" class="form-control col-12 required" name="alarm_body"></textarea>
                        </div>
                        <label class="col-2">카카오톡 내용<star>*</star></label>
                        <div class="input-group col-3">
                            <textarea style="height:280px" class="form-control col-12 required" name="alarm_kakao"></textarea>
                        </div>
                    </div>
                </form>

            </div>
        </div>
    </div>

    <div class="box mb-0 mt-1" style="padding:0px;height:auto">
        <div class="divName">사원 목록</div>
        <div class="CRUD-btn">
            @* === 사원목록 CRUD 버튼 === *@
            @(Html.DevExtreme().Toolbar()
                .ID("AlarmManageEmployeeCRUD_Btn")
                .Items(items =>
                {
                    items.Add()
                    .Widget(w => w
                    .Button()
                    .Type(ButtonType.Default)
                    .StylingMode(ButtonStylingMode.Contained)
                    .ID("AlarmManageEmployeeEdit")
                    .Icon("edit")
                    .Text("수정")
                    .OnClick("AlarmManageEmployee_Edit")
                    )
                    .Location(ToolbarItemLocation.After);
                })
                .Items(items =>
                {
                    items.Add()
                    .Widget(w => w
                    .Button()
                    .Type(ButtonType.Default)
                    .StylingMode(ButtonStylingMode.Contained)
                    .ID("AlarmManageEmployeeSave")
                    .Icon("save")
                    .Text("저장")
                    .OnClick("AlarmManageEmployee_Save")
                    )
                    .Location(ToolbarItemLocation.After);
                })
                .Items(items =>
                {
                    items.Add()
                    .Widget(w => w
                    .Button()
                    .Type(ButtonType.Default)
                    .StylingMode(ButtonStylingMode.Contained)
                    .ID("AlarmManageEmployeeUndo")
                    .Icon("undo")
                    .Text("취소")
                    .OnClick("AlarmManageEmployee_Undo")
                    )
                    .Location(ToolbarItemLocation.After);
                })
            )
        </div>
        @(Html.DevExtreme().DataGrid()
            .ID("AlarmManageEMPGrid")
            .ShowBorders(true)
            .ShowColumnLines(true)
            .HoverStateEnabled(true)
            .ColumnAutoWidth(true)
            .AllowColumnResizing(true)
            .SearchPanel(searchPanel => searchPanel.Visible(true))
            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
            .Selection(s => s.Mode(SelectionMode.Single))
            .KeyExpr("emp_cd")
            .Height("385")
            .FocusedRowEnabled(true)
            .Editing(editing =>
            {
                editing.Mode(GridEditMode.Row);
                editing.AllowAdding(false);
                editing.AllowDeleting(false);
                editing.AllowUpdating(false);
            })
            .OnToolbarPreparing("AlarmManage_ToolbarEdit")
            .OnRowUpdated("AlarmManageEmployee_Updated")
            .OnRowInserted("AlarmManageEmployeeInsert")
            .OnRowRemoved("AlarmManageEmployee_Delete")
            .OnRowValidating("AlarmManage_Required")
            .OnCellClick("AlarmManageCellEvent")
            .OnEditorPreparing("AlarmManageEditableCell")
            .Columns(c =>
            {
                c.Add().DataField("emp_cd").Caption("사원코드").Alignment(HorizontalAlignment.Center).Width("8%");
                c.Add().DataField("emp_nm").Caption("사원명").Alignment(HorizontalAlignment.Center).CellTemplate(new JS("AME_NewEmpButton")).Width(100);
                c.Add().DataField("dept_nm").Caption("부서명").Alignment(HorizontalAlignment.Center);
                c.Add().DataField("phone_no").Caption("핸드폰번호").Alignment(HorizontalAlignment.Center);
                c.Add().DataField("email_addr").Caption("이메일주소").Alignment(HorizontalAlignment.Center).Width("20%");
                c.Add().DataField("use_yn").Caption("사용여부").Alignment(HorizontalAlignment.Center).DataType(GridColumnDataType.Boolean)
                    .CalculateCellValue(@"function(rowData) { return (rowData.use_yn == ""Y"" || rowData.use_yn == true); }");
                c.Add().DataField("ALD_VIEW").Caption("알림창").Alignment(HorizontalAlignment.Center).DataType(GridColumnDataType.Boolean)
                    .CalculateCellValue(@"function(rowData) { return (rowData.ALD_VIEW == ""Y"" || rowData.ALD_VIEW == true); }");
                c.Add().DataField("ALD_SMS").Caption("SMS").Alignment(HorizontalAlignment.Center).DataType(GridColumnDataType.Boolean)
                    .CalculateCellValue(@"function(rowData) { return (rowData.ALD_SMS == ""Y"" || rowData.ALD_SMS == true); }");
                c.Add().DataField("ALD_KAKAO").Caption("카카오톡").Alignment(HorizontalAlignment.Center).DataType(GridColumnDataType.Boolean)
                    .CalculateCellValue(@"function(rowData) { return (rowData.ALD_KAKAO == ""Y"" || rowData.ALD_KAKAO == true); }");
                c.Add().DataField("ALD_EMAIL").Caption("이메일").Alignment(HorizontalAlignment.Center).DataType(GridColumnDataType.Boolean)
                    .CalculateCellValue(@"function(rowData) { return (rowData.ALD_EMAIL == ""Y"" || rowData.ALD_EMAIL == true); }");
            })
        )

    </div>
</div>