@*공정실적관리*@
@using System.Data
@using HACCP.Libs
@using HACCP.Libs.Views

@{
    Layout = null;
    ViewData["Title"] = "OrderProcResult";

    var OrderProcResultAuth = @Html.Raw(Json.Encode(ViewBag.OrderProcResultAuth.Data));
    var processData = @Html.Raw(Json.Encode(ViewBag.processData.Data));
    var itemPopupData = @Html.Raw(Json.Encode(ViewBag.itemPopupData.Data));
    var Employees = @Html.Raw(Json.Encode(ViewBag.Employees.Data));
    var Equipments = @Html.Raw(Json.Encode(ViewBag.Equipments.Data));
    //var orderProcResultData = @Html.Raw(Json.Encode(ViewBag.orderProcResultData.Data));
}

@{

    var OrderProcResultTabs = new[] {
        new { id = 1, text = "생산 실적" },
        new { id = 2, text = "시험의뢰" },
        new { id = 3, text = "작업자 실적" },
        new { id = 4, text = "설비 실적" },
        new { id = 5, text = "자재 실적" },
        new { id = 6, text = "포장 실적" }
    };

}

@{
    string[] OrderProcResultEmpGridKey = { "order_proc_id", "ew_cd", "order_gubun" };
    string[] OrderProcResultEquipGridKey = { "order_proc_id", "ew_cd", "order_gubun" };
}

@*공정실적 등록*@

<script id="OrderProcResultJs">

    var _orderProcResultDetail = new Array();
    var _isSecondPacking = false;
    var _orderProcResultSignValid = false;
    var _selectSign = "";
    var _CRUDState = "";
    var _orderProcResultCellClickEvent;
    var _orderProcResultIsEditing;
    var _orderProcResultOrderNo;
    var _orderProcResultOrderProcId;
    var _orderProcResultSDate;
    var _orderProcResultEDate;

    var _orderProcResulWorkerChenges = new Array();
    var _orderProcResulEquipChenges = new Array();
    var _orderProcResulMaterialChenges = new Array();

    var _orderProcResultAddPackChanges = new Array();
    var _issue_emp_cd = "";
    var _orderProcResultMaterialSignValidation = false;
    var _orderProcResultMaterialSignValid_Status = false;
    var _orderProcResultMaterialStatus_AddPack = true;
    var _isReceiveField_Use = false;


    $(function () {
        setDatePicker("#OrderProcResult .datepicker");

        $("#OrderProcResultProcNameGrid").dxDataGrid("option", "dataSource", JSON.parse(@processData));
        @*$("#OrderProcResultGrid").dxDataGrid("option", "dataSource", JSON.parse(@orderProcResultData));*@

        var popupColumns = {
            "item": [{ dataField: "item_cd", caption: "품목코드" }, { dataField: "item_nm", caption: "품목명" }]
            , "employee": [{ dataField: "emp_cd", caption: "사원코드" }, { dataField: "emp_nm", caption: "사원명" }, { dataField: "dept_nm", caption: "부서명" }]
            , "equipment": [{ dataField: "equip_cd", caption: "설비코드" }, { dataField: "equip_nm", caption: "설비명" }, { dataField: "workroom_nm", caption: "작업실" }]
        };

        createPopup("OrderProcResultItem", "품목조회", @itemPopupData, popupColumns.item, "item_cd");
        createPopup("OrderProcResultEmployee", "사원조회", @Employees, popupColumns.employee, "emp_cd");
        createPopup("OrderProcResultEquipment", "설비조회", @Equipments, popupColumns.equipment, "equip_cd");

        orderProcResultIsEdited(false);

        $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");

        $("#OrderProcResultSave").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultUndo").dxButton().parent().parent().addClass("display-none");

        //showTestNumberCreate("1", "L", "", $("#OrderProcResultTab2 input[name=request_date]").val());

    });

    // 수정중인지 체크
    function orderProcResultIsEdited(isEdited) {
        var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");
        var tabs = $("#OrderProcResultTabPanel").dxTabPanel("instance");

        _orderProcResultIsEditing = isEdited;
        if (isEdited) {
            for (var i = 0; i < 6; i++) {

                if (tabIndex === i) {
                    continue;
                }

                tabs.option("items["+i+"].disabled",true);
            }

            $("#OrderProcResultTab" + (tabIndex + 1) + " form input").prop("disabled", false);
            $("#OrderProcResultTab" + (tabIndex + 1) + " form input[type=radio]").prop("disabled", false);

            $('#OrderProcResultProcNameGrid').dxDataGrid("instance").option("disabled", true);
            $('#OrderProcResultGrid').dxDataGrid("instance").option("disabled", true);

            if (tabIndex != 4) {
                $("#OrderProcResultTab" + (tabIndex + 1) + " .datepicker").datepicker({
                    format: "yyyy-mm-dd",	//데이터 포맷 형식(yyyy : 년 mm : 월 dd : 일 )
                    startDate: '-10y',	//달력에서 선택 할 수 있는 가장 빠른 날짜. 이전으로는 선택 불가능 ( d : 일 m : 달 y : 년 w : 주)
                    endDate: '+10y',	//달력에서 선택 할 수 있는 가장 느린 날짜. 이후로 선택 불가 ( d : 일 m : 달 y : 년 w : 주)
                    autoclose: true,	//사용자가 날짜를 클릭하면 자동 캘린더가 닫히는 옵션
                    calendarWeeks: false, //캘린더 옆에 몇 주차인지 보여주는 옵션 기본값 false 보여주려면 true
                    clearBtn: false, //날짜 선택한 값 초기화 해주는 버튼 보여주는 옵션 기본값 false 보여주려면 true
                    disableTouchKeyboard: false,	//모바일에서 플러그인 작동 여부 기본값 false 가 작동 true가 작동 안함.
                    immediateUpdates: false,	//사용자가 보는 화면으로 바로바로 날짜를 변경할지 여부 기본값 :false
                    multidate: false, //여러 날짜 선택할 수 있게 하는 옵션 기본값 :false
                    multidateSeparator: ",", //여러 날짜를 선택했을 때 사이에 나타나는 글짜 2019-05-01,2019-06-01
                    templates: {
                        leftArrow: '&laquo;',
                        rightArrow: '&raquo;'
                    }, //다음달 이전달로 넘어가는 화살표 모양 커스텀 마이징
                    showWeekDays: true,// 위에 요일 보여주는 옵션 기본값 : true
                    //title: "테스트",	//캘린더 상단에 보여주는 타이틀
                    todayHighlight: true,	//오늘 날짜에 하이라이팅 기능 기본값 :false
                    toggleActive: false,	//이미 선택된 날짜 선택하면 기본값 : false인경우 그대로 유지 true인 경우 날짜 삭제
                    weekStart: 0,//달력 시작 요일 선택하는 것 기본값은 0인 일요일
                    language: "ko"	//달력의 언어 선택, 그에 맞는 js로 교체해줘야한다.

                });
            }

        } else {

            $("#OrderProcResultTabPanel").dxTabPanel("instance");

            for (var i = 0; i < 6; i++) {

                tabs.option("items["+i+"].disabled",false);
            }

            $('#OrderProcResultProcNameGrid').dxDataGrid("instance").option("disabled", false);
            $('#OrderProcResultGrid').dxDataGrid("instance").option("disabled", false);

            $("#OrderProcResultTab" + (tabIndex + 1) + " form input").prop("disabled", true);
            $("#OrderProcResultTab" + (tabIndex + 1) + " form input[type=radio]").prop("disabled", true);
            $("#OrderProcResultTab" + (tabIndex + 1) + " .datepicker").datepicker('destroy');


            if (tabIndex == 0) {
                $("#OrderProcResultSearch").dxButton().parent().parent().removeClass("display-none");
                $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");
                //$("#OrderProcResultExcel").dxButton().parent().parent().removeClass("display-none");

                $("#OrderProcResultSave").dxButton().parent().parent().addClass("display-none");
                $("#OrderProcResultUndo").dxButton().parent().parent().addClass("display-none");
            } else if (tabIndex == 2 || tabIndex == 3) {
                $("#OrderProcResultSave").dxButton().parent().parent().addClass("display-none");
                $("#OrderProcResultUndo").dxButton().parent().parent().addClass("display-none");

                $("#OrderProcResultSearch").dxButton().parent().parent().removeClass("display-none");
                $("#OrderProcResultInput").dxButton().parent().parent().removeClass("display-none");
                $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");
                $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");
            } else if (tabIndex == 4) {
                $("#OrderProcResultSearch").dxButton().parent().parent().removeClass("display-none");

                $("#OrderProcResultSave").dxButton().parent().parent().addClass("display-none");
                $("#OrderProcResultUndo").dxButton().parent().parent().addClass("display-none");

                orderProcResultTab5_ButtonSet();
            }
        }
    }

    // 제조지시 검색용 팝업 데이터 입력 & 팝업 생성
    function orderProcResultSelectWorkorder() {

        $("#orderProcResultWorkorderPopup").dxPopup("instance").show();

        $('#OrderProcResultPopupHeader .datepicker').datepicker({
            format: "yyyy-mm-dd",	//데이터 포맷 형식(yyyy : 년 mm : 월 dd : 일 )
            startDate: '-10y',	//달력에서 선택 할 수 있는 가장 빠른 날짜. 이전으로는 선택 불가능 ( d : 일 m : 달 y : 년 w : 주)
            endDate: '+10y',	//달력에서 선택 할 수 있는 가장 느린 날짜. 이후로 선택 불가 ( d : 일 m : 달 y : 년 w : 주)
            autoclose: true,	//사용자가 날짜를 클릭하면 자동 캘린더가 닫히는 옵션
            calendarWeeks: false, //캘린더 옆에 몇 주차인지 보여주는 옵션 기본값 false 보여주려면 true
            clearBtn: false, //날짜 선택한 값 초기화 해주는 버튼 보여주는 옵션 기본값 false 보여주려면 true
            datesDisabled: ['2019-06-24', '2019-06-26'],//선택 불가능한 일 설정 하는 배열 위에 있는 format 과 형식이 같아야함.
            //daysOfWeekDisabled: [0, 6],	//선택 불가능한 요일 설정 0 : 일요일 ~ 6 : 토요일
            //daysOfWeekHighlighted: [3], //강조 되어야 하는 요일 설정
            disableTouchKeyboard: false,	//모바일에서 플러그인 작동 여부 기본값 false 가 작동 true가 작동 안함.
            immediateUpdates: false,	//사용자가 보는 화면으로 바로바로 날짜를 변경할지 여부 기본값 :false
            multidate: false, //여러 날짜 선택할 수 있게 하는 옵션 기본값 :false
            multidateSeparator: ",", //여러 날짜를 선택했을 때 사이에 나타나는 글짜 2019-05-01,2019-06-01
            templates: {
                leftArrow: '&laquo;',
                rightArrow: '&raquo;'
            }, //다음달 이전달로 넘어가는 화살표 모양 커스텀 마이징
            showWeekDays: true,// 위에 요일 보여주는 옵션 기본값 : true
            //title: "테스트",	//캘린더 상단에 보여주는 타이틀
            todayHighlight: true,	//오늘 날짜에 하이라이팅 기능 기본값 :false
            toggleActive: false,	//이미 선택된 날짜 선택하면 기본값 : false인경우 그대로 유지 true인 경우 날짜 삭제
            weekStart: 0,//달력 시작 요일 선택하는 것 기본값은 0인 일요일
            language: "ko"	//달력의 언어 선택, 그에 맞는 js로 교체해줘야한다.

        });

        var today = new Date();

        var year = today.getFullYear();
        var month = today.getMonth() + 1;
        var date = today.getDate();

        var dateStr = year + "-" + (month >= 10 ? month : "0" + month) + "-" + (date >= 10 ? date : "0" + date)

        setOrderProcResultWorkorderPopupData(dateStr, dateStr);
    }

    // 제조지시 검색용 팝업 내 검색
    function OrderProcResultWorkorderSearch() {

        setOrderProcResultWorkorderPopupData($("#workorder_start_date").val(), $("#workorder_end_date").val());
    }

    // 제조지시 검색용 팝업 내 검색
    function setOrderProcResultWorkorderPopupData(sDate, eDate) {

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/SelectOrderGuideWorkorder',
            data: {
                sDate: sDate,
                eDate: eDate
            },
            success: function (result) {

                if (result.length <= 0) {
                    $("#OrderProcResultWorkorderGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#OrderProcResultWorkorderGrid").dxDataGrid("instance").option("focusedRowKey", "");
                    return;
                }

                $("#OrderProcResultWorkorderGrid").dxDataGrid("instance").option("dataSource", JSON.parse(result));

            }
        });
    }

    // 제조지시 팝업 로우 선택
    function OrderProcResultWorkorderSelect() {

        var grid = $("#OrderProcResultWorkorderGrid").dxDataGrid("instance");

        if (grid.option("focusedRowKey") == null || grid.option("focusedRowKey") === "") {
            grid.option("focusedRowIndex", 0);
        }

        var data = getGridRowByKey("OrderProcResultWorkorderGrid", grid.option("focusedRowKey"));

        $("#OrderProcResultSearchForm input[name=order_no]").val(data.order_no);
        $("#OrderProcResultSearchForm input[name=item_cd]").val(data.item_cd);

        $("#OrderProcResultSearchForm input[name=sdate]").datepicker('setValue', $("#OrderProcResultPopupHeader input[name=workorder_start_date]").val()).datepicker('update');
        $("#OrderProcResultSearchForm input[name=edate]").datepicker('setValue', $("#OrderProcResultPopupHeader input[name=workorder_end_date]").val()).datepicker('update');

        //$("#OrderProcResultSearchForm input[name=sdate]").val($("#OrderProcResultPopupHeader input[name=workorder_start_date]").val());
        //$("#OrderProcResultSearchForm input[name=edate]").val($("#OrderProcResultPopupHeader input[name=workorder_end_date]").val());

        $("#orderProcResultWorkorderPopup").dxPopup("instance").hide();

        //OrderProcResultSelect(data.order_no);
    }

    // 제조코드 팝업
    function orderProcResultSelectItem() {
        $("#OrderProcResultItemPopup").dxPopup("instance").show();
    }

    // 제조코드 팝업 로우 더블클릭
    function OrderProcResultItemRowDblClick(selectedItems) {
        //DevExpress.ui.notify({
        //    message: "조회중 입니다...",
        //    type: "success",
        //    displayTime: 1000,
        //    height: 55,
        //    width: 200,
        //    position: {
        //        my: "center",
        //        at: "center",
        //        of: "#OrderProcResultWorkorderGrid"
        //    }
        //});

        var data = selectedItems.data;
        $("#OrderProcResultSearchForm input[name=item_cd]").val(data.item_cd);


        var popup = $("#OrderProcResultItemPopup").dxPopup("instance");
        popup.hide()
    }

    // 상단 그리드 포커스 변경
    function OrderProcResultSelectOderProc() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var data = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        _isSecondPacking = OrderProcResultSecondPackingCheck();

        _orderProcResultOrderNo = data.order_no;
        _orderProcResultOrderProcId = data.order_proc_id;
        _orderProcResultSDate = new Date(data.order_proc_receive_time);
        _orderProcResultEDate = new Date(data.order_proc_enter_time);

        _orderProcResultDetail = new Array();

        if (data.qc_yn == "미대상") {
            var tabindex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");
            if (tabindex == 1)
                $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex", 0);

            $("#OrderProcResultTabPanel").dxTabPanel("instance").option("items[1].visible", false);
        }
        else {
            $("#OrderProcResultTabPanel").dxTabPanel("instance").option("items[1].visible", true);
        }

        if (data.m_order_no == null || data.m_order_no == "") {
            var tabindex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");
            if (tabindex == 4 || tabindex == 5)
                $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex", 0);

            $("#OrderProcResultTabPanel").dxTabPanel("instance").option("items[4].visible", false);
            $("#OrderProcResultTabPanel").dxTabPanel("instance").option("items[5].visible", false);
        }
        else {
            $("#OrderProcResultTabPanel").dxTabPanel("instance").option("items[4].visible", true);
            $("#OrderProcResultTabPanel").dxTabPanel("instance").option("items[5].visible", true);
        }

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/SelectOrderProcResultDetail',
            dataType: "json",
            data: {
                order_no: data.order_no,
                order_proc_id: data.order_proc_id,
                m_order_no: data.m_order_no,
                process_cd: data.process_cd
            },
            async: false,
            success: function (result) {

                if (!Array.isArray(result)) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                }

                for (var i = 0; i < result.length; i++) {
                    _orderProcResultDetail[i] = JSON.parse(result[i]);
                }

                var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

                orderProcResultSetDetail(tabIndex);

            }

        })

    }

    // 마지막 포장공정인지 체크
    function OrderProcResultSecondPackingCheck() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var data = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var resultYN;

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultCheck',
            dataType: "json",
            async: false,
            data: {
                m_order_no: data.m_order_no,
                process_cd: data.process_cd
            },
            success: function (result) {

                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                resultYN = json.message;

            }

        })

        return resultYN === "Y" ? true : false;

    }

    // 자재불출 현장프로그램 사용여부 체크
    function OrderProcResultReceiveFieldUseCheck() {

        var resultYN;

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultGetReceiveFieldUseYN',
            async: false,
            data: {
            },
            dataType: 'json',
            success: function (result) {
                var json = JSON.parse(result);

                resultYN = json.message;
            }
        })

        return resultYN === "Y" ? true : false;
    }

    // 하단 탭 변경
    function OrderProcResultChangeTab(e) {

        orderProcResultSetDetail(e.itemIndex);

    }

    // 하단 탭 데이터 삽입
    function orderProcResultSetDetail(tabIndex) {

        orderProcResultIsEdited(false);

        $("#OrderProcResultSearch").dxButton().parent().parent().removeClass("display-none");

        $("#OrderProcResultSave").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultUndo").dxButton().parent().parent().addClass("display-none");

        switch (tabIndex) {

            case 0:

                orderProcResultFillTab1();

                $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");

                $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");

                if (_isSecondPacking) {
                    $("#packingInfoDiv").removeClass("display-none");
                } else {
                    $("#packingInfoDiv").addClass("display-none");
                }

                break;
            case 1:

                orderProcResultFillTab2();

                if (_orderProcResultDetail[1][0].request_emp_cd1) {
                    $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");

                } else {
                    $("#OrderProcResultInput").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                }


                break;
            case 2:

                orderProcResultFillTab3();

                if (_orderProcResultDetail[2].data === "empty") {
                    $("#OrderProcResultInput").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                } else {
                    $("#OrderProcResultInput").dxButton().parent().parent().removeClass("display-none");
                    $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");
                }

                break;
            case 3:

                orderProcResultFillTab4();

                if (_orderProcResultDetail[3].data === "empty") {
                    $("#OrderProcResultInput").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                } else {
                    $("#OrderProcResultInput").dxButton().parent().parent().removeClass("display-none");
                    $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");
                }

                break;
            case 4:

                orderProcResultFillTab5();
                orderProcResultTab5_ButtonSet();

                break;
            case 5:

                orderProcResultFillTab6();

                var gridData = $("#OrderProcResultPackingGrid").dxDataGrid("instance").option("dataSource");

                $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");

                //if (gridData.length > 0) {
                //    $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");
                //    $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");

                //    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                //} else {
                //    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                //    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                //    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                //}

                break;
        }
    }

    // 자재 실적 상단 버튼 상태 변경 (입력 / 수정 / 삭제)
    function orderProcResultTab5_ButtonSet() {
        var gridData = $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("dataSource");
        
        if (gridData != null && gridData.length > 0) {
            var return_complete = true;
            var result_complete = true;
            for (var i = 0; i < gridData.length; i++) {
                if (!gridData[i].return_receive_emp_cd) {
                    return_complete = false;
                }
                if (!gridData[i].return_issue_emp_cd || gridData[i].return_issue_emp_cd == "" || gridData[i].return_issue_emp_cd == "Forced Release") {
                    result_complete = false;
                }
            }

            if (!_isReceiveField_Use) {
                if (!result_complete) {         // 사용량, 폐기량 입력 미완료
                    $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                }
                else if (!return_complete) {    // 사용량, 폐기량 입력 완료 / 반납 미완료
                    $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                }
                else {                          // 사용량, 폐기량 입력 완료 / 반납 완료
                    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                }
            }
            else {
                if (!result_complete) {         // 사용량, 폐기량 입력 미완료
                    $("#OrderProcResultEdit").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
                }
                else {                          // 사용량, 폐기량 입력 완료
                    $("#OrderProcResultDelete").dxButton().parent().parent().removeClass("display-none");

                    $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
                    $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
                }
            }
        }
        else {
            $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
            $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
            $("#OrderProcResultDelete").dxButton().parent().parent().addClass("display-none");
        }
    }

    // 생산실적 탭 데이터 삽입
    function orderProcResultFillTab1() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var data = _orderProcResultDetail[0][0];


        $("#OrderProcResultTab1 form")[0].reset();

        if (data.rate_type == "Y") {
            $("#order_proc_real_qty").val(data.order_proc_real_qty);
            $("#order_qty").val(data.order_qty);
        } else {
            $("#order_proc_real_qty").val(data.order_proc_real_ea_qty);
            $("#order_qty").val(data.order_ea_qty);
        }



        $("#OrderProcResultTab1 input[name=order_proc_rate]").val(data.order_proc_rate);
        $("#OrderProcResultTab1 input[name=order_proc_content]").val(data.order_proc_content);
        $("#OrderProcResultTab1 input[name=receive_date]").val(data.receive_date);
        $("#OrderProcResultTab1 input[name=receive_time]").val(data.receive_time == null ? data.receive_time : (data.receive_time).substring(0, 5));
        $("#OrderProcResultTab1 input[name=order_enter_date]").val(data.order_enter_date);
        $("#OrderProcResultTab1 input[name=enter_time]").val(data.enter_time == null ? data.enter_time : (data.enter_time).substring(0, 5));


        // 이론지시량의 무게단위는 g 으로 고정
        //if (gridData.item_content_unit != null && gridData.item_content_unit !== "") {
        //    $("#OrderProcResultTab1 .item_content_unit").text(gridData.item_content_unit);
        //} else {
        //    $("#OrderProcResultTab1 .item_content_unit").text("  ");
        //}
        $("#OrderProcResultTab1 .item_content_unit").text("g");


        if (gridData.item_packunit != null && gridData.item_packunit !== "") {
            $("#OrderProcResultTab1 .order_batch_size_unit").text(gridData.item_packunit);
        } else {
            $("#OrderProcResultTab1 .order_batch_size_unit").text("  ");
        }

        // 공정이 포장표준서 공정일 경우
        //if (gridData.process_type1 == "P") {
        if (gridData.pack_order_no != null && gridData.pack_order_no != "") {
            if (gridData.item_packunit == "KG" || gridData.item_packunit == "G" || gridData.item_packunit == "MG") {
                var qty = 0;
                switch (gridData.item_content_unit) {
                    case "kg":
                        qty = (gridData.order_qty2 * 1000);

                        break;
                    case "g":
                        qty = gridData.order_qty2;

                        break;
                    case "mg":
                        qty = (gridData.order_qty2 / 1000);

                        break;
                }


                $("#OrderProcResultTab1 input[name=order_qty]").val(qty); // 이론지시량 무게단위

                $("#OrderProcResultTab1 input[name=order_ea_qty]").val(data.order_ea_qty); // 이론지시량 수량단위
            } else {
                var ea_qty = gridData.order_qty2;
                if (gridData.process_type != "P2") {
                    ea_qty = ea_qty * (gridData.item_pack_size == null ? 1 : gridData.item_pack_size);
                }

                $("#OrderProcResultTab1 input[name=order_ea_qty]").val(gridData.order_qty2); // 이론지시량 수량단위
                //$("#OrderProcResultTab1 input[name=order_ea_qty]").val(ea_qty); // 이론지시량 수량단위

                $("#OrderProcResultTab1 input[name=order_qty]").val(data.order_qty); // 이론지시량 무게단위
            }

        } else {
            // 공정이 제제표준서 공정일 경우
            if (gridData.order_batch_size_unit == "KG" || gridData.order_batch_size_unit == "G" || gridData.order_batch_size_unit == "MG") {
                var qty = 0;
                switch (gridData.order_batch_size_unit) {
                    case "KG":
                        qty = (gridData.order_qty2 * 1000);

                        break;
                    case "G":
                        qty = gridData.order_qty2;

                        break;
                    case "MG":
                        qty = (gridData.order_qty2 / 1000);

                        break;
                }


                $("#OrderProcResultTab1 input[name=order_qty]").val(qty); // 이론지시량 무게단위

                $("#OrderProcResultTab1 input[name=order_ea_qty]").val(data.order_ea_qty); // 이론지시량 수량단위
            } else {
                $("#OrderProcResultTab1 input[name=order_ea_qty]").val(gridData.order_qty2); // 이론지시량 수량단위
                //$("#OrderProcResultTab1 input[name=order_ea_qty]").val(data.order_ea_qty); // 이론지시량 수량단위

                $("#OrderProcResultTab1 input[name=order_qty]").val(data.order_qty); // 이론지시량 무게단위
            }
        }

        $("#OrderProcResultTab1 input[name=order_proc_real_qty]").val(data.order_proc_real_qty); // 실 생산량 무게단위
        $("#OrderProcResultTab1 input[name=order_proc_real_ea_qty]").val(data.order_proc_real_ea_qty); // 실 생산량 수량단위


        $("#OrderProcResultTab1 input[name=order_proc_manage_rate_min]").val(gridData.order_proc_manage_rate_min);
        $("#OrderProcResultTab1 input[name=order_proc_manage_rate_max]").val(gridData.order_proc_manage_rate_max);

        $("#OrderProcResultTab1 input[name=test_sample_qty]").val(data.test_sample_qty);
        //$("#OrderProcResultTab1 input[name=test_deposit_qty]").val(data.test_deposit_qty);
        $("#OrderProcResultTab1 input[name=receipt_qty]").val(data.receipt_qty);
        $("#OrderProcResultTab1 input[name=customer_sample_qty]").val(data.customer_sample_qty);

        if (data.rate_type) {
            $("#OrderProcResultTab1 input[name=rate_type][value=" + data.rate_type + "]").prop("checked", true);
        }
    }

    // 시험의뢰 탭 데이터 삽입
    function orderProcResultFillTab2() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var data = _orderProcResultDetail[1][0];

        $("#OrderProcResultTab2 form")[0].reset();

        $("#OrderProcResultTab2 input[name=start_date]").val(gridData.start_date);
        $("#OrderProcResultTab2 input[name=request_date]").val(data.request_date);
        $("#OrderProcResultTab2 input[name=result_hope_date]").val(data.result_hope_date);
        $("#OrderProcResultTab2 input[name=start_qty]").val(data.start_qty);
        $("#OrderProcResultTab2 input[name=testrequest_no]").val(data.testrequest_no);
        $("#OrderProcResultTab2 input[name=request_emp_cd]").val(data.request_emp_cd1);
        $("#OrderProcResultTab2 input[name=emp_nm]").val(data.emp_nm);
        $("#OrderProcResultTab2 input[name=item_form_cd]").val(data.item_form_cd);
    }

    // 작업자실적 탭 데이터 삽입
    function orderProcResultFillTab3() {

        if (_orderProcResultDetail[2].data === "empty") {

            $("#OrderProcResultWorkerGrid").dxDataGrid("instance").option("dataSource", []);

        } else {
            $("#OrderProcResultWorkerGrid").dxDataGrid("instance").option("dataSource", _orderProcResultDetail[2]);
        }
    }

    // 설비실적 탭 데이터 삽입
    function orderProcResultFillTab4() {

        if (_orderProcResultDetail[3].data === "empty") {

            $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").option("dataSource", []);

        } else {
            $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").option("dataSource", _orderProcResultDetail[3]);
        }
    }

    // 자재실적 탭 데이터 삽입
    function orderProcResultFillTab5() {

        //if (!_isSecondPacking) {
        //    $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("dataSource", []);
        //    return;
        //}

        if (_orderProcResultDetail[4].data === "empty") {
            $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("dataSource", []);
        } else {
            $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("dataSource", _orderProcResultDetail[4]);
            $("#OrderProcResultTab5 input[name=packing_result]").val();
        }

        if (_isReceiveField_Use) {
            $("#OrderProcResultMaterialGrid").dxDataGrid("instance").columnOption("Add_Pack", "allowEditing", true);
            $("#OrderProcResultMaterialGrid").dxDataGrid("instance").columnOption("Return_Pack", "allowEditing", true);
        }
        else {
            $("#OrderProcResultMaterialGrid").dxDataGrid("instance").columnOption("Add_Pack", "allowEditing", false);
            $("#OrderProcResultMaterialGrid").dxDataGrid("instance").columnOption("Return_Pack", "allowEditing", false);
        }
    }

    // 포장실적 탭 데이터 삽입
    function orderProcResultFillTab6() {
        //if (!_isSecondPacking) {
        //    $("#OrderProcResultPackingGrid").dxDataGrid("instance").option("dataSource", []);
        //    return;
        //}

        $("#OrderProcResultTab6 form")[0].reset();
        if (_orderProcResultDetail[5].data === "empty" || !_isSecondPacking) {

            $("#OrderProcResultPackingGrid").dxDataGrid("instance").option("dataSource", []);

            $("#OrderProcResultTab6 input[name=packing_date]").val("");
            $("#OrderProcResultTab6 input[name=lot_date]").val("");
            $("#OrderProcResultTab6 input[name=receive_qty]").val("");
            $("#OrderProcResultTab6 input[name=end_date]").val("");
            $("#OrderProcResultTab6 input[name=bulk_use_qty]").val("");
            $("#OrderProcResultTab6 input[name=remain_qty]").val("");
            $("#OrderProcResultTab6 input[name=packing_qty]").val("");
            $("#OrderProcResultTab6 input[name=test_sample_qty]").val("");
            //$("#OrderProcResultTab6 input[name=test_deposit_qty]").val("");
            $("#OrderProcResultTab6 input[name=receipt_qty]").val("");
            $("#OrderProcResultTab6 input[name=customer_sample_qty]").val("");
            $("#OrderProcResultTab6 input[name=result_emp_cd]").val("");
            $("#OrderProcResultTab6 input[name=result_emp_nm]").val("");

        } else {
            $("#OrderProcResultPackingGrid").dxDataGrid("instance").option("dataSource", _orderProcResultDetail[5]);

            var data = _orderProcResultDetail[5][0];

            $("#OrderProcResultTab6 input[name=packing_date]").val(data.packing_date);
            $("#OrderProcResultTab6 input[name=lot_date]").val(data.lot_date);
            $("#OrderProcResultTab6 input[name=receive_qty]").val(data.receive_qty);
            $("#OrderProcResultTab6 input[name=end_date]").val(data.end_date);
            $("#OrderProcResultTab6 input[name=bulk_use_qty]").val(data.bulk_use_qty);
            $("#OrderProcResultTab6 input[name=remain_qty]").val(data.remain_qty);
            $("#OrderProcResultTab6 input[name=packing_qty]").val(data.packing_qty);
            $("#OrderProcResultTab6 input[name=test_sample_qty]").val(data.test_sample_qty);
            $("#OrderProcResultTab6 input[name=receipt_qty]").val(data.receipt_qty);
            $("#OrderProcResultTab6 input[name=customer_sample_qty]").val(data.customer_sample_qty);
            $("#OrderProcResultTab6 input[name=result_emp_cd]").val(data.result_emp_cd);
            $("#OrderProcResultTab6 input[name=result_emp_nm]").val(data.result_emp_nm);
        }
    }

    // 조회
    function OrderProcResultSearch() {

        //var formData = new FormData($("#OrderProcResultSearchForm")[0]);
        var formData = $("#OrderProcResultSearchForm").serialize();

        //var grid = $("#OrderProcResultProcNameGrid").dxDataGrid("instance");
        //var gridData = getGridRowByKey("OrderProcResultProcNameGrid", grid.option("focusedRowKey"));

        //formData += ("&process_cd=" + gridData.process_cd);

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/SelectOrderProcResult',
            data: formData,
            dataType: 'json',
            success: function (result) {

                if (result.length <= 0) {
                    $("#OrderProcResultGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#OrderProcResultGrid").dxDataGrid("instance").option("focusedRowKey", "");

                    _orderProcResultDetail = new Array();

                    return;
                }

                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                $("#OrderProcResultProcNameGrid").dxDataGrid("option", "dataSource", JSON.parse(result));
                $("#OrderProcResultProcNameGrid").dxDataGrid("instance").option("focusedRowEnabled", true);
                $("#OrderProcResultProcNameGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
                //$("#OrderProcResultGrid").dxDataGrid("instance").option("dataSource", JSON.parse(result));
                OrderProcResultProcessSelect();
            }
        })
    }

    // 입력
    function OrderProcResultInput() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var data = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        if (data.length < 1) return;

        var lockData = orderProcResultCheckLock();
        var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

        if (lockData[0] === "N") {
            alert("전 공정시험의뢰를 진행하지 않았습니다!");
            return;
        }

        if (lockData[1] === "N") {
            var isOK = confirm("전 Lot의 시험의뢰를 진행하지 않았습니다!" + "\n" + "\n" + "작업을 진행하시겠습니까?");

            if (!isOK) {
                return;
            }

        }

        if (lockData[2] === "N") {
            alert("반제품 입/출고를 진행하지 않았습니다!");
            return;
        }

        if (tabIndex === 1
            && (!_orderProcResultDetail[0][0].order_proc_real_qty)
            && (!_orderProcResultDetail[0][0].order_proc_real_ea_qty)) {
            alert("생산실적을 입력하지 않으면 시험의뢰를 할 수 없습니다!");
            return;
        }

        if (tabIndex === 1
            && (data.order_proc_qc_ck !== "Y")) {
            alert("시험의뢰를 하지 않은 공정입니다!");
            return;
        }

        if (( tabIndex === 2 || tabIndex === 3 )
            && (!_orderProcResultDetail[0][0].receive_date)
            && (!_orderProcResultDetail[0][0].receive_time)) {
            alert("시작시간을 입력하지 않으면 실적을 입력 할 수 없습니다!");
            return;
        }

        if (data.seq === "1" && data.mp_ck ==="M") {

            if (data.weighing_yn2 !== "Y") {
                alert("칭량완료 되지 않은 제품은 공정시작을 할 수 없습니다! 확인해 주세요!");
                return;
            }
            if (data.weighing_yn !== "Y") {
                alert("칭량 후 대기소에서 인수인계를 하지 않은 제품은 공정시작을 할 수 없습니다! 확인해 주세요!");
                return;
            }
        }

        if (tabIndex === 1) {
            //마지막 포장지시에 실적이 등록되어 있는지 확인
            if (_isSecondPacking) //마지막 포장 공정일 경우
            {
                dt = mBllSpExecute.SpExecuteTable(strSP_Name, "PR_check", paramC);

                var prCheck;

                $.ajax({
                    type: 'GET',
                    url: '/ProductionManage/OrderProcResultPRCheck',
                    dataType: "json",
                    async: false,
                    data: {
                        m_order_no: data.m_order_no,
                        process_cd: data.process_cd
                    },
                    success: function (result) {

                        var json = JSON.parse(result);

                        if (json.hasOwnProperty('sessionLoss')) {
                            alert("세션이 만료되었습니다.");
                            sessionStorage.clear();
                            location.replace("/Comm/Login");
                        }

                        prCheck = json;

                    }

                })

                if (prCheck.length < 1) {
                    alert("실적등록이 되어있지 않습니다.\n실적등록 후 시험의뢰할 수 있습니다.");
                    return;
                }
                else {
                    if (prCheck[0].end_testcontrol_id !== "") {
                        alert("이미 시험의뢰 된 공정입니다.");
                        return;
                    }
                }
            }

            if (data.order_proc_transfer_ck === "Y" && !_orderProcResultDetail[0][0].order_enter_date
                && data.process_type !== "P1") {
                alert("인수인계하는 공정은 현장프로그램에서 입고 후 시험의뢰를 합니다!");
                return;
            }

        }

        else if (tabIndex === 2) {

            var editing = {
                allowAdding: true,
                allowUpdating: true,
                allowDeleting: true,
                mode: 'batch'
            }

            $("#OrderProcResultWorkerGrid").dxDataGrid("instance").option("editing", editing);
        }

        else if (tabIndex === 3) {

            var editing = {
                allowAdding: true,
                allowUpdating: true,
                allowDeleting: true,
                mode: 'batch'
            }

            $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").option("editing", editing);
        }

        $("#OrderProcResultSearch").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultDelet").dxButton().parent().parent().addClass("display-none");

        $("#OrderProcResultSave").dxButton().parent().parent().removeClass("display-none");
        $("#OrderProcResultUndo").dxButton().parent().parent().removeClass("display-none");

        orderProcResultIsEdited(true);

    }

    // 수정
    function OrderProcResultEdit() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var data = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        if (data.length < 1) return;

        var lockData = orderProcResultCheckLock();
        var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

        if (lockData[0] === "N") {
            alert("전 공정시험의뢰를 진행하지 않았습니다!");
            return;
        }

        if (lockData[1] === "N") {
            var isOK = confirm("전 Lot의 시험의뢰를 진행하지 않았습니다!" + "\n" + "\n" + "작업을 진행하시겠습니까?");

            if (!isOK) {
                return;
            }

        }

        if (lockData[2] === "N") {
            alert("반제품 입/출고를 진행하지 않았습니다!");
            return;
        }

        if (lockData[3] == "N" && tabIndex != 5) {
            alert("팔레트 포장 실적을 완료하지 않았습니다!");
            return;
        }

        if (data.seq === "1" && data.mp_ck === "M") {

            if (data.weighing_yn2 !== "Y") {
                alert("칭량완료 되지 않은 제품은 공정시작을 할 수 없습니다! 확인해 주세요!");
                return;
            }
            if (data.weighing_yn !== "Y") {
                alert("칭량 후 대기소에서 인수인계를 하지 않은 제품은 공정시작을 할 수 없습니다! 확인해 주세요!");
                return;
            }
        }

        $("#OrderProcResultSearch").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultInput").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultEdit").dxButton().parent().parent().addClass("display-none");
        $("#OrderProcResultDelet").dxButton().parent().parent().addClass("display-none");

        $("#OrderProcResultSave").dxButton().parent().parent().removeClass("display-none");
        $("#OrderProcResultUndo").dxButton().parent().parent().removeClass("display-none");

        orderProcResultIsEdited(true);

        //  생산 실적
        if (tabIndex === 0) {

            if (data.order_proc_transfer_ck === "Y" && !_orderProcResultDetail[0][0].order_enter_date
                && data.process_type !== "P1") {
                alert("인수인계하는 공정은 현장프로그램에서 입고 후 수정 할 수 있습니다!");
                return;
            }

            var isSecondPacking = OrderProcResultSecondPackingCheck();

            if (isSecondPacking) {  //2차포장일 때

                var product_qty = _orderProcResultDetail[1].product_qty;
                if (parseInt(product_qty) <= 0) {
                    alert("팔레트 포장 실적 등록 화면에서 생산량을 먼저 입력해주세요");
                    return;
                }
            }

            if (data.process_type === "P1") {

                $("#OrderProcResultTabPanel input[name=order_ea_qty]").val(data.item_pack_size * data.order_qty2);

                if (isSecondPacking)  //2차포장일 때
                {
                    $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").prop("readonly", true);
                    if (parseInt(data.item_pack_size) == 0) {

                        //_orderProcResultDetail[1] //????

                        var qty1 = _orderProcResultDetail[1].test_sample_qty;
                        //var qty1 = _orderProcResultDetail[1].test_deposit_qty;
                        var qty2 = _orderProcResultDetail[1].customer_sample_qty;
                        var qty3 = _orderProcResultDetail[1].product_qty;

                        console.log("order_proc_real_ea_qty:"+parseInt(qty1) + parseInt(qty2) + parseInt(qty3));

                        $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val(parseInt(qty1) + parseInt(qty2) + parseInt(qty3));
                    }
                }
                else {
                    $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").prop("readonly", false);
                }

                $("#OrderProcResultTabPanel input[name=order_qty]").prop("readonly", true);
                $("#OrderProcResultTabPanel input[name=order_proc_real_qty]").prop("readonly", true);
            }
            else {
                $("#OrderProcResultTabPanel input[name=order_ea_qty]").val(data.work_order_qty);
                $("#OrderProcResultTabPanel input[name=order_qty]").prop("readonly", false);
                $("#OrderProcResultTabPanel input[name=order_proc_real_qty]").prop("readonly", false);
            }

        } else if (tabIndex === 4) // 자재 실적
        {
            var status_check = true;
            if (_isReceiveField_Use) {
                var materialStatus = "";
                
                // 자재 불출 상태가 정리상태가 아니면(전체 불출이 아니면) 입력 못하도록 lock
                $.ajax({
                    type: 'GET',
                    url: '/ProductionManage/OrderProcResultGetMaterialStatus',
                    async: false,
                    data: {
                        order_no: data.m_order_no,
                        order_proc_id: data.order_proc_id
                    },
                    success: function (result) {
                
                        var json = JSON.parse(result);
                
                        if (json.hasOwnProperty('sessionLoss')) {
                            alert("세션이 만료되었습니다.");
                            sessionStorage.clear();
                            location.replace("/Comm/Login");
                        }
                
                        materialStatus = json.message;
                    }
                })
                if (materialStatus !== "5") {
                    alert("해당 지시에 대해 자재가 모두 불출되지 않았습니다.\n관리자에게 문의해주세요.");
                    status_check = false;
                }
            }

            if (status_check) {
                var editing = {
                    allowUpdating: true,
                    mode: 'batch'
                }

                $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("editing", editing);
            }
            else
                orderProcResultIsEdited(false);

        } else if (tabIndex === 5) // 포장 실적
        {

            if (_orderProcResultDetail[5].data !== 'empty')
            {

                if (_orderProcResultDetail[5][0].packing_qty === 0)
                {
                    alert("생산실적을 먼저 입력해주세요.");
                    return;
                }

                //실적등록 후 시험의뢰가 되었으면 수정 안되게
                if (lockData[3] !== "N")
                {
                    alert("팔레트 포장 실적을 완료하여 수정 할 수 없습니다..");
                    return;
                }
            }
            else
            {
                alert("팔레트 포장 실적 등록 화면에서 먼저 등록해주세요.");
                return;
            }
        }
        else if (tabIndex === 2) {

            var editing = {
                allowUpdating: true,
                allowUpdating: true,
                allowDeleting: true,
                mode: 'batch'
            }

            $("#OrderProcResultWorkerGrid").dxDataGrid("instance").option("editing", editing);
        }
        else if (tabIndex === 3) {

            var editing = {
                allowUpdating: true,
                allowUpdating: true,
                allowDeleting: true,
                mode: 'batch'
            }

            $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").option("editing", editing);
        }


    }

    // 삭제
    function OrderProcResultDelete() {

        var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

        // 시험의뢰
        if (tabIndex === 1) {

            var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
            var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

            //LIMS 시험의뢰에서 상태가 어떻게 되어 있는지 확인하고, 진행단계를 취소하여 상태가 대기('---')일 경우에는 의뢰취소가 가능하도록 한다.
            //입고 프로그램에서는 적합일 경우 입고검수상태로 변경하고, 재고를 0으로 업데이트해야 한다.
            //동아제약에서는 의뢰취소의 경우가 발생하므로 조건을 주석처리함.
            ////시험의뢰상태(QC007)가 대기('---')일때만 취소 가능, 시험접수 시 입고취소를 하더라도 시험의뢰 프로그램에서 삭제하여 의뢰취소는 가능하나
            ////원자재 입고 프로그램에서는 시험의뢰상태일지라도 의뢰취소가 되어서는 안된다.
            //if (le_receipt_status.EditValue.ToString() == "1")  //'1' => 시험의뢰, '2' => 부적합, '3' => 반품, '4' => 적합, '5' => Pass, '6' => 입고검수, '7' => 재시험의뢰, '8' => 입고취소, '9' => 적합(조건부)
            if ($("#OrderProcResultTab2 input[name=request_emp_cd]").val() !== "") {
                if (confirm("시험부서에 통보하셨습니까?" + "\n" + "시험의뢰를 취소하시겠습니까?")) {
                    //포장의 마지막 공정 여부 판단

                    var param;
                    _selectSign = "";

                    if (_isSecondPacking) // 마지막 포장 공정일 경우
                    {
                        param = {
                            item_cd: gridData.sale_item_cd,
                            m_order_no: gridData.m_order_no,
                            gubun: "SelectSign_P"
                        };

                    }
                    else {
                        param = {
                            item_cd: gridData.item_cd,
                            m_order_no: gridData.order_no,
                            process_cd: gridData.code,
                            gubun: "SelectSign"
                        };

                    }

                    $.ajax({
                        type: 'GET',
                        url: '/ProductionManage/OrderProcResultSelectSign',
                        async: false,
                        data: param,
                        success: function (result) {

                            var json = JSON.parse(result);

                            if (json.hasOwnProperty('sessionLoss')) {
                                alert("세션이 만료되었습니다.");
                                sessionStorage.clear();
                                location.replace("/Comm/Login");
                            }

                            _selectSign = json.selectSign;

                        }

                    })

                    _CRUDState = "D";

                    var popup = $("#OrderProcResultSignPopup").dxPopup("instance");
                    popup.option("contentTemplate", $("#OrderProcResultSignPopupTemplate"));
                    popup.show();

                    //서명이 되지 않은 자료는 삭제할 수 있다.
                    if (_selectSign) {
                        //전자서명으로 서명자를 확인한다.
                        _CRUDState = "D";
                        var popup = $("#OrderProcResultSignPopup").dxPopup("instance");
                        popup.option("contentTemplate", $("#OrderProcResultSignPopupTemplate"));
                        popup.show();

                    }

                }
            }
            else {
                alert("시험의뢰를 취소할 수 없습니다.!!!");
                return;
            }
        }
        // 작업자, 설비 실적
        else if (tabIndex === 2 || tabIndex === 3) {

            if (!confirm((tabIndex === 2 ? "작업자" : "설비") + "실적을 삭제하시겠습니까?")) {
                return;
            }

            var grid;
            var data;

            if (tabIndex === 2) {
                grid = $("#OrderProcResultWorkerGrid").dxDataGrid("instance");

                if (grid.option("focusedRowKey")) {
                    data = getGridRowByKey("OrderProcResultWorkerGrid", grid.option("focusedRowKey"));
                } else {
                    data = grid.option("dataSource")[0];
                }
            }
            else if (tabIndex === 3) {
                grid = $("#OrderProcResultEquipmentGrid").dxDataGrid("instance");

                if (grid.option("focusedRowKey")) {
                    data = getGridRowByKey("OrderProcResultEquipmentGrid", grid.option("focusedRowKey"));
                } else {
                    data = grid.option("dataSource")[0];
                }
            }

            data.gubun = "D";
            data.ew_flag = "W";

            tmpArr = new Array();
            tmpArr.push(data);

            OrderProcResultSaveWorker(tmpArr);
        }
        // 자재 실적
        else if (tabIndex === 4) {

            //반납작업자 서명이 없으면 자재실적이 입력되지 않은 것
            var return_issue_emp_cd = _orderProcResultDetail[4][0].return_issue_emp_cd;

            if (!return_issue_emp_cd) {
                alert("자재실적이 입력되지 않았습니다.");
                return;
            }

            //자재불출지시가 완료면 삭제 못함.
            var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
            var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));
            var materialStatus = "";

            $.ajax({
                type: 'GET',
                url: '/ProductionManage/OrderProcResultGetMaterialStatus',
                async: false,
                data: {
                    order_no: gridData.m_order_no,
                },
                success: function (result) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    materialStatus = json.message;

                }

            })

            if (materialStatus.length > 0) {

                if (materialStatus === "6") { // 완료상태면
                    alert("자재 불출 지시가 모두 완료되었습니다.\n관리자에게 문의해주세요.");
                    return;
                }
            }

            var return_check = true;

            //반납확인자 서명이 들어가면 자재실적 취소 못함.
            if (return_issue_emp_cd) {
                for (var i = 0; i < _orderProcResultDetail[4].length; i++)
                {
                    if (_orderProcResultDetail[4][i].Return_Pack != 0) {
                        if (_orderProcResultDetail[4][i].return_receive_emp_cd) {
                            return_check = false;
                        }
                    }
                }
            }

            if (return_check)
            {
                if (confirm("자재파트에 통보하셨습니까?" + "\n" + "자재실적 입력을 취소하시겠습니까?"))
                {
                    _CRUDState = "D";

                    var popup = $("#OrderProcResultSignPopup").dxPopup("instance");
                    popup.option("contentTemplate", $("#OrderProcResultSignPopupTemplate"));
                    popup.show();
                }
            }
            else
            {
                alert("이미 반납이 완료되어 취소할 수 없습니다.");
                return;
            }

        }
        // 포장 실적
        else if (tabIndex === 5) {

            var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
            var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

            var param1 = {
                m_order_no: gridData.m_order_no
            };

            var prCheck;

            $.ajax({
                type: 'GET',
                url: '/ProductionManage/OrderProcResultPRCheck',
                dataType: "json",
                async: false,
                data: param1,
                success: function (result) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    prCheck = json;
                }
            })

            if (prCheck.length > 0) {

                if (prCheck[0].end_testcontrol_id !== "") {
                    alert("시험의뢰가 되어 삭제할 수 없습니다.");
                    return;
                }
            }

            //인수인계 여부 체크
            var data = $("#OrderProcResultPackingGrid").dxDataGrid("instance").option("dataSource");
            var param2 = {
                packing_result_id: data[0].packing_result_id
            };
            var checkResult;

            $.ajax({
                type: 'GET',
                url: '/ProductionManage/OrderProcResultDeleteCheck',
                dataType: "json",
                async: false,
                data: param2,
                success: function (result) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    checkResult = json;
                }
            })

            if (checkResult.length > 0) {

                if (checkResult[0].RECEIPT_STATUS === "Y") {
                    alert("인수인계가 완료되어 삭제할 수 없습니다.");
                    return;
                }

            }

            if (confirm("삭제하시겠습니까?"))
            {
                orderProcResultDeleteExcute();

            }

        }

    }



    function OrderProcResultProcessSelect() {

        //var formData = new FormData($("#OrderProcResultSearchForm")[0]);
        var formData = $("#OrderProcResultSearchForm").serialize();

        var grid = $("#OrderProcResultProcNameGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultProcNameGrid", grid.option("focusedRowKey"));

        formData += ("&process_cd=" + gridData.process_cd);

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultProcessSelect',
            data: formData,
            dataType: 'json',
            success: function (result) {

                if (result.length <= 0) {
                    $("#OrderProcResultGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#OrderProcResultGrid").dxDataGrid("instance").option("focusedRowKey", "");

                    _orderProcResultDetail = new Array();

                    return;
                }

                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                $("#OrderProcResultGrid").dxDataGrid("instance").option("dataSource", JSON.parse(result));
                OrderProcResultSelectOderProc();
            }
        })

        _isReceiveField_Use = OrderProcResultReceiveFieldUseCheck();
    }


    // 사용량 자동계산
    function OrderProcResultCalcUsage() {

        if (!_orderProcResultIsEditing) {
            alert("수정중일때만 사용량 계산 가능.");
            return;
        }

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        if ($("#OrderProcResultTab5 input[name=packing_result]").val() <= 0) {
            return;
        }

        var data = {
            m_order_no: gridData.m_order_no,
            packing_result: $("#OrderProcResultTab5 input[name=packing_result]").val(),
            process_cd: gridData.process_cd
        };

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultCalcPackingUsage',
            dataType: "json",
            async: false,
            data: data,
            success: function (result) {

                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                var dataGrid = $("#OrderProcResultMaterialGrid").dxDataGrid("instance");

                for (var i = 0; i < json.length; i++) {
                    dataGrid.cellValue(i, "material_use_qty", json[i].item_bom_batch_qty);

                }
            }
        })

    }

    // 삭제 실행
    function orderProcResultDeleteExcute() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

        switch (tabIndex){

            // 시험의뢰
            case 1: {

                //최종 서명자 인증후 수정, 삭제할 수 있다.
                if (_orderProcResultSignValid && _selectSign === '@Public_Function.User_cd' ) {

                    var param = {
                        order_no1: gridData.order_no,
                        order_proc_id1: gridData.order_proc_id,
                        testrequest_no: $("#OrderProcResultTab2 input[name=testrequest_no]").val()
                    };

                    if (_isSecondPacking) // 마지막 포장 공정일 경우
                    {
                        param.gubun = "DE_P";
                    }
                    else {

                        param.gubun = "DE";
                    }

                    var cnt = 0;

                    $.ajax({
                        type: 'POST',
                        url: '/ProductionManage/OrderProcResultDelete',
                        async: false,
                        data: param,
                        success: function (result) {

                            var json = JSON.parse(result);

                            if (json.hasOwnProperty('sessionLoss')) {
                                alert("세션이 만료되었습니다.");
                                sessionStorage.clear();
                                location.replace("/Comm/Login");
                            }

                            cnt = parseInt(json.cnt);

                            if (cnt > 0) {
                                alert("시험의뢰가 취소되었습니다.");

                                $("#OrderProcResultTab2 form")[0].reset();
                                OrderProcResultSearch();
                            }
                            else {
                                alert("시험의뢰를 취소할 수 없습니다.\r" +
                                    "이미 품질관리팀에 시험이 의뢰되었거나 진행중입니다.\r" +
                                    "시험의뢰를 취소하시려면 시험진행 취소 후 의뢰를 취소할 수 있습니다.");
                                return;
                            }

                        }

                    })

                }
                else if (_orderProcResultSignValid == true && (_selectSign != _selectSign))
                    alert("최종 서명자와 동일하지 않습니다.");

                break;
            }

            // 자재실적
            case 4: {
                var return_issue_emp_cd = _orderProcResultDetail[4][0].return_issue_emp_cd;

                //최종 서명자 인증후 수정, 삭제할 수 있다.
                if (_orderProcResultSignValid && (return_issue_emp_cd == "Forced Release" || return_issue_emp_cd === '@Public_Function.User_cd')) {

                    var param = {
                        m_order_no: gridData.m_order_no,
                        gubun: "MR_delete"
                    };

                    $.ajax({
                        type: 'POST',
                        url: '/ProductionManage/OrderProcResultDelete',
                        async: false,
                        data: param,
                        success: function (result) {

                            var json = JSON.parse(result);

                            if (json.hasOwnProperty('sessionLoss')) {
                                alert("세션이 만료되었습니다.");
                                sessionStorage.clear();
                                location.replace("/Comm/Login");
                            }

                            OrderProcResultSearch();
                            OrderProcResultSelectOderProc();
                        }

                    })

                } else if (_orderProcResultSignValid && (return_issue_emp_cd != "Forced Release" && return_issue_emp_cd !== '@Public_Function.User_cd')) {
                    alert("최종 서명자와 동일하지 않습니다.");
                }

                break;
            }

            // 포장실적
            case 5: {

                var data = $("#OrderProcResultPackingGrid").dxDataGrid("instance").option("dataSource");
                var param = {
                    packing_result_id: data[0].packing_result_id,
                    gubun: "PR2D"
                };

                $.ajax({
                    type: 'POST',
                    url: '/ProductionManage/OrderProcResultDelete',
                    async: false,
                    data: param,
                    success: function (result) {

                        var json = JSON.parse(result);

                        if (json.hasOwnProperty('sessionLoss')) {
                            alert("세션이 만료되었습니다.");
                            sessionStorage.clear();
                            location.replace("/Comm/Login");
                        }

                        alert("정상적으로 삭제 되었습니다!!");

                        OrderProcResultSearch();
                    }

                })

                break;
            }

        }

    }

    // 저장
    async function OrderProcResultSave() {

        var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

        // 작업자, 설비 실적 저장
        if (tabIndex === 2 || tabIndex == 3) {

            var param;
            var codeCaption = "";
            var codehelptype;
            var grid;
            var tmpData;

            // 사원코드 OR 설비코드 유효성 체크
            if (tabIndex === 2) {
                var check = await OrderProcResult_Validate_Check(tabIndex);

                if (check == 1) {

                    return;
                } else if (check == 2) {
                    alert("작업시작 일시가 생산시작 일시보다 빠릅니다.");

                    return;
                } else if (check == 3) {
                    alert("작업종료 일시가 생산종료 일시보다 늦습니다.");

                    return;
                } else if (check == 4) {
                    alert("작업자를 입력해주세요.");

                    return;
                }

                grid = $("#OrderProcResultWorkerGrid").dxDataGrid("instance");
                codehelptype = "work_employee";
                codeCaption = "작업코드";

                await $("#OrderProcResultWorkerGrid").dxDataGrid("instance").saveEditData();

            } else if (tabIndex === 3) {
                var check = await OrderProcResult_Validate_Check(tabIndex);

                if (check == 1) {

                    return;
                } else if (check == 2) {
                    alert("작업시작 일시가 생산시작 일시보다 빠릅니다.");

                    return;
                } else if (check == 3) {
                    alert("작업종료 일시가 생산종료 일시보다 늦습니다.");

                    return;
                } else if (check == 4) {
                    alert("설비를 입력해주세요.");

                    return;
                }

                grid = $("#OrderProcResultEquipmentGrid").dxDataGrid("instance");
                codehelptype = "equipment_type3";
                codeCaption = "설비코드";

                await $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").saveEditData();
            }

            var gridData = grid.getVisibleRows();
            var isValid = false;

            for (var j = 0; j < gridData.length; j++) {

                if (tabIndex === 2) {
                    tmpData = gridData[j].data.ew_cd;
                } else if (tabIndex === 3) {
                    tmpData = gridData[j].data.ew_cd;
                }

                $.ajax({
                    type: 'GET',
                    url: '/ProductionManage/OrderProcResultCodeHelpCk',
                    async: false,
                    data: {
                        codeCaption: codeCaption,
                        tmpData: tmpData,
                        codehelptype: codehelptype
                    },
                    dataType: 'json',
                    success: function (result) {

                        if (result.length <= 0) {

                            return;
                        }

                        var json = JSON.parse(result);

                        if (json.hasOwnProperty('sessionLoss')) {
                            alert("세션이 만료되었습니다.");
                            sessionStorage.clear();
                            location.replace("/Comm/Login");
                        }

                        isValid = json.check;
                    }
                })

                if (!isValid) {
                    var target = "";

                    if (tabIndex === 2) {
                        target = "작업자사번이";
                    } else if (tabIndex === 3) {
                        target = "설비코드가";
                    }

                    alert(target + " 잘못되었습니다.");
                    return;
                }

            }

            if (tabIndex === 2) {
                OrderProcResultSaveWorker(_orderProcResulWorkerChenges);
            } else if (tabIndex === 3) {
                OrderProcResultSaveWorker(_orderProcResulEquipChenges);
            }

            orderProcResultIsEdited(false);
            OrderProcResultSearch();

        }

        // 생산실적
        else if (tabIndex === 0) {

            if (!$("#OrderProcResultTab1 input[name=receive_date]").val() || !$("#OrderProcResultTab1 input[name=order_enter_date]").val()) {
                alert("생산일자를 입력해야 합니다!");
                return;
            }


            var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
            var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

            var formData = new FormData($("#OrderProcResultTab1Form")[0]);
            formData.set("order_no", gridData.order_no);
            formData.set("order_proc_id", gridData.order_proc_id);
            formData.set("m_order_no", gridData.m_order_no);
            formData.set("gubun", "IU");

            if (confirm("현재 입력한 생산일자로 작업자실적 일자로 변경하시겠습니까?")) {
                formData.set("update_check", true);
            } else {
                formData.set("update_check", false);
            }

            $.ajax({
                type: 'POST',
                url: '/ProductionManage/OrderProcResultInsert1',
                data: formData,
                contentType: false,
                processData: false,
                async: false,
                success: function (result) {

                    if (result.length <= 0) {

                        return;
                    }

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    alert(json.message);

                }
            })

            if (_orderProcResultDetail[2].length > 0 || _orderProcResultDetail[3].length) {
                var param;
                var codeCaption = "";
                var codehelptype;
                var data;

                // 사원코드 OR 설비코드 유효성 체크
                for (var i = 0; i <= 2; i++) {

                    if (i === 0) {
                        data = _orderProcResultDetail[2];
                        codehelptype = "work_employee";
                        codeCaption = "작업코드";

                    } else {
                        data = _orderProcResultDetail[3];
                        codehelptype = "equipment_type3";
                        codeCaption = "설비코드";
                    }

                    for (var j = 0; j < data.length; j++) {

                        var tmpData = data[j].ew_cd;

                        var isValid = false;

                        $.ajax({
                            type: 'GET',
                            url: '/ProductionManage/OrderProcResultCodeHelpCk',
                            async: false,
                            data: {
                                codeCaption: codeCaption,
                                tmpData: tmpData,
                                codehelptype: codehelptype
                            },
                            dataType: 'json',
                            success: function (result) {

                                if (result.length <= 0) {

                                    return;
                                }

                                var json = JSON.parse(result);

                                if (json.hasOwnProperty('sessionLoss')) {
                                    alert("세션이 만료되었습니다.");
                                    sessionStorage.clear();
                                    location.replace("/Comm/Login");
                                }

                                isValid = json.check;
                            }
                        })


                        if (!isValid) {
                            return;
                        }


                        var receive_date = $("#OrderProcResultTab1Form input[name=receive_date]").val();
                        var receive_time = $("#OrderProcResultTab1Form input[name=receive_time]").val();
                        var order_enter_date = $("#OrderProcResultTab1Form input[name=order_enter_date]").val();
                        var enter_time = $("#OrderProcResultTab1Form input[name=enter_time]").val();

                        var receive_time1 = new Date(data[j].order_proc_sdate.substring(0,10) + " " + data[j].order_proc_stime);
                        var s_time1 = new Date(receive_date + " " + receive_time);
                        var enter_time1 = new Date(data[j].order_proc_edate.substring(0, 10) + " " + data[j].order_proc_etime);
                        var e_time1 = new Date(order_enter_date + " " + enter_time);

                        var result3 = s_time1 > receive_time1;
                        var result4 = e_time1 < enter_time1;

                        OrderProcResultSaveProduction();

                        if (result3 || result4) {
                            alert("수정된 생산실적의 생산일자에 맞추어 \n작업자실적과 설비실적을 수정해주세요.");

                            orderProcResultIsEdited(false);

                            return;
                        } else {

                            orderProcResultIsEdited(false);
                            OrderProcResultSearch();                                                     
                        }
                    }
                }
            }


        }

        // 자재실적
        else if (tabIndex === 4) {
            var check = await OrderProcResult_Validate_Check(tabIndex);

            if (check != null && check != 0) {
                if (check == 1) {
                    return;
                } else {
                    alert(check);
                    return;
                }
            }

            await $("#OrderProcResultMaterialGrid").dxDataGrid("instance").saveEditData();

            $.ajax({
                type: 'POST',
                url: '/ProductionManage/OrderProcResultMaterialTRX',
                async: false,
                data: {
                    paramData: JSON.stringify(_orderProcResulMaterialChenges)
                },
                dataType: 'json',
                success: function (result) {

                    alert(result);

                }
            });
            OrderProcResultSearch();
            OrderProcResultSelectOderProc();
            orderProcResultIsEdited(false);

        }
        
        //if (tabIndex === 0) {

        //    var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        //    var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        //    var message = "";

        //    $.ajax({
        //        type: 'POST',
        //        url: '/ProductionManage/OrderProcResultSQ',
        //        async: false,
        //        data: {
        //            order_no: gridData.order_no,
        //            process_cd: gridData.process_cd
        //        },
        //        success: function (result) {

        //            if (result.length <= 0) {

        //                return;
        //            }

        //            var json = JSON.parse(result);

        //            if (json.hasOwnProperty('sessionLoss')) {
        //                alert("세션이 만료되었습니다.");
        //                sessionStorage.clear();
        //                location.replace("/Comm/Login");
        //            }

        //            message = json.message;
        //        }
        //    })

        //    if (message === "Y") {

        //        $.ajax({
        //            type: 'POST',
        //            url: '/ProductionManage/OrderProcResultSave',
        //            async: false,
        //            data: {
        //                order_no: gridData.order_no,
        //                gubun: "EU"
        //            },
        //            success: function (result) {

        //                if (result.length <= 0) {

        //                    return;
        //                }

        //                var json = JSON.parse(result);

        //                if (json.hasOwnProperty('sessionLoss')) {
        //                    alert("세션이 만료되었습니다.");
        //                    sessionStorage.clear();
        //                    location.replace("/Comm/Login");
        //                }

        //                message = json.message;
        //            }
        //        })
        //    }
        //    else {

        //        $.ajax({
        //            type: 'POST',
        //            url: '/ProductionManage/OrderProcResultSave',
        //            async: false,
        //            data: {
        //                order_no: gridData.order_no,
        //                gubun: "SU"
        //            },
        //            success: function (result) {

        //                if (result.length <= 0) {

        //                    return;
        //                }

        //                var json = JSON.parse(result);

        //                if (json.hasOwnProperty('sessionLoss')) {
        //                    alert("세션이 만료되었습니다.");
        //                    sessionStorage.clear();
        //                    location.replace("/Comm/Login");
        //                }

        //                message = json.message;
        //            }
        //        })
        //    }
        //}

        // 시험의뢰 저장
        if (tabIndex === 1) {
            if (_orderProcResultDetail[0][0].order_enter_date == null || _orderProcResultDetail[0][0].order_enter_date == "") {
                alert("생산실적이 먼저 등록되어야 합니다.");
                return;
            }
            if ($("#OrderProcResultTab2 input[name=request_date]").val() == null || $("#OrderProcResultTab2 input[name=request_date]").val() == "") {
                alert("의뢰일자가 입력되지 않았습니다.");
                return;
            }

            var enter_date = new Date(_orderProcResultDetail[0][0].order_enter_date);
            var request_date = new Date($("#OrderProcResultTab2 input[name=request_date]").val());

            if (request_date < enter_date) {
                alert("시험의뢰 일자는 생산종료 일자 이후여야 합니다.");
                return;
            }

            //작업자 인증
            _CRUDState = "S";
            var popup = $("#OrderProcResultSignPopup").dxPopup("instance");
            popup.option("contentTemplate", $("#OrderProcResultSignPopupTemplate"));
            popup.show();

        }

        // 자업자/설비 실적
        //if (tabIndex === 2 || tabIndex === 3) {
        //    OrderProcResultSaveWorker(_orderProcResulWorkerChenges);
        //}
    }

    // 작업자 실적, 설비실적, 자재 실적 유효성 체크
    function OrderProcResult_Validate_Check(tabIndex) {
        var gridData;
        if (tabIndex == 2) {
            gridData = $("#OrderProcResultWorkerGrid").dxDataGrid("instance").getVisibleRows();
        } else if (tabIndex == 3) {
            gridData = $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").getVisibleRows();
        } else {
            gridData = $("#OrderProcResultMaterialGrid").dxDataGrid("instance").getVisibleRows();
        }

        if (gridData.length == 0) {
            return 1;
        }

        var check = 0;
        for (var i in gridData) {
            console.log(gridData[i]);
            var data = gridData[i].data;

            if (tabIndex == 4) {
                if (_isReceiveField_Use) {
                    if (data.material_use_qty == null || data.material_use_qty == "" || data.material_use_qty == "0") {
                        check = "[ " + data.material_item_cd + " / " + data.material_item_nm + " ]\n자재 사용량이 입력되지 않았습니다.";
                        break;
                    }
                    else {
                        if (data.Add_Pack == null || data.Add_Pack == "") {
                            data.Add_Pack = 0;
                        }
                        if (data.Return_Pack == null || data.Return_Pack == "") {
                            data.Return_Pack = 0;
                        }
                        if (data.disuse_qty == null || data.disuse_qty == "") {
                            data.disuse_qty = 0;
                        }

                        var out_sum = data.use_qty + data.Add_Pack;
                        var use_sum = data.material_use_qty + data.Return_Pack + data.disuse_qty;

                        if (out_sum != use_sum) {
                            check = "[ " + data.material_item_cd + " / " + data.material_item_nm + " ]\n불출량과 사용량 합계가 다릅니다. 수정 후 다시 시도해주십시오.";
                            break;
                        }
                        if (data.Return_Pack < 0) {
                            check = "[ " + data.material_item_cd + " / " + data.material_item_nm + " ]\n반납량이 0보다 작습니다. 수정 후 다시 시도해주십시오.";
                            break;
                        }
                        if (data.disuse_qty < 0) {
                            check = "[ " + data.material_item_cd + " / " + data.material_item_nm + " ]\n폐기량이 0보다 작습니다. 수정 후 다시 시도해주십시오.";
                            break;
                        }
                    }
                }
                else {
                    if (data.material_use_qty == null || data.material_use_qty == "" || data.material_use_qty == "0") {
                        check = "[ " + data.material_item_cd + " / " + data.material_item_nm + " ]\n자재 사용량이 입력되지 않았습니다.";
                        break;
                    }
                }
            }
            else {
                if (Object.keys(data).length == 0) {
                    check = 2;
                    break;
                }

                if (!OrderProcResultDateChk2(data.order_proc_sdate, data.order_proc_stime, "s")) {
                    check = 2;
                    break;
                } else if (!OrderProcResultDateChk2(data.order_proc_edate, data.order_proc_etime, "e")) {
                    check = 3;
                    break;
                } else if (data.ew_cd == "" || typeof data.ew_cd == "undefined") {
                    check = 4;
                    break;
                }
            }
        }

        return check;

    }



    // 생산 실적 저장
    function OrderProcResultSaveProduction() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var message = "";

        $.ajax({
            type: 'POST',
            url: '/ProductionManage/OrderProcResultSQ',
            async: false,
            data: {
                order_no: gridData.order_no,
                process_cd: gridData.process_cd
            },
            success: function (result) {

                if (result.length <= 0) {

                    return;
                }

                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                message = json.message;
            }
        })

        if (message === "Y") {

            $.ajax({
                type: 'POST',
                url: '/ProductionManage/OrderProcResultSave',
                async: false,
                data: {
                    order_no: gridData.order_no,
                    gubun: "EU"
                },
                success: function (result) {

                    if (result.length <= 0) {

                        return;
                    }

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    message = json.message;
                }
            })
        }
        else {

            $.ajax({
                type: 'POST',
                url: '/ProductionManage/OrderProcResultSave',
                async: false,
                data: {
                    order_no: gridData.order_no,
                    gubun: "SU"
                },
                success: function (result) {

                    if (result.length <= 0) {

                        return;
                    }

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    message = json.message;
                }
            })
        }
    } 

    // 자업자/설비 실적 변경사항 저장
    function OrderProcResultSaveWorker(data) {

        $.ajax({
            type: 'POST',
            url: '/ProductionManage/OrderProcResultWorkerTRX',
            async: false,
            data: {
                paramData: JSON.stringify(data)
            },
            dataType: 'json',
            success: function (result) {

                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                isValid = json.check;

                var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

                if (tabIndex === 2) {

                    _orderProcResulWorkerChenges = new Array();

                    var editing = {
                        allowAdding: false,
                        allowUpdating: false,
                        allowDeleting: false
                    }

                    $("#OrderProcResultWorkerGrid").dxDataGrid("instance").option("editing", editing);
                }
                else if (tabIndex === 3) {

                    _orderProcResulEquipChenges = new Array();

                    var editing = {
                        allowAdding: false,
                        allowUpdating: false,
                        allowDeleting: false
                    }

                    $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").option("editing", editing);
                }

                OrderProcResultSearch();
                orderProcResultIsEdited(false);
            }
        })

    }

    // 저장 실행
    function orderProcResultSaveExcute() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        //인증모드
        //if (Pop_Function.validation_type == true)
        //    order_proc_entering_type = "1";
        //else
        //    order_proc_entering_type = "2";

        var message = "-1";

        var qc_ck = gridData.order_proc_qc_ck;
        var transfer_ck = gridData.order_proc_transfer_ck;

         //시험여부가 'Y'이면 시험의뢰정보 저장
        if (qc_ck === "Y") {

            confirmTestNo(true);

            //showTestNumberCreate("1", "L", "", $("#OrderProcResultTab2 input[name=request_date]").val());
        }
    }

    // 시험번호 생성
    function showTestNumberCreate(test_type, item_type, dept_type, qcquest_date) {

        var popup = $("#OrderProcResultTestPopup").dxPopup("instance");
        popup.option("contentTemplate", $("#OrderProcResultTestPopupTemplate"));
        popup.show();

        $("#OrderProcResultTestForm .datepicker").datepicker({
            format: "yyyy-mm-dd",	//데이터 포맷 형식(yyyy : 년 mm : 월 dd : 일 )
            startDate: '-10y',	//달력에서 선택 할 수 있는 가장 빠른 날짜. 이전으로는 선택 불가능 ( d : 일 m : 달 y : 년 w : 주)
            endDate: '+10y',	//달력에서 선택 할 수 있는 가장 느린 날짜. 이후로 선택 불가 ( d : 일 m : 달 y : 년 w : 주)
            autoclose: true,	//사용자가 날짜를 클릭하면 자동 캘린더가 닫히는 옵션
            templates: {
                leftArrow: '&laquo;',
                rightArrow: '&raquo;'
            }, //다음달 이전달로 넘어가는 화살표 모양 커스텀 마이징
            showWeekDays: true,// 위에 요일 보여주는 옵션 기본값 : true
            todayHighlight: true,	//오늘 날짜에 하이라이팅 기능 기본값 :false
            toggleActive: false,	//이미 선택된 날짜 선택하면 기본값 : false인경우 그대로 유지 true인 경우 날짜 삭제
            weekStart: 0,//달력 시작 요일 선택하는 것 기본값은 0인 일요일
            language: "ko"	//달력의 언어 선택, 그에 맞는 js로 교체해줘야한다.
        });

        if (test_type === null || test_type === "") {
            $("#OrderProcResultTestForm select[name=test_type] option:eq(0)").prop("selected", true);
        } else {
            $("#OrderProcResultTestForm select[name=test_type]").val(test_type);
        }

        if (item_type === null || item_type === "") {
            $("#OrderProcResultTestForm select[name=item_type] option:eq(0)").prop("selected", true);
        } else {
            $("#OrderProcResultTestForm select[name=item_type]").val(item_type);
        }

        if (dept_type === null || dept_type === "") {
            $("#OrderProcResultTestForm select[name=dept_type] option:eq(0)").prop("selected", true);
        } else {
            $("#OrderProcResultTestForm select[name=dept_type]").val(dept_type);
        }

        if (!qcquest_date) {

            let today = new Date();

            let year = today.getFullYear();
            let month = today.getMonth() + 1;
            let date = today.getDate();

            $("#OrderProcResultTestForm input[name=qcquest_date]").val(year + "-" + (month >= 10 ? month : "0" + month) + "-" + (date >= 10 ? date : "0" + date));
        } else {
            $("#OrderProcResultTestForm input[name=qcquest_date]").val(qcquest_date);
        }

        var qcquest_date = $("#OrderProcResultTestForm input[name=qcquest_date]").val().replaceAll(/-/gi, '');

        $("#OrderProcResultTestForm input[name=test_no]").val(
            $("#OrderProcResultTestForm select[name=test_type]").val() +
            $("#OrderProcResultTestForm select[name=item_type]").val() +
            $("#OrderProcResultTestForm select[name=dept_type]").val() + "-" +
            qcquest_date.substring(2, qcquest_date.length)
        );

    }

    // 시험번호 변경
    function changeTestNo() {

        var qcquest_date = $("#OrderProcResultTestForm input[name=qcquest_date]").val().replaceAll(/-/gi, '');

        $("#OrderProcResultTestForm input[name=test_no]").val(
            $("#OrderProcResultTestForm select[name=test_type]").val() +
            $("#OrderProcResultTestForm select[name=item_type]").val() +
            $("#OrderProcResultTestForm select[name=dept_type]").val() + "-" +
            qcquest_date.substring(2, qcquest_date.length)
        );

    }

    // 시험의뢰 저장
    function confirmTestNo(isOK) {

        if (!isOK) {
            alert("시험의뢰가 정상적으로 선택 되지 않았습니다. 다시의뢰해 주세요!");
            $("#OrderProcResultTestPopup").dxPopup("instance").hide();
            return;
        }

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var test_no = "";

        //시험여부가 'Y'이면 시험의뢰정보 저장
        if (_isSecondPacking) {

            var data = new FormData($('#OrderProcResultTab2 form')[0]);

            data.set("m_order_no", gridData.m_order_no);
            data.set("item_cd", gridData.sale_item_cd);
            data.set("order_proc_id", gridData.order_proc_id);
            data.set("process_cd", gridData.process_cd);
            data.set("order_no", gridData.order_no);
            //data.set("request_no", $("#OrderProcResultTestForm input[name=test_no]").val());

            if (gridData.order_proc_qc_ck === "Y") {

                data.set("order_proc_qt_status", "4");
                data.set("order_proc_transfer_status", "3");

            } else {
                data.set("order_proc_qt_status", "");
                data.set("order_proc_transfer_status", "4");
            }

            if (gridData.mp_ck === "M") {
                data.set("mp_ck", "3");
            } else {
                data.set("mp_ck", "20");
            }

            data.set("gubun", "UQ2");

            $.ajax({
                type: 'POST',
                url: '/ProductionManage/OrderProcResultUQ',
                async: false,
                data: data,
                contentType: false,
                processData: false,
                success: function (result) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    test_no = json.message;

                }

            })

            if (test_no === null || test_no === "" || test_no === "-1") {
                alert("시험의뢰가 정상적으로 처리 되지 않았습니다. 다시의뢰해 주세요!");
                return;
            }
        }
        else {

            var data = new FormData($('#OrderProcResultTab2 form')[0]);

            data.set("process_cd", gridData.process_cd);
            data.set("order_no", gridData.order_no);
            data.set("order_proc_id", gridData.order_proc_id);
            //data.set("test_no", $("#OrderProcResultTestForm input[name=test_no]").val());
            //data.set("qcquest_date", $("#OrderProcResultTestForm input[name=qcquest_date]").val());

            if (gridData.order_proc_qc_ck === "Y") {

                data.set("order_proc_qt_status", "4");

                if (gridData.transfer_ck === "Y") {
                    data.set("order_proc_transfer_status", "3");
                } else {
                    data.set("order_proc_transfer_status", "14");
                }

            } else {
                data.set("order_proc_qt_status", "");
                data.set("order_proc_transfer_status", "4");
            }

            if (!gridData.m_order_no) {
                data.set("item_cd", gridData.item_cd);
            } else{
                data.set("item_cd", gridData.sale_item_cd);
            }

            if (gridData.mp_ck === "M") {
                data.set("mp_ck", "3");
            } else {
                data.set("mp_ck", "20");
            }

            data.set("gubun", "UQ");

            $.ajax({
                type: 'POST',
                url: '/ProductionManage/OrderProcResultUQ',
                async: false,
                data: data,
                contentType: false,
                processData: false,
                success: function (result) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                    test_no = json.message;

                }

            })

            if (test_no === null || test_no === "" || test_no === "-1") {
                alert("시험의뢰가 정상적으로 처리 되지 않았습니다. 다시의뢰해 주세요!");
                return;
            }
        }

        //시험여부가 'Y'이면 저장후 시험번호 표시
        if (gridData.order_proc_qc_ck === "Y") {
            alert("시험의뢰번호 <" + test_no + ">으로 시험의뢰가 되었습니다.");
            OrderProcResultSelectOderProc();
        }

        OrderProcResultSearch();
        orderProcResultIsEdited(false);

    }

    // 취소
    function OrderProcResultUndo() {

        if (confirm("입력사항을 취소하시겠습니까?")) {
            orderProcResultIsEdited(false);

            var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

            if (tabIndex === 2) {

                var editing = {
                    allowAdding: false,
                    allowUpdating: false,
                    allowDeleting: false
                }

                $("#OrderProcResultWorkerGrid").dxDataGrid("instance").option("editing", editing);
            }
            else if (tabIndex === 3) {

                var editing = {
                    allowAdding: false,
                    allowUpdating: false,
                    allowDeleting: false
                }

                $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").option("editing", editing);
            }
            else if (tabIndex === 4) {

                var editing = {
                    allowUpdating: false
                }

                $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("editing", editing);

            }

            OrderProcResultSearch();
            orderProcResultSetDetail(tabIndex);
        }

    }

    // 입력,  수정 가능 상태인지 체크
    function orderProcResultCheckLock() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var data = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        var lockData = new Array();

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultCheckLock',
            dataType: "json",
            async: false,
            data: {
                order_no: data.order_no,
                process_cd: data.process_cd,
                m_order_no: data.m_order_no
            },
            success: function (result) {

                if (!Array.isArray(result)) {

                    var json = JSON.parse(result);

                    if (json.hasOwnProperty('sessionLoss')) {
                        alert("세션이 만료되었습니다.");
                        sessionStorage.clear();
                        location.replace("/Comm/Login");
                    }

                }

                for (var i = 0; i < result.length; i++) {

                    var jsonData = JSON.parse(result[i])[0];

                    lockData[i] = jsonData[Object.keys(jsonData)[0]];

                }

            }

        })

        return lockData;

    }

    // 서명 권한 체크(id, pw)
    function orderProcResultSignSubmit() {

        var data = new FormData($('#OrderProcResultSignForm')[0]);

        _orderProcResultSignValid = false;
        _orderProcResultMaterialSignValid_Status = false;

        data.set("gubun", "S");

        $.ajax({
            type: 'POST',
            url: '/Comm/IDValidation',
            data: data,
            contentType: false,
            processData: false,
            async: false,
            success: function (result) {

                if (!result) {
                    alert("권한이 없는 사용자이거나 잘못된 ID,PW 입니다.");
                    _orderProcResultMaterialSignValidation = false;
                    return;
                }

                var json = JSON.parse(result)[0];

                $("input[name='dept_nm']").val(json.dept_nm);
                $("input[name='emp_nm']").val(json.emp_nm);

                _issue_emp_cd = json.emp_cd;
                _orderProcResultSignValid = true;
                _orderProcResultMaterialSignValid_Status = true;
            }
        });

        setTimeout(function () {
            var popup = $("#OrderProcResultSignPopup").dxPopup("instance");
            popup.hide();
        }, 1000);

        if (_orderProcResultMaterialSignValidation) {
            if (_orderProcResultMaterialSignValid_Status) {
                OrderProcResultPackCRUDExcute(_orderProcResultAddPackChanges);
            }
            _orderProcResultMaterialSignValidation = false;
        }
        else if (_orderProcResultSignValid) {

            if (_CRUDState === "D") {
                orderProcResultDeleteExcute();
            } else if (_CRUDState === "S") {
                orderProcResultSaveExcute();
            }
        }
    }

    // 서명 팝업 인풋 초기화
    //function orderProcResultClearSignInput() {

    //    $('#OrderProcResultSignForm')[0].reset();
    //    $("input[name='dept_nm']").val("");
    //    $("input[name='emp_nm']").val("");

    //}

    //


    // 이론 지시량 계산(무게, 수량 환산)
    function receiptQtyCalc(num) {

        if (num === 1) {

            var orderEaQty = $("#OrderProcResultTabPanel input[name=order_ea_qty]").val();
            var orderProcContent = $("#OrderProcResultTabPanel input[name=order_proc_content]").val();

            if (!orderEaQty) {
                $("#OrderProcResultTabPanel input[name=order_ea_qty]").val(0);
            }
            if (!orderProcContent) {
                $("#OrderProcResultTabPanel input[name=order_proc_content]").val(0);
            }

            if ($("#OrderProcResultTabPanel input[name=order_ea_qty]").val() !== "0") {

            }

            if ($("#OrderProcResultTabPanel input[name=order_ea_qty]").val() !== "0" && $("#OrderProcResultTabPanel input[name=order_proc_content]").val() !== "0") {
                if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mg")
                    $("#OrderProcResultTabPanel input[name=order_qty]").val(parseFloat($("#OrderProcResultTabPanel input[name=order_ea_qty]").val()) / 1000 * parseFloat($("#OrderProcResultTabPanel input[name=order_proc_content]").val()));
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "g")
                    $("#OrderProcResultTabPanel input[name=order_qty]").val(parseFloat($("#OrderProcResultTabPanel input[name=order_ea_qty]").val()) / 1000 * parseFloat($("#OrderProcResultTabPanel input[name=order_proc_content]").val()) * 1000);
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mL")
                    $("#OrderProcResultTabPanel input[name=order_qty]").val(parseFloat($("#OrderProcResultTabPanel input[name=order_ea_qty]").val()) * parseFloat($("#OrderProcResultTabPanel input[name=order_proc_content]").val()) * 1000);
            }
            else if ($("#OrderProcResultTabPanel input[name=order_ea_qty]").val() === "0") {
                alert("투입수량이 입력되지 않았습니다.");
                return;
            }
            else if ($("#OrderProcResultTabPanel input[name=order_proc_content]").val() === "0") {
                alert("단위중량이 입력되지 않았습니다.");
                return;
            }

            $("#order_qty").val($("#OrderProcResultTabPanel input[name=order_qty]").val());

        } else if (num === 2) {

            var orderQty = $("#OrderProcResultTabPanel input[name=order_qty]").val();
            var orderProcContent = $("#OrderProcResultTabPanel input[name=order_proc_content]").val();

            if (!orderQty) {
                $("#OrderProcResultTabPanel input[name=order_qty]").val(0);
            }

            if (!orderProcContent) {
                $("#OrderProcResultTabPanel input[name=order_proc_content]").val(0);
            }
            if (orderQty !== "0" && orderProcContent !== "0") {

                if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mg")
                    $("#OrderProcResultTabPanel input[name=order_ea_qty]").val(parseFloat(orderQty) * 1000 / parseFloat(orderProcContent));
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "g")
                    $("#OrderProcResultTabPanel input[name=order_ea_qty]").val(parseFloat(orderQty) * 1000 / (parseFloat(orderProcContent) * 1000));
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mL")
                    $("#OrderProcResultTabPanel input[name=order_ea_qty]").val(parseFloat(orderQty) / parseFloat(orderProcContent));
            }
            else if (orderQty === "0") {
                alert("투입량이 입력되지 않았습니다.");
                return;
            }
            else if (orderProcContent === "0") {
                alert("단위중량이 입력되지 않았습니다.");
                return;
            }
        }
    }

    // 실 생산량 계산(무게, 수량 환산))
    function orderProcRealQtyCal(num) {

        if (num === 1) {

            var orderProcRealEaQty = $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val();
            var orderProcContent = $("#OrderProcResultTabPanel input[name=order_proc_content]").val();

            if (!orderProcRealEaQty) {
                $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val(0);
            }
            if (!orderProcContent) {
                $("#OrderProcResultTabPanel input[name=order_proc_content]").val(0);
            }
            if (orderProcRealEaQty !== "0" && orderProcContent !== "0") {
                if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mg")
                    $("#OrderProcResultTabPanel input[name=order_proc_real_qty]").val(parseFloat($("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val()) / 1000 * parseFloat($("#OrderProcResultTabPanel input[name=order_proc_content]").val()));
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "g")
                    $("#OrderProcResultTabPanel input[name=order_proc_real_qty]").val(parseFloat($("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val()) / 1000 * parseFloat($("#OrderProcResultTabPanel input[name=order_proc_content]").val()) * 1000);
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mL")
                    $("#OrderProcResultTabPanel input[name=order_proc_real_qty]").val(parseFloat($("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val()) * parseFloat($("#OrderProcResultTabPanel input[name=order_proc_content]").val()));
            }
            else if ($("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val() === "0") {
                alert("투입수량이 입력되지 않았습니다.");
                return;
            }
            else if ($("#OrderProcResultTabPanel input[name=order_proc_content]").val() === "0") {
                alert("단위중량이 입력되지 않았습니다.");
                return;
            }

            $("#order_proc_real_qty").val($("#OrderProcResultTabPanel input[name=order_proc_real_qty]").val());

        } else if (num === 2) {

            var orderProcRealQty = $("#OrderProcResultTabPanel input[name=order_proc_real_qty]").val();
            var orderProcContent = $("#OrderProcResultTabPanel input[name=order_proc_content]").val();

            if (!orderProcRealQty) {
                $("#OrderProcResultTabPanel input[name=order_qty]").val(0);
            }

            if (!orderProcContent) {
                $("#OrderProcResultTabPanel input[name=order_proc_content]").val(0);
            }
            if (orderProcRealQty !== "0" && orderProcContent !== "0") {

                if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mg")
                    $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val(parseFloat(orderProcRealQty) * 1000 / parseFloat(orderProcContent));
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "g")
                    $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val(parseFloat(orderProcRealQty) * 1000 / (parseFloat(orderProcContent) * 1000));
                else if ($("#OrderProcResultTabPanel .item_content_unit").first().text() === "mL")
                    $("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val(parseFloat(orderProcRealQty) / parseFloat(orderProcContent));
            }
            else if (orderProcRealQty === "0") {
                alert("투입량이 입력되지 않았습니다.");
                return;
            }
            else if (orderProcContent === "0") {
                alert("단위중량이 입력되지 않았습니다.");
                return;
            }

        }

    }

    // 공정수율 계산
    function orderProcRateCalc() {

        var rateType = $("#OrderProcResultTab1 input[name=rate_type]:checked").val();

        if (rateType === "Y") {

            $("#order_qty").val($("#OrderProcResultTabPanel input[name=order_qty]").val());
            $("#order_proc_real_qty").val($("#OrderProcResultTabPanel input[name=order_proc_real_qty]").val());

        } else if (rateType === "N") {

            $("#order_qty").val($("#OrderProcResultTabPanel input[name=order_ea_qty]").val());
            $("#order_proc_real_qty").val($("#OrderProcResultTabPanel input[name=order_proc_real_ea_qty]").val());
        }

        $("#OrderProcResultTab1 input[name=order_proc_rate]").val((parseFloat($("#order_proc_real_qty").val() * 100 / parseFloat($("#order_qty").val()))).toFixed(2));
    }

    // 그리드 저장버튼 숨김
    function orderProcResultHideSaveBtn(e) {
        var toolbarItems = e.toolbarOptions.items;
        $.each(toolbarItems, function (_, item) {
            if (item.name == "saveButton") {
                item.visible = false;
            }
        });
    }

    // 그리드 툴바 숨김
    function OrderProcResultHideToolbar(e) {
        e.toolbarOptions.visible = false;
    }

    // 자재 실적 그리드 수정가능 컬럼 조정
    function OrderProcResultEditableColumn(cellElement, cellInfo)
    {
        if (cellElement.columnIndex == 6) {           
            if (_isReceiveField_Use) {
                cellElement.element.find('input').prop('disabled', true);
            }
        }
        else if (cellElement.columnIndex !== 7 && cellElement.columnIndex !== 8 && cellElement.columnIndex !== 9)        
            cellElement.element.find('input').prop('disabled', true);
    }

    // 그리드 검색 컬럽 버튼 표시
    function OrderProcResultCellWithButton(container, cellInfo) {
        if (_isReceiveField_Use || _orderProcResultIsEditing == false) {
            $("<div>").html(cellInfo == null ? "" : cellInfo.value)
                .appendTo(container);
            return;
        }
        $("<div>").html("<div style='float:left; line-height: 2;'>" + (cellInfo.value == null ? "" : cellInfo.value) + "</div><div style='float:right;' class='icon-plus'></div>")
            .appendTo(container);

        $(".icon-plus").dxButton({
            icon: "search",
            onClick: function (e) {

            }
        });
    }

    // 작업자 실적 cell 클릭 이벤트(팝업)
    function OrderProcResultEmpGridPopup(e) {

        if (!_orderProcResultIsEditing) {

            return;
        }
        _orderProcResultCellClickEvent = e;

        if (e.columnIndex == 11) {

            var popup = $("#OrderProcResultEmployeePopup").dxPopup("instance");
            popup.show();
        }

    }

    // 설비 실적 cell 클릭 이벤트(팝업)
    function OrderProcResultEquipGridPopup(e) {

        if (!_orderProcResultIsEditing) {
            return;
        }

        _orderProcResultCellClickEvent = e;

        if (e.columnIndex == 7) {

            var popup = $("#OrderProcResultEquipmentPopup").dxPopup("instance");
            popup.show();
        }
    }

    // 작업자그리드 사원조회 팝업 선택
    function OrderProcResultEmployeeRowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#OrderProcResultWorkerGrid").dxDataGrid("instance");
        dataGrid.cellValue(_orderProcResultCellClickEvent.rowIndex, "ew_cd", data.emp_cd);
        dataGrid.cellValue(_orderProcResultCellClickEvent.rowIndex, "ew_nm", data.emp_nm);

        var popup = $("#OrderProcResultEmployeePopup").dxPopup("instance");

        popup.hide();
    }

    // 설비그리드 설비조회 팝업 선택
    function OrderProcResultEquipmentRowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#OrderProcResultEquipmentGrid").dxDataGrid("instance");
        dataGrid.cellValue(_orderProcResultCellClickEvent.rowIndex, "ew_cd", data.equip_cd);
        dataGrid.cellValue(_orderProcResultCellClickEvent.rowIndex, "ew_nm", data.equip_nm);

        var popup = $("#OrderProcResultEquipmentPopup").dxPopup("instance");

        popup.hide();
    }

    // 추가 불출팩 리스트 팝업
    function OrderProcResultAddPackGridPopup(e) {
        if (!_orderProcResultIsEditing) {
            return;
        }

        _orderProcResultCellClickEvent = e;

        if (!_isReceiveField_Use && (e.column.dataField == 'Add_Pack' || e.column.dataField == 'Return_Pack')) {

            var material_grid = $("#OrderProcResultMaterialGrid").dxDataGrid("instance");
            var material_data = getGridRowByKey("OrderProcResultMaterialGrid", material_grid.option("focusedRowKey"));

            if (e.column.dataField == 'Add_Pack') {
                if ((material_data.return_issue_emp_cd != null && material_data.return_issue_emp_cd != "" && material_data.return_issue_emp_cd != "Forced Release") ||
                    (material_data.return_receive_emp_cd != null && material_data.return_receive_emp_cd != "")) {
                    alert("이미 자재 반납이 진행되어 추가 불출을 할 수 없습니다.");
                    return;
                }
            }
            else if (e.column.dataField == 'Return_Pack') {
                if (material_data.return_receive_emp_cd != null && material_data.return_receive_emp_cd != "") {
                    alert("이미 자재 반납이 완료 되었습니다.");
                    return;
                }
            }

            var popup = $("#OrderProcResultAddPackPopup").dxPopup("instance");
            popup.option("contentTemplate", $("#OrderProcResultAddPackItemPopupTemplate_1"));
            popup.show();

            if (e.column.dataField == 'Add_Pack') {
                _orderProcResultMaterialStatus_AddPack = true;
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("receipt_date", "caption", "입고일자");
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("remain_qty", "visible", true);
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("add_qty", "visible", true);
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("material_qty", "visible", false);
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("return_qty", "visible", false);

                $("#popup_item_cd_label").text("품목코드");
                $("#popup_item_cd").text(material_data.material_item_cd);
                $("#popup_test_no_label").text("시험번호");
                $("#popup_test_no").text(material_data.test_no);
            }
            else {
                _orderProcResultMaterialStatus_AddPack = false;
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("receipt_date", "caption", "불출일자")
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("remain_qty", "visible", false);
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("add_qty", "visible", false);
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("material_qty", "visible", true);
                $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").columnOption("return_qty", "visible", true);

                $("#popup_item_cd_label").text("");
                $("#popup_item_cd").text("");
                $("#popup_test_no_label").text("");
                $("#popup_test_no").text("");
            }

            var main_grid = $("#OrderProcResultGrid").dxDataGrid("instance");
            var process_data = getGridRowByKey("OrderProcResultGrid", main_grid.option("focusedRowKey"));

            $.ajax({
                type: 'GET',
                url: '/ProductionManage/OrderProcResultGetPackList',
                data: {
                    item_cd: material_data.material_item_cd,
                    test_no: material_data.test_no,
                    type: e.column.dataField,
                    packing_order_no: process_data.m_order_no,
                    process_cd: process_data.process_cd
                },
                success: function (result) {
                    if (result.length <= 0) {
                        $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").option("dataSource", []);
                        $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").option("focusedRowKey", "");
                        return;
                    }

                    $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").option("dataSource", JSON.parse(result));
                }
            })
        }
    }

    function OrderProcResultAddPackPopupHide() {
        $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").cancelEditData();
    }

    // 재고량 - 추가불출량 / 불출량 - 반납량 확인
    function OrderProcResultPackQtyChk(e) {
        var data = e.data;
        var result;
        if (_orderProcResultMaterialStatus_AddPack)
            result = data.remain_qty >= data.add_qty;
        else
            result = data.material_qty >= data.return_qty;

        return result;
    }

    function OrderProcResultPackQtyChk_All() {

        var result = true;

        var grid = $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance");
        var gridData = grid.getVisibleRows();
        for (var i = 0; i < gridData.length; i++)
        {
            if (gridData[i].cells[5].value < gridData[i].cells[6].value) {
                result = false;
                break;
            }
        }

        return result;
    }

    //포맷지정(복사 붙여넣기시 값 인식 제대로 되지않는 이슈로 인해)
    function OrderProcResultEditorPreparing(e) {
        //반납량 or 추가불출량 ',' 인식 지정.
        if (e.parentType == 'dataRow' && (e.dataField == 'add_qty' || e.dataField == 'return_qty')) {
            e.editorOptions.format = "#,##0";
        }
    }

    async function OrderProcResultAddPackUpdate(info) {
        var data = info.data;
        _orderProcResultAddPackChanges.push(data);
    }

    async function OrderProcResultAddPack_Save() {
        if (!OrderProcResultPackQtyChk_All()) {
            if (_orderProcResultMaterialStatus_AddPack) {
                alert("추가불출량이 재고량보다 많은 팩이 있습니다.");
                return;
            }
            else {
                alert("반납량이 불출량보다 많은 팩이 있습니다.");
                return;
            }
        }

        if (!confirm("변경사항을 저장하시겠습니까?")) {
            return;
        }

        await $("#OrderProcResultAddPackItemPopupGrid").dxDataGrid("instance").saveEditData();

        _orderProcResultMaterialSignValidation = true;
        var popup = $("#OrderProcResultSignPopup").dxPopup("instance");
        popup.option("contentTemplate", $("#OrderProcResultSignPopupTemplate"));
        popup.show();
    }

    function OrderProcResultPackCRUDExcute(data) {

        var grid = $("#OrderProcResultMaterialGrid").dxDataGrid("instance");
        var grid_data = getGridRowByKey("OrderProcResultMaterialGrid", grid.option("focusedRowKey"));
        var main_grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var process_data = getGridRowByKey("OrderProcResultGrid", main_grid.option("focusedRowKey"));

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultPackCRUD',
            data: {
                paramData: JSON.stringify(data),
                packing_order_id: grid_data.packing_order_id,
                issue_emp_cd: _issue_emp_cd,
                type: (_orderProcResultMaterialStatus_AddPack ? "Add_Pack" : "Return_Pack"),
                packing_order_no: process_data.m_order_no,
                process_cd: process_data.process_cd
            },
            dataType: 'json',
            async: false,
            success: function (result) {
                var json = JSON.parse(result);

                if (json.hasOwnProperty('sessionLoss')) {
                    alert("세션이 만료되었습니다.");
                    sessionStorage.clear();
                    location.replace("/Comm/Login");
                }

                _orderProcResultAddPackChanges = new Array();
                $("#OrderProcResultAddPackPopup").dxPopup("instance").hide();

                OrderProcResultSelectOderProc();
            }
        })

        var editing = {
            allowAdding: false,
            allowUpdating: false,
            allowDeleting: false
        }

        $("#OrderProcResultMaterialGrid").dxDataGrid("instance").option("editing", editing);
    }

    // 작업시작, 종료 일자/시간 기본값 설정
    function OrderProcResultSetWorkTime(e) {

        e.data.order_proc_sdate = _orderProcResultSDate;
        e.data.order_proc_stime = _orderProcResultSDate;
        e.data.order_proc_edate = _orderProcResultEDate;
        e.data.order_proc_etime = _orderProcResultEDate;

        e.data.worker_cnt = 1;
        e.data.normal_time = 0;
        e.data.added_time = 0;
        e.data.night_time = 0;
        e.data.special_time = 0;

        var diff = _orderProcResultEDate.getTime() - _orderProcResultSDate.getTime();

        e.data.total_time = Math.round(Math.abs(diff) / (1000 * 60));
    }

    // 작업시작, 종료 일자/시간 변경에 따른 전산시간 계산
    function OrderProcResultCalcTotalTime(e) {

        if (e.parentType == 'dataRow' && (e.dataField == 'order_proc_sdate' || e.dataField == 'order_proc_stime' || e.dataField == 'order_proc_edate' || e.dataField == 'order_proc_etime')) {
            e.editorElement.dxDateBox('instance').option('onValueChanged', args => {

                e.setValue(args.value);

                var data = e.row.data;

                if (typeof (data.order_proc_sdate) === "string") {
                    data.order_proc_sdate = new Date(data.order_proc_sdate);
                }
                if (typeof (data.order_proc_stime) === "string") {

                    var date = new Date().toISOString().slice(0, 10);

                    data.order_proc_stime = new Date(date + "T" + data.order_proc_stime);
                }
                if (typeof (data.order_proc_edate) === "string") {
                    data.order_proc_edate = new Date(data.order_proc_edate);
                }
                if (typeof (data.order_proc_etime) === "string") {

                    var date = new Date().toISOString().slice(0, 10);

                    data.order_proc_etime = new Date(date + "T" + data.order_proc_etime);
                }

                var sYear = data.order_proc_sdate.getFullYear();
                var sMonth = data.order_proc_sdate.getMonth();
                var sDate = data.order_proc_sdate.getDate();

                var sHour = data.order_proc_stime.getHours();
                var sMinute = data.order_proc_stime.getMinutes();
                var sSecond = data.order_proc_stime.getSeconds();

                var eYear = data.order_proc_edate.getFullYear();
                var eMonth = data.order_proc_edate.getMonth();
                var eDate = data.order_proc_edate.getDate();

                var eHour = data.order_proc_etime.getHours();
                var eMinute = data.order_proc_etime.getMinutes();
                var eSecond = data.order_proc_etime.getSeconds();

                var sDate = new Date(sYear + "-" + sMonth + "-" + sDate + " " + sHour + ":" + sMinute + ":" + sSecond);
                var eDate = new Date(eYear + "-" + eMonth + "-" + eDate + " " + eHour + ":" + eMinute + ":" + eSecond);

                var diff = (eDate - sDate);

                var tabIndex = $("#OrderProcResultTabPanel").dxTabPanel("instance").option("selectedIndex");

                if (tabIndex === 2) {
                    $("#OrderProcResultWorkerGrid").dxDataGrid("instance").cellValue(e.row.rowIndex, "total_time", Math.round(Math.abs(diff) / (1000 * 60)));
                } else if (tabIndex === 3) {
                    $("#OrderProcResultEquipmentGrid").dxDataGrid("instance").cellValue(e.row.rowIndex, "total_time", Math.round(Math.abs(diff) / (1000 * 60)));
                }

            });
        }
    }

    // Date -> DateTime string 포멧으로 변환
    function OrderProcResultGetDataTimeString(date, time) {

        if (typeof (date) === "string") {
            date = new Date(date);
        }
        if (typeof (time) === "string") {

            var tmpDate = new Date().toISOString().slice(0, 10);

            time = new Date(tmpDate + "T" + time);
        }

        var sYear = date.getFullYear();
        var sMonth = date.getMonth()+1;
        var sDate = date.getDate();

        var sHour = time.getHours();
        var sMinute = time.getMinutes();
        var sSecond = time.getSeconds();

        var dateStr = sYear + "-" + (sMonth < 10 ? "0" + sMonth : sMonth) + "-" + (sDate < 10 ? "0" + sDate : sDate) + " " + (sHour < 10 ? "0" + sHour : sHour) + ":" + (sMinute < 10 ? "0" + sMinute : sMinute) + ":" + (sSecond < 10 ? "0" + sSecond : sSecond);

        return dateStr;
    }

    // 그리드 작업시작 일자 시간이 공정 시작시간보다 늦은지 체크
    function OrderProcResultDateChk(e) {
        var data = e.data;

        var tmpDate = data.order_proc_sdate;
        var tmpTime = data.order_proc_stime;


        if (typeof (tmpDate) === "string") {
            tmpDate = new Date(tmpDate);
        }
        if (typeof (tmpTime) === "string") {

            var date = new Date().toISOString().slice(0, 10);

            tmpTime = new Date(date + "T" + tmpTime);
        }

        tmpDate.setHours(tmpTime.getHours());
        tmpDate.setMinutes(tmpTime.getMinutes());
        tmpDate.setSeconds(tmpTime.getSeconds());

        var result = tmpDate.setMilliseconds(0) >= _orderProcResultSDate.setMilliseconds(0);

        return result;
    }

    // 그리드 작업시작 일자 시간이 공정 시작시간보다 늦은지 체크
    function OrderProcResultDateChk2(date, time, type) {

        var tmpDate = date;
        var tmpTime = time;


        if (typeof (tmpDate) === "string") {
            tmpDate = new Date(tmpDate);
        }
        if (typeof (tmpTime) === "string") {

            var date = new Date().toISOString().slice(0, 10);

            tmpTime = new Date(date + "T" + tmpTime);
        }

        tmpDate.setHours(tmpTime.getHours());
        tmpDate.setMinutes(tmpTime.getMinutes());
        tmpDate.setSeconds(tmpTime.getSeconds());

        if (type == "s") {
            var result = tmpDate.setMilliseconds(0) >= _orderProcResultSDate.setMilliseconds(0);
        } else if (type == "e") {
            var result = tmpDate.setMilliseconds(0) <= _orderProcResultEDate.setMilliseconds(0);
        }

        return result;
    }

    // 작업자그리드 입력
    function OrderProcResultWorkerInsert(info) {
        var data = info.data;

        data.gubun = "I";
        data.ew_flag = "W";
        data.order_proc_sdate = OrderProcResultGetDataTimeString(data.order_proc_sdate, data.order_proc_stime);
        data.order_proc_edate = OrderProcResultGetDataTimeString(data.order_proc_edate, data.order_proc_etime);
        data.order_no = _orderProcResultOrderNo;
        data.order_proc_id = _orderProcResultOrderProcId;

        _orderProcResulWorkerChenges.push(data);

    }

    // 작업자그리드 수정
    function OrderProcResultWorkerUpdate(info) {

        var data = info.data;

        if (!data.order_proc_sdate || !data.order_proc_stime || !data.order_proc_edate || !data.order_proc_etime) {
            alert("");
            return;
        }

        data.gubun = "U";
        data.ew_flag = "W";
        data.order_proc_sdate = OrderProcResultGetDataTimeString(data.order_proc_sdate, data.order_proc_stime);
        data.order_proc_edate = OrderProcResultGetDataTimeString(data.order_proc_edate, data.order_proc_etime);

        _orderProcResulWorkerChenges.push(data);

    }

    // 작업자그리드 삭제
    function OrderProcResultWorkerDelete(info) {
        var data = info.data;

        data.gubun = "D";
        data.ew_flag = "W";

        _orderProcResulWorkerChenges.push(data);

    }

    // 설비그리드 입력
    function OrderProcResultEquipInsert(info) {

        var data = info.data;
        data.order_proc_id = _orderProcResultOrderProcId;

        data.gubun = "I";
        data.ew_flag = "E";
        data.order_proc_sdate = OrderProcResultGetDataTimeString(data.order_proc_sdate, data.order_proc_stime);
        data.order_proc_edate = OrderProcResultGetDataTimeString(data.order_proc_edate, data.order_proc_etime);
        data.order_no = _orderProcResultOrderNo;
        data.order_proc_id = _orderProcResultOrderProcId;

        _orderProcResulEquipChenges.push(data);

    }

    // 설비그리드 수정
    function OrderProcResultEquipUpdate(info) {

        var data = info.data;

        data.gubun = "U";
        data.ew_flag = "E";
        data.order_proc_sdate = OrderProcResultGetDataTimeString(data.order_proc_sdate, data.order_proc_stime);
        data.order_proc_edate = OrderProcResultGetDataTimeString(data.order_proc_edate, data.order_proc_etime);

        _orderProcResulEquipChenges.push(data);

    }

    // 설비그리드 삭제
    function OrderProcResultEquipDelete(info) {

        var data = info.data;

        data.gubun = "D";
        data.ew_flag = "E";

        _orderProcResulEquipChenges.push(data);

    }

    // 자재 그리드 수정
    function OrderProcResultMaterialUpdate(info) {

        var data = {
            use_qty: info.data.material_use_qty,
            disuse_qty: info.data.disuse_qty,
            return_qty: info.data.Return_Pack,
            packing_order_id: info.data.packing_order_id,
            gubun: "U"
        }

        _orderProcResulMaterialChenges.push(data);
    }

    //function testSaveBtn() {
    //    $("#OrderProcResultWorkerGrid").dxDataGrid("instance").saveEditData();
    //}


    //function testInsert(e) {
    //    console.log("저장");
    //    console.log(e);
    //}

    function OrderProcResultExcel() {
        gridExportToExcel("OrderProcResultGrid", "공정실적등록_" + "@DateTime.Now.ToShortDateString()");
    }

    function OrderProcResultCellBackground(cellInfo) {

        if (cellInfo.rowType == "data" && cellInfo.column.dataField === 'qc_yn') {

            if (cellInfo.data.qc_yn === '의뢰대기') {
                cellInfo.cellElement[0].style.backgroundColor = 'lightgreen';
            }
        }
        else if (cellInfo.rowType == "data" && cellInfo.column.dataField === 'packing_result_yn') {

            if (cellInfo.data.packing_result_yn === '입력대기') {
                cellInfo.cellElement[0].style.backgroundColor = 'lightblue';
            }

        }
    }

    function OrderProcResultRowBackground(e) {

        if (e.rowType === "data" && e.data.order_proc_rate && e.data.order_proc_rate < parseFloat(e.data.order_proc_manage_rate_min)) {
            e.rowElement[0].style.backgroundColor = 'lightpink';
        }
    }

    function OrderProcResultPrint() {

        var grid = $("#OrderProcResultGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("OrderProcResultGrid", grid.option("focusedRowKey"));

        if (!gridData.pack_order_no) {
            return;
        }

        var material_status = "";

        $.ajax({
            type: 'GET',
            url: '/ProductionManage/OrderProcResultSelectMaterialStatus',
            async: false,
            data: {
                order_no: gridData.pack_order_no
            },
            dataType: 'json',
            success: function (result) {

                material_status = result.material_status;
            }
        })

        if (material_status !== "6") {
            alert("해당 지시가 완료되지 않았습니다.\n관리자에게 문의해주세요. [" + material_status + "]");
            return;
        }

        // report 출력
        var report = new ReportHelper();
        report.addParam({
            objFile: { path: "PackingManage", RptFileName: "Material_Report" },
            objSp: { SpName: "SP_OrderProcResult", gubun: "Material_Report", reportParam: "m_order_no:" + gridData.pack_order_no },
            objEtcInfo: { subParam: "" },
            objTblNm: { tblName: "Header,Material_Report" }
        });

        report.print();
    }

</script>

<div id="OrderProcResult">

    <div id="OrderProcResultItemPopup"></div>
    <div id="OrderProcResultEmployeePopup"></div>
    <div id="OrderProcResultEquipmentPopup"></div>

    <div>
        @(Html.DevExtreme().Popup()
            .ID("orderProcResultWorkorderPopup")
            .Width(800)
            .Height(900)
            .ShowTitle(true)
            .Title("제조지시 조회")
            .Visible(false)
            .DragEnabled(false)
            .ContentTemplate(new TemplateName("orderProcResultWorkorder_template"))
        )
    </div>

    @using (Html.DevExtreme().NamedTemplate("orderProcResultWorkorder_template"))
    {
        @(Html.DevExtreme().ScrollView()
            .Width("100%")
            .Height("100%")
            .Content(@<text>

                <div>
                     @(Html.DevExtreme().Toolbar()
                        .ID("OrderProcResultWorkorderToolbar")
                        .Items(items =>
                        {
                            items.Add()
                                .Template(new TemplateName("OrderProcResultPopupToolbarContent"))
                                .Location(ToolbarItemLocation.Before);

                            items.Add()
                                .Widget(w => w
                                    .Button()
                                    .Type(ButtonType.Default)
                                    .StylingMode(ButtonStylingMode.Contained)
                                    .ID("OrderProcResultWorkorderSearch")
                                    .Icon("search")
                                    .Text("조회")
                                .OnClick("OrderProcResultWorkorderSearch")
                                )
                                .Location(ToolbarItemLocation.After);

                            items.Add()
                                .Widget(w => w
                                    .Button()
                                    .Type(ButtonType.Default)
                                    .StylingMode(ButtonStylingMode.Contained)
                                    .ID("OrderProcResultWorkorderSelect")
                                    .Icon("check")
                                    .Text("확인")
                                .OnClick("OrderProcResultWorkorderSelect")
                                )
                                .Location(ToolbarItemLocation.After);
                        })
                    )


                    @(Html.DevExtreme().DataGrid()
                        .ID("OrderProcResultWorkorderGrid")
                        .ShowBorders(true)
                        .ShowColumnLines(true)
                        .ShowRowLines(true)
                        .ColumnAutoWidth(true)
                        .KeyExpr("order_no")
                        .FocusedRowEnabled(true)
                        .SearchPanel(s => s.Visible(true))
                        .Selection(s => s.Mode(SelectionMode.Single))
                        .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                        .OnRowDblClick("OrderProcResultWorkorderSelect")
                        .Height(700)
                        .Columns(columns =>
                        {
                            columns.Add().DataField("order_date").Caption("입력일자");
                            columns.Add().DataField("item_cd").Caption("제조제품");
                            columns.Add().DataField("item_nm").Caption("제조제품명");
                            columns.Add().DataField("lot_no").Caption("제조번호");
                            columns.Add().DataField("order_no").Caption("전표번호");
                            columns.Add().DataField("order_status_nm").Caption("상태");
                            columns.Add().DataField("gubun").Caption("불출상태");
                        })
                        )

                </div>
            </text>)
        )
    }

    @using (Html.DevExtreme().NamedTemplate("OrderProcResultPopupToolbarContent"))
    {
        <div style="width:550px;">

            <div id="OrderProcResultPopupHeader" class="input-wrapper">

                <label class="col-2">입력일자</label>
                <input type="text" id="workorder_start_date" value="@DateTime.Today.AddDays(-(DateTime.Today).Day + 1 ).ToShortDateString()" class="form-control col-4 datepicker">
                <input type="text" id="workorder_end_date" value="@DateTime.Today.ToShortDateString()" class="form-control col-4 datepicker">

            </div>

        </div>
    }

    @* === 추가 불출 / 반납 팩 팝업 === *@
    <div id="OrderProcResultAddPackPopup" autoresize="Y"></div>
    @(Html.DevExtreme().Popup()
            .ID("OrderProcResultAddPackPopup")
            .Width(1300)
            .Height(730)
            .ShowTitle(true)
            .Title("부자재 팩 리스트")
            .Visible(false)
            .DragEnabled(true)
            .CloseOnOutsideClick(false)
            .OnHiding("OrderProcResultAddPackPopupHide")
        )

    @using (Html.DevExtreme().NamedTemplate("OrderProcResultAddPackToolbar_1"))
    {
        <div style="width:1000px;">
            <form id="OrderProcResultAddPack_Popupform">
                <div class="input-wrapper">
                    <div class="col-8 input-group input-group-sm">
                        <label class="col-2" style="font-size: 14px; font-weight:600;" id="popup_item_cd_label"></label>
                        <label class="col-2" style="font-size: 14px; font-weight:600;" id="popup_item_cd"></label>
                        <label class="col-2" style="font-size: 14px; font-weight:600;" id="popup_test_no_label"></label>
                        <label class="col-2" style="font-size: 14px; font-weight:600;" id="popup_test_no"></label>
                    </div>
                </div>
            </form>
        </div>
    }

    @using (Html.DevExtreme().NamedTemplate("OrderProcResultAddPackItemPopupTemplate_1"))
    {
        @(Html.DevExtreme().Toolbar()
            .ID("OrderProcResultAddPackItemPopupToolBar")
            .Items(items =>
            {
                items.Add()
                    .Template(new TemplateName("OrderProcResultAddPackToolbar_1"))
                    .Location(ToolbarItemLocation.Before);
                items.Add()
                    .Widget(w => w
                    .Button()
                    .Type(ButtonType.Default)
                    .StylingMode(ButtonStylingMode.Contained)
                    .ID("OrderProcResultAddPack_Save")
                    .Icon("save")
                    .Text("저장")
                    .OnClick("OrderProcResultAddPack_Save")
                    )
                    .Location(ToolbarItemLocation.After);
            })
            )

        <div class="row">
            <div class="col-12 pt-1">
                <div id="OrderProcResultAddPackItemPopupGrid" class="box mb-0">
                    @(Html.DevExtreme().DataGrid()
                            .ID("OrderProcResultAddPackItemPopupGrid")
                            .ShowBorders(true)
                            .Selection(s => s.Mode(SelectionMode.Single))
                            .SearchPanel(searchPanel => searchPanel.Visible(true))
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                            .Height(600)
                            .HoverStateEnabled(true)
                            .FocusedRowEnabled(true)
                            .ColumnAutoWidth(true)
                            .AllowColumnResizing(true)
                            .Editing(e => { e.AllowUpdating(true); e.Mode(GridEditMode.Batch); })
                            .KeyExpr("pack_barcode")
                            .OnToolbarPreparing("HideToolbarButton")
                            .Columns(c =>
                            {
                                c.Add().DataField("receipt_date").Caption("입고일자").Format("yyyy-MM-dd").DataType(GridColumnDataType.Date).AllowEditing(false);
                                c.Add().DataField("item_cd").Caption("품목코드").AllowEditing(false);
                                c.Add().DataField("item_nm").Caption("품목명").AllowEditing(false);
                                c.Add().DataField("test_no").Caption("시험번호").AllowEditing(false);
                                c.Add().DataField("pack_barcode").Caption("팩 바코드").AllowEditing(false);
                                c.Add().DataField("remain_qty").Caption("재고량").Format("#,##0").DataType(GridColumnDataType.Number).AllowEditing(false);
                                c.Add().DataField("material_qty").Caption("불출량").Format("#,##0").DataType(GridColumnDataType.Number).AllowEditing(false);
                                c.Add().DataField("add_qty").Caption("추가불출량").Format("#,##0").DataType(GridColumnDataType.Number)
                                .ValidationRules(vr =>
                                {
                                    vr.AddRequired().Message("추가불출량은 필수 입력사항입니다.");
                                    vr.AddCustom().ValidationCallback("OrderProcResultPackQtyChk").Message("추가불출량이 팩 재고량보다 많습니다.");
                                });
                                c.Add().DataField("return_qty").Caption("반납량").Format("#,##0").DataType(GridColumnDataType.Number)
                                .ValidationRules(vr =>
                                {
                                    vr.AddRequired().Message("반납량은 필수 입력사항입니다.");
                                    vr.AddCustom().ValidationCallback("OrderProcResultPackQtyChk").Message("반납량이 불출량보다 많습니다.");
                                });
                                c.Add().DataField("item_unit").Caption("단위").AllowEditing(false);
                                c.Add().DataField("packing_order_id").Caption("packing_order_id").Visible(false);
                            })
                            .OnRowUpdated("OrderProcResultAddPackUpdate")
                            .OnEditorPreparing("OrderProcResultEditorPreparing")
                        )
                </div>
            </div>
        </div>
    }

    @* === 전자 서명 팝업 === *@
    @(Html.DevExtreme().Popup()
            .ID("OrderProcResultSignPopup")
            .Width(500)
            .Height(420)
            .ShowTitle(true)
            .Title("작업자 인증")
            .Visible(false)
            .DragEnabled(true)
            .CloseOnOutsideClick(false)
        )

    @using (Html.DevExtreme().NamedTemplate("OrderProcResultSignPopupTemplate"))
    {
        <h6>전자서명은 수기서명과 동일한 효력을 갖습니다.</h6>

        <form id="OrderProcResultSignForm">

            <div class="input-wrapper">
                <label class="col-3">아이디</label>
                <input type="text" class="col-8 form-control" name="txt_ID">

                <label class="col-3">비밀번호</label>
                <input type="password" class="col-8 form-control" name="txt_Pass">
            </div>

        </form>
        <div class="align-content-end">
            <button class="btn btn-secondary" onclick="orderProcResultSignSubmit()">확인</button>
        </div>

        <br />
        <hr />

        <label class="col-3">부서</label>
        <input type="text" class="col-8 form-control" name="dept_nm" readonly="readonly" />
        <label class="col-3">성명</label>
        <input type="text" class="col-8 form-control" name="emp_nm" readonly="readonly" />
    }

    @* === 시험번호 생성 팝업 === *@
    @(Html.DevExtreme().Popup()
            .ID("OrderProcResultTestPopup")
            .Width(450)
            .Height(350)
            .ShowTitle(true)
            .Title("시험번호 생성 옵션")
            .Visible(false)
            .DragEnabled(true)
            .CloseOnOutsideClick(false)
        )


    @using (Html.DevExtreme().NamedTemplate("OrderProcResultTestPopupTemplate"))
    {
        <form id="OrderProcResultTestForm">

            <div class="input-wrapper">
                <label class="col-4">시험구분</label>
                <select class="form-control col-7" name="test_type" onchange="changeTestNo()">
                    @foreach (DataRow row in ((DataTable)Public_Function.GetMaster("공통코드", "P", "QC602")).Rows)
                    {
                        <option value="@row["keyfield"]">@row["displayfield"]</option>
                    }
                </select>
            </div>

            <div class="input-wrapper">
                <label class="col-4">제품구분</label>
                <select class="form-control col-7" name="item_type" onchange="changeTestNo()">
                    @foreach (DataRow row in ((DataTable)Public_Function.GetMaster("공통코드", "P", "QC603")).Rows)
                    {
                        <option value="@row["keyfield"]">@row["displayfield"]</option>
                    }
                </select>
            </div>

            <div class="input-wrapper">
                <label class="col-4">부서구분</label>
                <select class="form-control col-7" name="dept_type" onchange="changeTestNo()">
                    @foreach (DataRow row in ((DataTable)Public_Function.GetMaster("공통코드", "P", "QC604")).Rows)
                    {
                        <option value="@row["keyfield"]">@row["displayfield"]</option>
                    }
                </select>
            </div>

            <div class="input-wrapper">
                <label class="col-4">생성일자</label>
                <input type="text" class="col-7 form-control datepicker" name="qcquest_date" value="@DateTime.Now" onchange="changeTestNo()" />
            </div>

            <div class="input-wrapper">
                <label class="col-4">생성번호</label>
                <input type="text" class="col-7 form-control" name="test_no" readonly="readonly" />
            </div>

        </form>

        <div class="align-center">
            <button class="btn btn-secondary" onclick="confirmTestNo(true)">확인</button>
            <button class="btn btn-secondary" onclick="confirmTestNo(false)">취소</button>
        </div>
    }

    <div class="mainTop row">

        <div class="col-8">

            <form id="OrderProcResultSearchForm">

                <div class="input-wrapper">

                    <div class="input-group input-group-sm col-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">일자</span>
                        </div>
                        <input type="text" class="form-control datepicker" name="sdate" value="@DateTime.Today.AddDays(-(DateTime.Today.Day-1)).ToShortDateString()">
                        <input type="text" class="form-control datepicker" name="edate" value="@DateTime.Today.ToShortDateString()">
                    </div>

                    <div class="input-group input-group-sm col-3">
                        <div class="input-group-prepend">
                            <span class="input-group-text">지시번호</span>
                        </div>
                        <input type="text" class="form-control" name="order_no">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" onclick="orderProcResultSelectWorkorder()">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>

                    <div class="input-group input-group-sm col-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">제형</span>
                        </div>
                        <select class="form-control" name="trade_cd3">
                            @foreach (DataRow row in ((DataTable)ViewBag.folmulation).Rows)
                            {
                                <option value="@row["keyfield"]">@row["displayfield"]</option>
                            }
                        </select>
                    </div>

                    <div class="input-group input-group-sm col-3">
                        <label class="form-control-sm col-4 text-center" style="background:lightgreen;">시험미의뢰</label>
                        <label class="form-control-sm col-4 text-center" style="background:lightpink;">수율미달</label>
                        <label class="form-control-sm col-4 text-center" style="background:lightblue;">자재실적</label>
                    </div>

                </div>

                @*<div class="input-wrapper">

                        <div class="input-group input-group-sm col-6">
                            <div class="input-group-prepend">
                                <span class="input-group-text">제조코드</span>
                            </div>
                            <input type="text" class="form-control" name="item_cd">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" onclick="orderProcResultSelectItem()">
                                    <i class="fa fa-search"></i>
                                </button>
                            </div>
                        </div>

                        <div class="input-group input-group-sm col-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">제조번호</span>
                            </div>
                            <input type="text" class="form-control" name="lot_no">
                        </div>

                        <div class="input-group input-group-sm col-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">외주공정포함</span>
                            </div>
                            <input type="checkbox" class="form-check-input" name="outsource_YN" value="Y" />
                        </div>

                        <div class="input-group input-group-sm col-3">
                            <label class="form-control-sm col-4 text-center" style="background:lightgreen;">시험미의뢰</label>
                            <label class="form-control-sm col-4 text-center" style="background:lightpink;">수율미달</label>
                            <label class="form-control-sm col-4 text-center" style="background:lightblue;">자재실적</label>
                        </div>

                    </div>*@

            </form>

        </div>

        <div class="CRUD-btn col-4">
            @* === CRUD 버튼 === *@
            @{Html.SetToolbar(0, true, "Search;Input;Edit;Delete;Save;Undo;Excel"); }
        </div>

    </div>

    <div class="row mb-1">

        <div class="col-2 pr-1">

            <div class="box mb-0">

                @(Html.DevExtreme().DataGrid()
                        .ID("OrderProcResultProcNameGrid")
                        .KeyExpr("process_cd")
                        .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                        .Height(500)
                        .Columns(columns => {

                            columns.Add()
                                .DataField("process_nm")
                                .Caption("공정명");

                        })
                        .ShowRowLines(true)
                        .ShowBorders(true)
                        .FocusedRowEnabled(true)
                        .FocusedRowIndex(0)
                        .OnFocusedRowChanged("OrderProcResultProcessSelect")
                    )

            </div>

        </div>

        <div class="col-10 pl-0">

            <div class="box mb-0">

                @(Html.DevExtreme().DataGrid()
                        .ID("OrderProcResultGrid")
                        .KeyExpr("order_proc_id")
                        .OnCellPrepared("OrderProcResultCellBackground")
                        .OnRowPrepared("OrderProcResultRowBackground")
                        .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                        .Height(500)
                        .SearchPanel(s => s.Visible(true))
                        .Columns(columns => {

                            columns.Add()
                                .DataField("seq")
                                .Caption("순서");
                            columns.Add()
                                .DataField("")
                                .Caption("제형");
                            columns.Add()
                                .DataField("lot_no")
                                .Caption("제조번호");
                            columns.Add()
                                .DataField("name")
                                .Caption("공정");
                            columns.Add()
                                .DataField("order_proc_receive_time")
                                .DataType(GridColumnDataType.DateTime)
                                .Format("yyyy-MM-dd HH:mm")
                                .Caption("시작시간");
                            columns.Add()
                                .DataField("order_proc_enter_time")
                                .DataType(GridColumnDataType.DateTime)
                                .Format("yyyy-MM-dd HH:mm")
                                .Caption("종료시간");
                            columns.Add()
                                .DataField("item_cd")
                                .Caption("제품코드");
                            columns.Add()
                                .DataField("item_nm")
                                .Caption("제품명");
                            columns.Add()
                                .DataField("order_proc_warehouse")
                                .Caption("재공창고");
                            columns.Add()
                                .DataField("order_proc_warehouse_nm")
                                .Caption("재공창고명");
                            columns.Add()
                                .DataField("start_date")
                                .Caption("제조일자");
                            columns.Add()
                                .DataField("order_qty")
                                .Caption("지시수량");
                            columns.Add()
                                .DataField("qc_yn")
                                .Caption("시험여부");
                            columns.Add()
                                .DataField("packing_result_yn")
                                .Caption("자재실적");
                            //columns.Add()
                            //    .DataField("outsource")
                            //    .Caption("외주여부");

                        })
                        .ShowRowLines(true)
                        .ShowColumnLines(true)
                        .ShowBorders(true)
                        .ColumnAutoWidth(true)
                        .FocusedRowEnabled(true)
                        .FocusedRowIndex(0)
                        .OnFocusedRowChanged("OrderProcResultSelectOderProc")
                    )

            </div>

        </div>

    </div>

    <div class="row">

        <div class="col-12">

            <div class="box mb-0">

                @(Html.DevExtreme().TabPanel()
                    .ID("OrderProcResultTabPanel")
                    .Height(335)
                    .SelectedIndex(0)
                    .Loop(false)
                    .AnimationEnabled(false)
                    .SwipeEnabled(false)
                    .OnTitleClick("OrderProcResultChangeTab")
                    .Items(config =>
                    {
                        config.Add().Title("생산 실적").Template(new JS("$('#OrderProcResultTabContent1')"));
                        config.Add().Title("시험의뢰").Template(new JS("$('#OrderProcResultTabContent2')"));
                        config.Add().Title("작업자실적").Template(new JS("$('#OrderProcResultTabContent3')"));
                        config.Add().Title("설비 실적").Template(new JS("$('#OrderProcResultTabContent4')"));
                        config.Add().Title("자재 실적").Template(new JS("$('#OrderProcResultTabContent5')"));
                        config.Add().Title("포장 실적").Template(new JS("$('#OrderProcResultTabContent6')"));
                    })
                )

                @using (Html.DevExtreme().NamedTemplate("OrderProcResultTabContent1"))
                {
                    <div id="OrderProcResultTab1" class="menuDiv">

                        <form id="OrderProcResultTab1Form" style="display: flex;">

                            <div class="col-4">

                                <div style="display: flex;">
                                    <h5>*공정수율*</h5>
                                    <h6 class="text-danger"> 공식) 실생산량 X 100 / 총 투입량 = 공정수율%</h6>
                                </div>

                                <div class="input-wrapper">
                                    <div class="input-group col-5">
                                        <input type="number" class="form-control col-12" id="order_proc_real_qty" />
                                    </div>
                                    <div class="input-group col-2">
                                        <span> X 100 / </span>
                                    </div>
                                    <div class="input-group col-5">
                                        <input type="number" class="form-control col-12" id="order_qty" />
                                    </div>
                                </div>

                                <div class="input-wrapper">
                                    <div class="input-group col-1">
                                        <span> = </span>
                                    </div>
                                    <div class="input-group col-5">
                                        <input type="number" class="form-control col-12" name="order_proc_rate" />
                                    </div>
                                    <div class="input-group col-1">
                                        <span> % </span>
                                    </div>
                                </div>

                            </div>

                            <div class="col-8">

                                <div class="input-wrapper">

                                    <label class="col-2">이론지시량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_qty" onchange="orderProcRateCalc()">
                                        <div class="input-group-append">
                                            <span class="input-group-text item_content_unit" style="font-size:inherit;"></span>
                                        </div>
                                    </div>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_ea_qty" onchange="orderProcRateCalc()">
                                        <div class="input-group-append">
                                            <span class="input-group-text order_batch_size_unit" style="font-size:inherit;"></span>
                                        </div>
                                    </div>

                                    <button type="button" class="btn btn-secondary btn-sm" onclick="receiptQtyCalc(1)">무게환산</button>
                                    <button type="button" class="btn btn-secondary btn-sm" onclick="receiptQtyCalc(2)">수량환산</button>

                                </div>


                                <div class="input-wrapper">

                                    <label class="col-2">실 생산량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_proc_real_qty" onchange="orderProcRateCalc()">
                                        <div class="input-group-append">
                                            <span class="input-group-text item_content_unit" style="font-size:inherit;"></span>
                                        </div>
                                    </div>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_proc_real_ea_qty" onchange="orderProcRateCalc()">
                                        <div class="input-group-append">
                                            <span class="input-group-text order_batch_size_unit" style="font-size:inherit;"></span>
                                        </div>
                                    </div>

                                    <button type="button" class="btn btn-secondary btn-sm" onclick="orderProcRealQtyCal(1)">무게환산</button>
                                    <button type="button" class="btn btn-secondary btn-sm" onclick="orderProcRealQtyCal(2)">수량환산</button>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">단위중량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_proc_content">
                                        <div class="input-group-append">
                                            <span class="input-group-text item_content_unit" style="font-size:inherit;"></span>
                                        </div>
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">생산일자</label>
                                    <div class="input-group col-2">
                                        <input type="text" class="form-control col-12 datepicker" name="receive_date" />
                                    </div>
                                    <div class="input-group col-2">
                                        <input type="time" class="form-control col-12" name="receive_time" />
                                    </div>
                                    ~
                                    <div class="input-group col-2">
                                        <input type="text" class="form-control col-12 datepicker" name="order_enter_date" />
                                    </div>
                                    <div class="input-group col-2">
                                        <input type="time" class="form-control col-12" name="enter_time" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">이론수율범위</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_proc_manage_rate_min">
                                        <div class="input-group-append">
                                            <span class="input-group-text" style="font-size:inherit;">~</span>
                                        </div>
                                    </div>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="order_proc_manage_rate_max">
                                    </div>


                                    <div class="col-3 display-inline">
                                        <div class="radioDiv required">
                                            <label><input type="radio" name="rate_type" value="Y" onclick="orderProcRateCalc()" />무게수율  </label>
                                            <label><input type="radio" name="rate_type" value="N" onclick="orderProcRateCalc()" />수량수율 </label>
                                        </div>
                                    </div>

                                </div>

                                <div class="input-wrapper display-none" id="packingInfoDiv">

                                    <label class="col-2">시험검체수량</label>
                                    <div class="input-group col-1">
                                        <input type="number" class="form-control" name="test_sample_qty">
                                    </div>

                                    <label class="col-1">실입고생산량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="receipt_qty">
                                    </div>

                                    <label class="col-2">업체샘플수량</label>
                                    <div class="input-group col-1">
                                        <input type="number" class="form-control" name="customer_sample_qty">
                                    </div>

                                </div>

                            </div>

                        </form>

                    </div>
                }

                @using (Html.DevExtreme().NamedTemplate("OrderProcResultTabContent2"))
                {

                    <div id="OrderProcResultTab2" class="menuDiv">

                        <form style="display: flex;">

                            <div class="col-5">

                                <div class="input-wrapper">

                                    <label class="col-2">제조일자</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12 datepicker" name="start_date" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">의뢰일자</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12 datepicker" name="request_date" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">통보요망일</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12 datepicker" name="result_hope_date" />
                                    </div>

                                </div>

                            </div>

                            <div class="col-5">

                                <div class="input-wrapper">

                                    <label class="col-2">의뢰량</label>
                                    <div class="input-group col-3">
                                        <input type="number" class="form-control col-12" name="start_qty" readonly="readonly" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">시험의뢰번호</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12" name="testrequest_no" readonly="readonly" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-2">의뢰자</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12" name="request_emp_cd" readonly="readonly" />
                                        <div class="input-group-append">
                                            <button class="btn btn-outline-secondary" type="button" @*onclick="OrderProcResultSelectEmp()"*@>
                                                <i class="fa fa-search"></i>
                                            </button>
                                        </div>
                                    </div>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12" name="emp_nm" readonly="readonly" />
                                    </div>
                                    <input type="text" class="form-control col-3" readonly="readonly" name="item_form_cd" hidden="hidden" />

                                </div>

                            </div>

                        </form>

                    </div>
                }

                @using (Html.DevExtreme().NamedTemplate("OrderProcResultTabContent3"))
                {
                    <div id="OrderProcResultTab3" class="menuDiv">

                        @(Html.DevExtreme().DataGrid()
                            .ID("OrderProcResultWorkerGrid")
                            .KeyExpr(OrderProcResultEmpGridKey)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .Height(275)
                            .Columns(columns => {

                                columns.Add()
                                    .DataField("order_proc_sdate")
                                    .Caption("작업시작일자")
                                    .DataType(GridColumnDataType.Date);

                                columns.Add()
                                    .DataField("order_proc_stime")
                                    .Caption("시작시간")
                                    .AllowFiltering(false)
                                    .DataType(GridColumnDataType.DateTime)
                                    .Format("HH:mm")
                                    .EditorOptions(new
                                    {
                                        displayFormat = "ShortTime",
                                        type = "time"
                                    }).Format(Format.ShortTime);

                                columns.Add()
                                    .DataField("order_proc_edate")
                                    .Caption("작업종료")
                                    .DataType(GridColumnDataType.Date);

                                columns.Add()
                                    .DataField("order_proc_etime")
                                    .Caption("종료시간")
                                    .AllowFiltering(false)
                                    .DataType(GridColumnDataType.DateTime)
                                    .EditorOptions(new
                                    {
                                        displayFormat = "ShortTime",
                                        type = "time"
                                    }).Format(Format.ShortTime);

                                columns.Add()
                                    .DataField("worker_cnt")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("인원");

                                columns.Add().Lookup(lookup => lookup
                                    .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드"
                                        ,
                                        pDiv = "P"
                                        ,
                                        pStrWhere = "WIP001"
                                        ,
                                        pTableName = "unit"
                                    }
                                    ).Key("keyfield"))
                                    .ValueExpr("keyfield")
                                    .DisplayExpr("displayfield")
                                    ).DataField("order_gubun")
                                    .Caption("실적구분")
                                    .DataType(GridColumnDataType.String);

                                columns.Add()
                                    .DataField("total_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("전산시간(분)");

                                columns.Add()
                                    .DataField("normal_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("정상근무(분)");

                                columns.Add()
                                    .DataField("added_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("연장근무(분)");

                                columns.Add()
                                    .DataField("night_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("철야근무(분)");

                                columns.Add()
                                    .DataField("special_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("특근(분)");

                                columns.Add()
                                    .DataField("ew_cd")
                                    .Caption("작업자사번")
                                    .CellTemplate(new JS("OrderProcResultCellWithButton"));

                                columns.Add()
                                    .DataField("ew_nm")
                                    .Caption("작업자명");

                            })
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .ColumnAutoWidth(true)
                            .OnToolbarPreparing("orderProcResultHideSaveBtn")
                            .OnRowInserted("OrderProcResultWorkerInsert")
                            .OnRowUpdated("OrderProcResultWorkerUpdate")
                            .OnRowRemoved("OrderProcResultWorkerDelete")
                            .OnCellClick("OrderProcResultEmpGridPopup")
                            .OnInitNewRow("OrderProcResultSetWorkTime")
                            .OnEditorPrepared("OrderProcResultCalcTotalTime")
                            .FocusedRowEnabled(true)
                        )

                    </div>
                }

                @using (Html.DevExtreme().NamedTemplate("OrderProcResultTabContent4"))
                {
                    <div id="OrderProcResultTab4" class="menuDiv">

                        @(Html.DevExtreme().DataGrid()
                            .ID("OrderProcResultEquipmentGrid")
                            .KeyExpr(OrderProcResultEquipGridKey)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .Height(275)
                            .Columns(columns => {

                                columns.Add()
                                    .DataField("order_proc_sdate")
                                    .Caption("작업시작일자")
                                    .DataType(GridColumnDataType.Date);

                                columns.Add()
                                    .DataField("order_proc_stime")
                                    .Caption("시작시간")
                                    .AllowFiltering(false)
                                    .DataType(GridColumnDataType.DateTime)
                                    .Format("HH:mm")
                                    .EditorOptions(new
                                    {
                                        displayFormat = "ShortTime",
                                        type = "time"
                                    }).Format(Format.ShortTime);

                                columns.Add()
                                    .DataField("order_proc_edate")
                                    .Caption("작업종료")
                                    .DataType(GridColumnDataType.Date);

                                columns.Add()
                                    .DataField("order_proc_etime")
                                    .Caption("종료시간")
                                    .AllowFiltering(false)
                                    .DataType(GridColumnDataType.DateTime)
                                    .EditorOptions(new
                                    {
                                        displayFormat = "ShortTime",
                                        type = "time"
                                    }).Format(Format.ShortTime);

                                columns.Add().Lookup(lookup => lookup
                                    .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드"
                                        ,
                                        pDiv = "P"
                                        ,
                                        pStrWhere = "WIP001"
                                        ,
                                        pTableName = "unit"
                                    }
                                    ).Key("keyfield"))
                                    .ValueExpr("keyfield")
                                    .DisplayExpr("displayfield")
                                    ).DataField("order_gubun")
                                    .Caption("실적구분")
                                    .DataType(GridColumnDataType.String);

                                columns.Add()
                                    .DataField("total_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("전산시간(분)");

                                columns.Add()
                                    .DataField("normal_time")
                                    .DataType(GridColumnDataType.Number)
                                    .Caption("가동시간(분)");

                                columns.Add()
                                    .DataField("ew_cd")
                                    .Caption("설비코드")
                                    .CellTemplate(new JS("OrderProcResultCellWithButton"));

                                columns.Add()
                                    .DataField("ew_nm")
                                    .Caption("설비명");

                            })
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .ColumnAutoWidth(true)
                            .OnToolbarPreparing("orderProcResultHideSaveBtn")
                            .OnRowInserted("OrderProcResultEquipInsert")
                            .OnRowUpdated("OrderProcResultEquipUpdate")
                            .OnRowRemoved("OrderProcResultEquipDelete")
                            .OnCellClick("OrderProcResultEquipGridPopup")
                            .OnInitNewRow("OrderProcResultSetWorkTime")
                            .OnEditorPrepared("OrderProcResultCalcTotalTime")
                            .FocusedRowEnabled(true)
                        )

                    </div>
                }

                @using (Html.DevExtreme().NamedTemplate("OrderProcResultTabContent5"))
                {
                    <div id="OrderProcResultTab5" class="menuDiv">

                        <div class="input-wrapper" style="margin-left: 15px;">
                            <button type="button" class="btn btn-secondary btn-sm" onclick="OrderProcResultPrint()">자재기록서출력</button>
                            <input type="number" class="form-control col-3" name="packing_result" />
                            <button type="button" class="btn btn-secondary btn-sm" onclick="OrderProcResultCalcUsage()">사용량자동계산</button>
                        </div>

                        @(Html.DevExtreme().DataGrid()
                            .ID("OrderProcResultMaterialGrid")
                            .KeyExpr("material_item_cd")
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                            .Height(250)
                            .Columns(columns => {

                                columns.Add()
                                    .DataField("material_item_cd")
                                    .Caption("자재코드");

                                columns.Add()
                                    .DataField("material_item_nm")
                                    .Caption("자재명");

                                columns.Add()
                                    .DataField("test_no")
                                    .Caption("시험번호");

                                columns.Add()
                                    .DataField("item_bom_batch_unit")
                                    .Caption("단위");

                                columns.Add()
                                    .DataField("item_bom_standard_qty")
                                    .Caption("지시량")
                                    .DataType(GridColumnDataType.Number);

                                columns.Add()
                                    .DataField("use_qty")
                                    .Caption("불출")
                                    .DataType(GridColumnDataType.Number);

                                columns.Add()
                                    .DataField("Add_Pack")
                                    .Caption("추가")
                                    .DataType(GridColumnDataType.Number)
                                    .CellTemplate(new JS("OrderProcResultCellWithButton"));

                                columns.Add()
                                    .DataField("material_use_qty")
                                    .Caption("사용량")
                                    .DataType(GridColumnDataType.Number);

                                columns.Add()
                                    .DataField("disuse_qty")
                                    .Caption("폐기")
                                    .DataType(GridColumnDataType.Number);

                                columns.Add()
                                    .DataField("Return_Pack")
                                    .Caption("반납")
                                    .DataType(GridColumnDataType.Number)
                                    .CellTemplate(new JS("OrderProcResultCellWithButton"));

                                columns.Add()
                                    .DataField("issue_emp_nm")
                                    .Caption("불출작업자");

                                columns.Add()
                                    .DataField("receive_emp_nm")
                                    .Caption("불출확인자");

                                columns.Add()
                                    .DataField("add_issue_emp_nm")
                                    .Caption("추가불출작업자");

                                columns.Add()
                                    .DataField("add_receive_emp_nm")
                                    .Caption("추가불출확인자");

                                columns.Add()
                                    .DataField("return_issue_emp_nm")
                                    .Caption("반납작업자");

                                columns.Add()
                                    .DataField("return_receive_emp_nm")
                                    .Caption("반납확인자");


                            })
                            .ShowRowLines(true)
                            .ShowBorders(true)
                            .ColumnAutoWidth(true)
                            .OnToolbarPreparing("OrderProcResultHideToolbar")
                            .OnCellPrepared("OrderProcResultEditableColumn")
                            .OnRowUpdated("OrderProcResultMaterialUpdate")
                            .OnCellClick("OrderProcResultAddPackGridPopup")
                            .FocusedRowEnabled(true)
                        )

                    </div>
                }

                @using (Html.DevExtreme().NamedTemplate("OrderProcResultTabContent6"))
                {
                    <div id="OrderProcResultTab6" class="menuDiv" style="display: flex;">

                        <div class="col-8" style="padding: 0px;">

                            @(Html.DevExtreme().DataGrid()
                                .ID("OrderProcResultPackingGrid")
                                .KeyExpr("testrequest_no")
                                .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                                .Height(275)
                                .Columns(columns => {

                                    columns.Add()
                                        .DataField("gubun")
                                        .Caption("구분");

                                    columns.Add()
                                        .DataField("packing_date")
                                        .DataType(GridColumnDataType.DateTime)
                                        .Format("yyyy-MM-dd HH:mm")
                                        .Caption("포장일자");

                                    columns.Add()
                                        .DataField("packing_qty")
                                        .Caption("총생산량(EA)");

                                    columns.Add()
                                        .DataField("remain_qty")
                                        .Caption("잔량");

                                    columns.Add()
                                        .DataField("disuse_qty")
                                        .Caption("폐기량");

                                    columns.Add()
                                        .DataField("result_emp_nm")
                                        .Caption("작업자");

                                    columns.Add()
                                        .DataField("TEST_STATUS_NM")
                                        .Caption("시험상태");

                                    columns.Add()
                                        .DataField("testrequest_no")
                                        .Caption("의뢰번호");

                                    columns.Add()
                                        .DataField("request_date")
                                        .DataType(GridColumnDataType.DateTime)
                                        .Format("yyyy-MM-dd HH:mm")
                                        .Caption("시험의뢰일자");

                                })
                                .ShowRowLines(true)
                                .ShowBorders(true)
                                .ColumnAutoWidth(true)
                                .FocusedRowEnabled(true)
                                .FocusedRowIndex(0)
                            )

                        </div>

                        <div class="col-4">

                            <form>

                                <div class="input-wrapper">

                                    <label class="col-3">포장일자</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12 datepicker" name="packing_date" />
                                    </div>

                                    <label class="col-3">제조일자</label>
                                    <div class="input-group col-2">
                                        <input type="text" class="form-control col-12 datepicker" name="lot_date" />
                                    </div>

                                </div>


                                <div class="input-wrapper">

                                    <label class="col-3">제조지시수량</label>
                                    <div class="input-group col-3">
                                        <input type="number" class="form-control col-12" name="receive_qty" />
                                    </div>

                                    <label class="col-3">유효기간</label>
                                    <div class="input-group col-2">
                                        <input type="text" class="form-control col-12" name="end_date" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-3">반제품생산수량</label>
                                    <div class="input-group col-3">
                                        <input type="number" class="form-control col-12" name="bulk_use_qty" />
                                    </div>

                                    <label class="col-3">잔량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control col-12" name="remain_qty" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-3">총생산량(EA)</label>
                                    <div class="input-group col-3">
                                        <input type="number" class="form-control col-12" name="receipt_qty" />
                                    </div>

                                    <label class="col-3">시험검체수량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control" name="test_sample_qty">
                                        @*<input type="number" class="form-control" name="test_deposit_qty">*@
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-3">실입고생산량</label>
                                    <div class="input-group col-3">
                                        <input type="number" class="form-control col-12" name="receipt_qty" />
                                    </div>

                                    <label class="col-3">업체샘플수량</label>
                                    <div class="input-group col-2">
                                        <input type="number" class="form-control col-12" name="customer_sample_qty" />
                                    </div>

                                </div>

                                <div class="input-wrapper">

                                    <label class="col-3">작업자</label>
                                    <div class="input-group col-3">
                                        <input type="text" class="form-control col-12" name="result_emp_cd" />
                                    </div>
                                    <div class="input-group col-5">
                                        <input type="text" class="form-control col-12" name="result_emp_nm" />
                                    </div>

                                </div>

                            </form>

                        </div>

                    </div>
                }

            </div>

        </div>

    </div>

</div>