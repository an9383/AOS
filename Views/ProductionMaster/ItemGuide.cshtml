@*제조관리 / 제조 마스터 / 제제표준서 마스터 관리*@
@using System.Data;
@using HACCP.Libs;
@using HACCP.Libs.Views;

@{
    Layout = null;
    ViewData["Title"] = "ItemGuide";

    var pagePrefix = ViewContext.RouteData.Values["action"].ToString();
    var pageControllerNm = ViewContext.RouteData.Values["controller"].ToString();

    var itemJson = @Html.Raw(Json.Encode(ViewBag.items.Data));
    var materialJson = @Html.Raw(Json.Encode(ViewBag.materials.Data));
    var workroom1Json = @Html.Raw(Json.Encode(ViewBag.workrooms1.Data));
    var workroom2Json = @Html.Raw(Json.Encode(ViewBag.workrooms2.Data));
    var equipJson = @Html.Raw(Json.Encode(ViewBag.equip.Data));
    var ccpJson = @Html.Raw(Json.Encode(ViewBag.ccp.Data));
    var ItemProcess = Html.Raw(Json.Encode(ViewBag.ItemProcess.Data));
    var ItemProcessDetail = Html.Raw(Json.Encode(ViewBag.ItemProcessDetail.Data));

    var itemUnit = Html.Raw(Json.Encode(ViewBag.itemUnit.Data));
    var itemBomRounding = Html.Raw(Json.Encode(ViewBag.itemBomRounding.Data));
    var trade = Html.Raw(Json.Encode(ViewBag.trade.Data));
    var itemBomLastType = Html.Raw(Json.Encode(ViewBag.itemBomLastType.Data));
    var itemBomCalcType = Html.Raw(Json.Encode(ViewBag.itemBomCalcType.Data));
}


<script id="ItemGuideJs">

    var _sign_cnt = 0;
    var _pState = "";
    var _cellClickEvent;
    var _isEditable = false;
    var _isEdited = false;
    var _signGubun = "";
    var _itemGuideSignData;
    var _prescriptionDataGridSeq = 0;
    var editSaveCheck = true;

    $(function () {

        ItemGudie_ContentResize();

        var ds = @itemJson;
        var ds2 = @materialJson;
        var ds3 = @workroom1Json;
        var ds4 = @workroom2Json;
        var ds5 = @equipJson;
        var ds6 = @ccpJson;

        $("#standardProcessDataGrid").dxDataGrid("option", "dataSource", JSON.parse(@ItemProcess));
        $("#detailProcessDataGrid").dxDataGrid("option", "dataSource", JSON.parse(@ItemProcessDetail));


        ItemGuide_TreeListTransferChagne();

        var columns = [
            { dataField: "item_cd", caption: "품목코드" },
            { dataField: "item_nm", caption: "품목명" }
        ];

        var columns2 = [
            { dataField: "item_cd", caption: "품목코드" },
            { dataField: "item_nm", caption: "품목명" },
            { dataField: "trade_nm", caption: "공급처" },
            { dataField: "item_type3_nm", caption: "원료구분" }
        ];

        var columns3 = [
            { dataField: "workroom_cd", caption: "작업실코드" },
            { dataField: "workroom_nm", caption: "작업실명" },
            { dataField: "common_part_nm", caption: "팀구분" }
        ];

        var columns4 = [
            { dataField: "equip_cd", caption: "설비코드" },
            { dataField: "equip_nm", caption: "설비명" }
        ];

        var columns5 = [
            { dataField: "ccp_cd", caption: "ccp코드" },
            { dataField: "ccp_nm", caption: "ccp명" },
            { dataField: "ccp_description", caption: "ccp종류" }
        ]

        createPopup("ItemGuideItem", "품목조회", ds, columns, "item_cd");
        createPopup("ItemGuideItem2", "품목조회", ds, columns, "item_cd");
        createPopup("ItemGuideItem3", "품목조회", ds, columns, "item_cd");
        createPopup("ItemGuideItem4", "품목조회", ds, columns, "item_cd");

        createPopup("ItemGuideMaterial", "원료조회", ds2, columns2, "item_cd");
        createPopup("ItemGuideMaterial2", "원료조회", ds2, columns2, "item_cd");

        createPopup("ItemGuideWorkRoom1", "작업실조회", ds3, columns3, "workroom_cd");
        createPopup("ItemGuideWorkRoom2", "작업실조회", ds4, columns3, "workroom_cd");

        createPopup("ItemGuideEquip", "설비조회", ds5, columns4, "equip_cd");

        createPopup("ItemGuideCcp", "ccp조회", ds6, columns5, "ccp_cd");

        $("#itemRevisionInfoDiv input").prop("disabled", true);
        $("#itemRevisionInfoDiv textarea").prop("disabled", true);

        setDatePicker("#ItemGuide .datepicker");

        itemGuideEditing(false);

    });


    function itemGuideEditing(isEditing) {

        if (isEditing) {
            $("#ItemGuideInput").dxButton().parent().parent().addClass("display-none");
            $("#ItemGuideEdit").dxButton().parent().parent().addClass("display-none");
            $("#ItemGuideDelete").dxButton().parent().parent().addClass("display-none");
            $("#ItemGuideSearch").dxButton().parent().parent().addClass("display-none");
            $("#ItemGuideSave").dxButton().parent().parent().removeClass("display-none");
            $("#ItemGuideUndo").dxButton().parent().parent().removeClass("display-none");

            $("#ItemGuide_Form input").prop("readonly", true);
            $("#ItemGuide_Form button").prop("disabled", true);
            $("#ItemGuide_Form select").readonly();

            $("#itemProcessDiv div.align-end-only button").prop("disabled", true);

        } else {
            $("#ItemGuideInput").dxButton().parent().parent().removeClass("display-none");
            $("#ItemGuideEdit").dxButton().parent().parent().removeClass("display-none");
            $("#ItemGuideDelete").dxButton().parent().parent().removeClass("display-none");
            $("#ItemGuideSearch").dxButton().parent().parent().removeClass("display-none");
            $("#ItemGuideSave").dxButton().parent().parent().addClass("display-none");
            $("#ItemGuideUndo").dxButton().parent().parent().addClass("display-none");

            $("#ItemGuide_Form input").prop("readonly", false);
            $("#ItemGuide_Form button").prop("disabled", false);
            $("#ItemGuide_Form select").readonly(false);

            $("#itemProcessDiv div.align-end-only button").prop("disabled", false);

            _ItemGuideLookupValChanged = false;
        }

    }

    // 제품 팝업
    function ItemGuideSearchItem() {

        var popup = $("#ItemGuideItemPopup").dxPopup("instance");

        popup.show();
    }

    // 제품 팝업 데이터로우 더블클릭
    async function ItemGuideItemRowDblClick(selectedItems)
    {
        DevExpress.ui.notify({ message: "자료 조회 중입니다. 잠시만 기다려주세요.", height: "120", position: "top center" }, "info", 600);

        $("#ItemGuideItemCode").val(selectedItems.values[0]);
        $("#ItemGuideItemName").val(selectedItems.values[1]);

        await ItemGuideSelectBatchSize(selectedItems.values[0]);

        if ($("#ItemGuideQuantity option").length > 1) {
            if (selectedItems.data.batchsize) {
                var batchSize = Math.floor(selectedItems.data.batchsize);


                var targetVal = $('#ItemGuideQuantity option:contains(' + numberWithCommas(batchSize) + ')').val();

                $('#ItemGuideQuantity').val(targetVal);

            } else {

                $("#ItemGuideQuantity option:eq(1)").prop("selected", true);
            }

        } else {
            $("#ItemGuideQuantity option:eq(0)").prop("selected", true);
        }

        GetRevisionNumber(selectedItems);

        GetItemDetail();

        var popup = $("#ItemGuideItemPopup").dxPopup("instance");

        popup.hide();
    }

    // 배치사이즈 셀렉트박스 옵션 조회
    function ItemGuideSelectBatchSize(data) {

        $.ajax({
            type: 'POST',
            url: '/Comm/GetSelectBoxOption',
            async: false,
            data: {
                pGb: "배치사이즈",
                pDiv: "S",
                pItemCd: data,
                pTableName: "ItemGuideQuantity"
            },
            success: function (result) {

                $("#ItemGuideQuantity").empty();
                $("#ItemGuideQuantity").append(result);
            }
        });
    }

    function numberWithCommas(x) {
        return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    }


    // 제품 팝업2
    function SearchItem2() {

        var popup = $("#ItemGuideItem2Popup").dxPopup("instance");

        popup.show();
    }


    // 제품 팝업3
    function SearchItem3() {

        var popup = $("#ItemGuideItem3Popup").dxPopup("instance");

        popup.show();
    }


    // 제품 팝업4
    function SearchItem4() {

        var popup = $("#ItemGuideItem4Popup").dxPopup("instance");

        popup.show();
    }


    // 제품 팝업2 데이터로우 더블클릭
    function ItemGuideItem2RowDblClick(selectedItems) {

        $("#ItemGuideItemCode2").val(selectedItems.values[0]);
        $("#ItemGuideItemName2").val(selectedItems.values[1]);

        $.ajax({
            type: 'POST',
            url: '/Comm/GetSelectBoxOption',
            data: {
                pGb: "배치사이즈3",
                pDiv: "D",
                pItemCd: selectedItems.values[0],
                pTableName: "ItemGuideQuantity"
            },
            success: function (result) {

                $("#ItemGuideQuantity2").empty();
                $("#ItemGuideQuantity2").append(result);

                if ($("#ItemGuideQuantity2 option").length > 1) {
                    $("#ItemGuideQuantity2 option:eq(1)").prop("selected", true);
                } else {
                    $("#ItemGuideQuantity2 option:eq(0)").prop("selected", true);
                }

                GetRevisionNumber2();
            }
        });

        var popup = $("#ItemGuideItem2Popup").dxPopup("instance");

        popup.hide();
    }


    // 제품 팝업3 데이터로우 더블클릭
    function ItemGuideItem3RowDblClick(selectedItems) {

        $("#ItemGuideItemCode3").val(selectedItems.values[0]);
        $("#ItemGuideItemName3").val(selectedItems.values[1]);

        var popup = $("#ItemGuideItem3Popup").dxPopup("instance");
        popup.hide();
        }


    // 제품 팝업4 데이터로우 더블클릭
    function ItemGuideItem4RowDblClick(selectedItems) {

        $("#ItemGuideItemCode4").val(selectedItems.values[0]);
        $("#ItemGuideItemName4").val(selectedItems.values[1]);

        $.ajax({
            type: 'POST',
            url: '/Comm/GetSelectBoxOption',
            data: {
                pGb: "배치사이즈3",
                pDiv: "D",
                pItemCd: selectedItems.values[0],
                pTableName: "ItemGuideQuantity"
            },
            success: function (result) {

                $("#ItemGuideQuantity4").empty();
                $("#ItemGuideQuantity4").append(result);

                if ($("#ItemGuideQuantity4 option").length > 1) {
                    $("#ItemGuideQuantity4 option:eq(1)").prop("selected", true);
                } else {
                    $("#ItemGuideQuantity4 option:eq(0)").prop("selected", true);
                }

                GetRevisionNumber4();
            }
        });

        var popup = $("#ItemGuideItem4Popup").dxPopup("instance");
        popup.hide();
    }


    // 제품 팝업 개정번호 가져오는 함수
    function GetRevisionNumber(selectedItems) {

        var strWhere2;

        if ($("#ItemGuideQuantity").val() == "NEW") {
            strWhere2 = "";
        } else {
            strWhere2 = $("#ItemGuideQuantity").val();
        }

        ItemGuideResetInfoForm();

        $.ajax({
            type: 'POST',
            url: '/Comm/GetSelectBoxOption',
            data: {
                pGb: "제조개정번호",
                pDiv: "S",
                pItemCd: $("#ItemGuideItemCode").val(),
                pStrWhere2: strWhere2,
                pTableName: "ItemGuideQuantity"
            },
            async: false,
            success: function (result) {
                $("#ItemGuideRevisionNo").empty();
                $("#ItemGuideRevisionNo").append(result);

                if ($("#ItemGuideRevisionNo option").length > 1) {

                    if (!selectedItems) {
                        $("#ItemGuideRevisionNo option:eq(1)").prop("selected", true);
                    } else if (selectedItems.data.revision_no) {
                        $("#ItemGuideRevisionNo").val(selectedItems.data.revision_no)
                    } else {
                        $("#ItemGuideRevisionNo option:eq(1)").prop("selected", true);
                    }
                } else {
                    $("#ItemGuideRevisionNo option:eq(0)").prop("selected", true);
                }
            }
        });
    }


    function ItemGuideSelectRevisionNum() {
        GetRevisionNumber();
        GetItemDetail();
    }

    // 제품 팝업2 개정번호 가져오는 함수
    function GetRevisionNumber2() {

        var strWhere2 = $("#ItemGuideQuantity2").val();

        $.ajax({
            type: 'POST',
            url: '/Comm/GetSelectBoxOption',
            data: {
                pGb: "개정번호3",
                pDiv: "D",
                pItemCd: $("#ItemGuideItemCode2").val(),
                pStrWhere2: strWhere2,
                pTableName: "ItemGuideQuantity"
            },
            success: function (result) {

                $("#ItemGuideRevisionNo2").empty();
                $("#ItemGuideRevisionNo2").append(result);

                if ($("#ItemGuideRevisionNo2 option").length > 0) {
                    $("#ItemGuideRevisionNo2 option:eq(1)").prop("selected", true);
                } else {
                    $("#ItemGuideRevisionNo2 option:eq(0)").prop("selected", true);
                }
            }
        });
    }

    // 제품 팝업4 개정번호 가져오는 함수
    function GetRevisionNumber4() {

        var strWhere2 = $("#ItemGuideQuantity4").val();
        if (strWhere2 == null) return;

        $.ajax({
            type: 'POST',
            url: '/Comm/GetSelectBoxOption',
            data: {
                pGb: "개정번호3",
                pDiv: "D",
                pItemCd: $("#ItemGuideItemCode4").val(),
                pStrWhere2: strWhere2,
                pTableName: "ItemGuideQuantity"
            },
            success: function (result) {

                $("#ItemGuideRevisionNo4").empty();
                $("#ItemGuideRevisionNo4").append(result);

                if ($("#ItemGuideRevisionNo4 option").length > 0) {
                    $("#ItemGuideRevisionNo4 option:eq(1)").prop("selected", true);
                } else {
                    $("#ItemGuideRevisionNo4 option:eq(0)").prop("selected", true);
                }
            }
        });
    }

    // 해당 개정번호의 공정 상세정보 가져오기
    async function GetItemDetail() {

        var indexInfo = new Object();;
        if (arguments.length > 0) {
            indexInfo = arguments[0];
        }

        await clear();

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetItemInfo',
            data: {
                pSpName: "SP_StandardItemGuide",
                pGubun: "S5",
                pItemCd: $("#ItemGuideItemCode").val(),
                pBatchSize: $("#ItemGuideQuantity").val(),
                pRevisionNo: $("#ItemGuideRevisionNo").val()
            },
            async: false,
            success: function (result) {
                var jsonData = new Array();

                for (let i = 0; i < result.length; i++) {

                    if (result[i] != "" && result[i] != null) {
                        jsonData[i] = JSON.parse(result[i]);

                    }
                    else {
                        jsonData[i] = result[i];
                    }
                }

                $("#ItemGuide input[name=revision_num]").val(jsonData[0].revision_num);
                $("#ItemGuide input[name=revision_use_date]").val(jsonData[0].revision_use_date);
                $("#ItemGuide input[name=revision_special_mention]").val(jsonData[0].revision_special_mention);
                $("#ItemGuide textarea[name=revision_remark]").text(jsonData[0].revision_remark);

                $("#ItemGuide input[name=mbr_type]").val(jsonData[0].mbr_type);
                $("#ItemGuide input[name=export_words]").val(jsonData[0].export_words);
                $("#ItemGuide input[name=batch_weight]").val(jsonData[0].batch_weight);
                $("#ItemGuide input[name=batch_size_sub]").val(jsonData[0].batch_size_sub);
                $("#ItemGuide input[name=permit_standard_qty]").val(jsonData[0].permit_standard_qty);
                $("#ItemGuide input[name=permit_standard_qty_unit]").val(jsonData[0].permit_standard_qty_unit);
                $("#ItemGuide input[name=t_making_dept_cd]").val(jsonData[0].t_making_dept_cd);
                $("#ItemGuide input[name=t_making_dept_cd2]").val(jsonData[0].t_making_dept_cd2);


                if (jsonData[0].revision_current_ck === "Y") {
                    $("#ItemGuide input[name=revision_current_ck]").prop("checked", true);
                } else {
                    $("#ItemGuide input[name=revision_current_ck]").prop("checked", false);
                }

                if (jsonData[0].revision_sign_end_ck === "Y") {
                    $("#ItemGuide input[name=revision_sign_end_ck]").prop("checked", true);
                } else {
                    $("#ItemGuide input[name=revision_sign_end_ck]").prop("checked", false);
                }

                _sign_cnt = 0;

                $.each(jsonData[1], function () {
                    _sign_cnt += Number(this.sign_yn);
                });

                $("#itemGuideSignTable").dxDataGrid("option", "dataSource", jsonData[1]);


                var tmp = "[";

                if (jsonData[2].length < 1) {
                    $("#itemProcessGrid").dxTreeList("option", "dataSource", []);

                } else {
                    $("#itemProcessGrid").dxTreeList("option", "dataSource", jsonData[2]);
                    $("#itemProcessGrid").dxTreeList("option", "focusedRowEnabled", true);

                    if (typeof indexInfo.itemProcessGridIndex == "undefined") {
                        $("#itemProcessGrid").dxTreeList("option", "focusedRowIndex", -1);
                    } else {

                        $("#itemProcessGrid").dxTreeList("option", "focusedRowIndex", 0);
                    }

                    ItemGuideTreeListAllExpand();

                    $.each(jsonData[2], function (idx, row) {
                        if (jsonData[2][idx].level == 2) {
                            tmp += JSON.stringify(jsonData[2][idx]);
                            tmp += ",";
                        }
                    })
                    tmp = tmp.slice(0, -1);
                }

                tmp += "]";

                var batch_size_unit = "";

                $.each(jsonData[3], function (idx, row) {

                    if ($("#ItemGuide #ItemGuideRevisionNo").val() == jsonData[3][idx].revision_no) {
                        batch_size_unit = jsonData[3][idx].batch_size_unit;
                    }
                })

                $("#ItemGuide select[name=batch_size_unit]").val("");
                $("#ItemGuide select[name=batch_size_unit]").val(batch_size_unit);

                if (result[4]) {

                    $("#itemPrescriptionDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result[4]));
                    $("#itemPrescriptionDataGrid").dxDataGrid("option", "focusedRowEnabled", true);
                    $("#itemPrescriptionDataGrid").dxDataGrid("option", "focusedRowIndex", 0);
                }

                $.ajax({
                    type: 'POST',
                    url: '/ProductionMaster/GetItemProcess',
                    data: {
                        pSpName: "SP_StandardItemGuide",
                        pGubun: "S10",
                        pItemCd: $("#ItemGuideItemCode").val()
                    },
                    async: false,
                    success: function (result) {
                        $("#standardProcessDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result[0]));

                        $("#detailProcessDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result[1]));
                        $("#detailProcessDataGrid").dxDataGrid("option", "focusedRowEnabled", true);
                        $("#detailProcessDataGrid").dxDataGrid("option", "focusedRowIndex", 0);



                        var columns1 = [
                            { dataField: "process_cd", caption: "공정코드" },
                            { dataField: "fieldname", caption: "공정명" }
                        ];

                        createPopup("ItemGuideProcess", "공정조회", tmp, columns1);
                        createPopup("ItemGuideProcess2", "공정조회", tmp, columns1);

                    }
                });

            }
        });
    }


    function ItemGuideTreeListAllExpand() {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");
        var data = treeList.option("dataSource");

        for (var i = 0; i < data.length; i++) {
            if (data[i].level == "1") {
                treeList.expandRow(data[i].mykey);
            }
        }
    }


    // 하단 내용 지우기
    function clear() {

        $("#itemRevisionInfoDiv input").val("");
        $("#itemRevisionInfoDiv textarea").text("");

        //$("#itemGuideSignTable").dxDataGrid("option", "dataSource", []);

        //$("#itemProcessGrid").dxTreeList("option", "dataSource", []);
        //$("#itemPrescriptionDataGrid").dxDataGrid("option", "dataSource", []);

        //$("#detailProcessDataGrid").dxDataGrid("instance").clearFilter();

        //$("#itemProcessExamDataGrid").dxDataGrid("option", "dataSource", []);


        $("#itemGuideSignTable").dxDataGrid("instance").option("dataSource", []);
        $("#itemGuideSignTable").dxDataGrid("instance").option("focusedRowIndex", 0);
        $("#itemGuideSignTable").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#itemGuideSignTable").dxDataGrid("instance").option("focusedRowKey", "");

        $("#itemProcessGrid").dxTreeList("instance").option("dataSource", []);
        $("#itemProcessGrid").dxTreeList("instance").option("focusedRowIndex", 0);
        $("#itemProcessGrid").dxTreeList("instance").option("focusedRowEnabled", false);
        $("#itemProcessGrid").dxTreeList("instance").option("focusedRowKey", "");

        $("#itemPrescriptionDataGrid").dxDataGrid("instance").option("dataSource", []);
        $("#itemPrescriptionDataGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
        $("#itemPrescriptionDataGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#itemPrescriptionDataGrid").dxDataGrid("instance").option("focusedRowKey", "");

        $("#detailProcessDataGrid").dxDataGrid("instance").clearFilter();
        $("#detailProcessDataGrid").dxDataGrid("instance").option("dataSource", []);
        $("#detailProcessDataGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
        $("#detailProcessDataGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#detailProcessDataGrid").dxDataGrid("instance").option("focusedRowKey", "");

        $("#itemProcessExamDataGrid").dxDataGrid("instance").option("dataSource", []);
        $("#itemProcessExamDataGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
        $("#itemProcessExamDataGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#itemProcessExamDataGrid").dxDataGrid("instance").option("focusedRowKey", "");

        $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("dataSource", []);
        $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
        $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
        $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("focusedRowKey", "");

    }

    // 제/개정 정보 버튼 클릭
    function revisionInfoToggle() {
        var isVisible = $("#itemRevisionInfoDiv").hasClass("display-none");

        if (isVisible) {
            $("#itemRevisionInfoDiv").removeClass("display-none");
        } else {
            $("#itemRevisionInfoDiv").addClass("display-none");
        }

        ItemGudie_ContentResize();
    }

    // 공정조정 버튼 클릭
    function itemProcessToggle() {

        var isCollapsed = $("#itemProcessDiv").hasClass("col-3");

        $("#itemPrescriptionToggle").prop("checked", false);
        $("#itemProcessExamToggle").prop("checked", false);
        $("#itemWorkGuideToggle").prop("checked", false);

        var columns;

        if (isCollapsed) {

            if ($("#itemProcessDetailDiv").hasClass("display-none")) {

                $("#itemProcessDetailDiv").removeClass("display-none");

                $("#itemPrescriptionDiv").addClass("display-none");
                $("#itemProcExamDiv").addClass("display-none");
                $("#itemWorkGuideDiv").addClass("display-none");

                return;
            }

            ItemGuideProcessTreelistColapse(true);

            $("#itemProcessDetailDiv").addClass("display-none");

            $("#itemPrescriptionDiv").addClass("display-none");
            $("#itemProcExamDiv").addClass("display-none");
            $("#itemWorkGuideDiv").addClass("display-none");

        } else {

            ItemGuideProcessTreelistColapse(false);

            $("#itemProcessDetailDiv").removeClass("display-none");

            $("#itemPrescriptionDiv").addClass("display-none");
            $("#itemProcExamDiv").addClass("display-none");
            $("#itemWorkGuideDiv").addClass("display-none");
        }
    }

    // 처방전 정보 버튼ItemGuideProcess2
    function itemPrescriptionToggle() {
        var isCollapsed = $("#itemProcessDiv").hasClass("col-3");

        $("#itemProcessToggle").prop("checked", false);
        $("#itemProcessExamToggle").prop("checked", false);
        $("#itemWorkGuideToggle").prop("checked", false);

        var columns;

        if (isCollapsed) {

            if ($("#itemPrescriptionDiv").hasClass("display-none")) {

                $("#itemPrescriptionDiv").removeClass("display-none");

                $("#itemProcessDetailDiv").addClass("display-none");
                $("#itemProcExamDiv").addClass("display-none");
                $("#itemWorkGuideDiv").addClass("display-none");

                return;
            }

            ItemGuideProcessTreelistColapse(true);

            $("#itemPrescriptionDiv").addClass("display-none");

            $("#itemProcessDetailDiv").addClass("display-none");
            $("#itemProcExamDiv").addClass("display-none");
            $("#itemWorkGuideDiv").addClass("display-none");

        } else {

            ItemGuideProcessTreelistColapse(false);

            $("#itemPrescriptionDiv").removeClass("display-none");

            $("#itemProcessDetailDiv").addClass("display-none");
            $("#itemProcExamDiv").addClass("display-none");
            $("#itemWorkGuideDiv").addClass("display-none");

        }
     }

    // 공정검사 설정 버튼
    function itemProcessExamToggle() {
        var isCollapsed = $("#itemProcessDiv").hasClass("col-3");

        $("#itemProcessToggle").prop("checked", false);
        $("#itemPrescriptionToggle").prop("checked", false);
        $("#itemWorkGuideToggle").prop("checked", false);

        var processCd = "";

        if ($("#itemProcessGrid").dxTreeList("instance").getDataSource().totalCount() > 0 && $("#itemProcessGrid").dxTreeList("instance").option("focusedRowIndex") >= 0) {
            processCd = $("#itemProcessGrid").dxTreeList("instance").getNodeByKey($("#itemProcessGrid").dxTreeList("option", "focusedRowKey")).data.process_cd;
        }

        if (isCollapsed) {

            if ($("#itemProcExamDiv").hasClass("display-none")) {

                $("#itemProcExamDiv").removeClass("display-none");
                if ($("#itemProcessGrid").dxTreeList("instance").getDataSource().totalCount() > 0) {
                    getProcExam(processCd);
                }

                $("#itemProcessDetailDiv").addClass("display-none");
                $("#itemPrescriptionDiv").addClass("display-none");
                $("#itemWorkGuideDiv").addClass("display-none");

                return;
            }

            ItemGuideProcessTreelistColapse(true);

            $("#itemProcExamDiv").addClass("display-none");

            $("#itemProcessDetailDiv").addClass("display-none");
            $("#itemPrescriptionDiv").addClass("display-none");
            $("#itemWorkGuideDiv").addClass("display-none");

        } else {

            ItemGuideProcessTreelistColapse(false);

            $("#itemProcExamDiv").removeClass("display-none");
            if ($("#itemProcessGrid").dxTreeList("instance").getDataSource().totalCount() > 0) {
                getProcExam(processCd);
            }

            $("#itemProcessDetailDiv").addClass("display-none");
            $("#itemPrescriptionDiv").addClass("display-none");
            $("#itemWorkGuideDiv").addClass("display-none");
        }
    }

    // 작업방법 설정 버튼
    function itemWorkGuideToggle() {

        var isCollapsed = $("#itemProcessDiv").hasClass("col-3");

        $("#itemProcessToggle").prop("checked", false);
        $("#itemPrescriptionToggle").prop("checked", false);
        $("#itemProcessExamToggle").prop("checked", false);

        var processCd = "";

        if ($("#itemProcessGrid").dxTreeList("instance").getDataSource().totalCount() > 0 && $("#itemProcessGrid").dxTreeList("instance").option("focusedRowIndex") >= 0) {

            processCd = $("#itemProcessGrid").dxTreeList("instance").getNodeByKey($("#itemProcessGrid").dxTreeList("option", "focusedRowKey")).data.process_cd;
        }

        if (isCollapsed) {

            if ($("#itemWorkGuideDiv").hasClass("display-none")) {

                $("#itemWorkGuideDiv").removeClass("display-none");
                if ($("#itemProcessGrid").dxTreeList("instance").getDataSource().totalCount() > 0) {
                    getWorkGuide(processCd);
                }

                $("#itemProcessDetailDiv").addClass("display-none");
                $("#itemPrescriptionDiv").addClass("display-none");
                $("#itemProcExamDiv").addClass("display-none");

                return;
            }

            ItemGuideProcessTreelistColapse(true);

            $("#itemWorkGuideDiv").addClass("display-none");

            $("#itemProcessDetailDiv").addClass("display-none");
            $("#itemPrescriptionDiv").addClass("display-none");
            $("#itemProcExamDiv").addClass("display-none");

        } else {
            ItemGuideProcessTreelistColapse(false);

            $("#itemWorkGuideDiv").removeClass("display-none");


            if (processCd.length > 0) {
                if ($("#itemProcessGrid").dxTreeList("instance").getDataSource().totalCount() > 0) {
                    getWorkGuide(processCd);
                }
            }

            $("#itemProcessDetailDiv").addClass("display-none");
            $("#itemPrescriptionDiv").addClass("display-none");
            $("#itemProcExamDiv").addClass("display-none");
        }
    }


    function ItemGuideProcessTreelistColapse(isOk) {
        if (isOk) {
            $("#itemProcessGrid").dxTreeList("columnOption", "next_process_nm", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_qc_ck", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_transfer_ck", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "workroom_nm", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "standard_proc_time", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_warehouse", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_warehouse_nm", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_standard_weight_qty", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_standard_weight_unit", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_content", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_manage_rate_min", "visible", true);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_manage_rate_max", "visible", true);
            //$("#itemProcessGrid").dxTreeList("columnOption", "ccp_nm", "visible", true);

            $("#itemProcessDiv").addClass("col-12");
            $("#itemProcessDiv").removeClass("col-3");
            $("#itemProcessDiv").removeClass("pr-0");

            ItemGuide_TreeListTransferChagne();
        } else {
            $("#itemProcessGrid").dxTreeList("columnOption", "next_process_nm", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_qc_ck", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_transfer_ck", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "workroom_nm", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "standard_proc_time", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_warehouse", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_warehouse_nm", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_standard_weight_qty", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_standard_weight_unit", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_content", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_manage_rate_min", "visible", false);
            $("#itemProcessGrid").dxTreeList("columnOption", "item_proc_manage_rate_max", "visible", false);
            //$("#itemProcessGrid").dxTreeList("columnOption", "ccp_nm", "visible", false);

            $("#itemProcessDiv").removeClass("col-12");
            $("#itemProcessDiv").addClass("col-3");
            $("#itemProcessDiv").addClass("pr-0");
        }
    }

    // 하위 공정 검색
    function getItemProcess() {

        if (arguments[0].rowIndex >= 0) {
            $("#detailProcessDataGrid").dxDataGrid("instance").clearSelection();

            if ($("#itemProcessGrid").dxTreeList("instance").getDataSource()) {
                if ($("#itemProcessDiv").hasClass("col-3")) {

                    var standardProcessCd = arguments[0].row.node.data.standard_process_cd;

                    //$("#detailProcessDataGrid").dxDataGrid("option", "focusedRowIndex", 0);
                    $("#detailProcessDataGrid").dxDataGrid("instance").filter([
                        ["process_cd", "startswith", standardProcessCd.substring(0, 2)]
                    ]);
                }
            }
        }
    }

    // 조건별 조회
    function revisionSearch() {

        var popup = $("#ItemGuideRevisionPopup").dxPopup("instance");
        popup.option("contentTemplate", $("#revisionPopupTemplate"));
        popup.show();

        $("#latestRevisionCk").prop("checked", false);
        $("#revisionSignEndCk").prop("checked", false);
        $("#revisionCurrentCk").prop("checked", false);

        setRevisionDataSource();

    }

    // 개정 조회 팝업
    function setRevisionDataSource() {

        if ($("#revisionCurrentCk").prop("checked")) {
            $("#revisionSignEndCk").prop("checked", true);
        }

        var ck1 = $("#latestRevisionCk").prop("checked");
        var ck2 = $("#revisionSignEndCk").prop("checked");
        var ck3 = $("#revisionCurrentCk").prop("checked");

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetRevisionData',
            data: {
                pSpName: "CodeHelp",
                pItemCd: $("#ItemGuideItemCode").val(),
                pLatestRevisionCk: ck1,
                pRevisionSignEndCk: ck2,
                pRevisionCurrentCk: ck3
            },
            success: function (result) {

                $("#revisionDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result));
            }
        });
    }

    // 개정 조회 팝업 더블클릭
    function revisionDbClick(selectedItems) {
        ItemGuideUndo();
        ItemGuideItemRowDblClick(selectedItems);

        var popup = $("#ItemGuideRevisionPopup").dxPopup("instance");

        popup.hide();
    }

    // 처방전 변경 버튼
    function prescirptionSearch() {

        if (!$("#ItemGuideItemCode").val()) {
            alert("제품을 선택해주세요.");

            return;
        }

        var popup = $("#prescriptionPopup").dxPopup("instance");
        popup.option("contentTemplate", $("#prescriptionPopupTemplate"));

        popup.show();

        $("#prescriptionForm")[0].reset();

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetBomData',
            data: {
                pSpName: "SP_ItemBomFull2",
                pGubun: "SR",
                pItemCd: $("#ItemGuide_Form #ItemGuideItemCode").val(),
                pItemBomNo: $("#ItemGuide_Form select[name=Revision_no]").val(),
                pBatchSize: $("#ItemGuide_Form select[name=batch_size]").val()
            },
            success: function (result) {

                var jsonResult = JSON.parse(result);

                $("#prescriptionItemCd").val(jsonResult[0].item_cd);
                $("#prescriptionItemNm").val(jsonResult[0].item_nm);
                $("#prescriptionItemContent").val(jsonResult[0].item_content);
                $("#prescriptionBatchSizeUnit").val(jsonResult[0].item_content_unit);
            }
        });

        $("#prescriptionDataGrid").dxDataGrid("option", "dataSource", []);
        setPrescriptionDataGrid($("#ItemGuide_Form #ItemGuideItemCode").val(), $("#ItemGuide_Form select[name=Revision_no]").val(), $("#ItemGuide_Form select[name=batch_size]").val());

        $("#prescriptionBatchSize").val($("select[name=batch_size]").val());

        $("#prescriptionForm input").prop('disabled', true);
        $("#prescriptionForm select").prop('disabled', true);
        $("#prescriptionForm button").prop('disabled', true);

        $("#ItemGuide_1Edit").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Excel").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Save").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Undo").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Upload").dxButton().parent().parent().addClass("display-none");

        var editing = {
            allowUpdating: false,
            allowAdding: false,
            allowDeleting: false
        }

        $("#prescriptionDataGrid").dxDataGrid("option", "editing", editing);
    }

    // 원료약품분량 설정 데이터 그리드
    function setPrescriptionDataGrid(pItemCd, pItemBomNo, pBatchSize) {

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetPresciprtionData',
            data: {
                pSpName: "SP_ItemBomFull2",
                pGubun: "SD",
                pItemCd: pItemCd,
                pItemBomNo: pItemBomNo,
                pBatchSize: pBatchSize
            },
            success: function (result) {

                if (result) {
                    _prescriptionDataGridSeq = JSON.parse(result).length;

                    $("#prescriptionDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result));
                } else {
                    $("#prescriptionDataGrid").dxDataGrid("option", "dataSource", []);
                }
            }
        });
    }

    function setPrescriptionData() {

    }


    // 공정 조회 팝업
    function searchProcess() {
        var popup = $("#ItemGuideProcessPopup").dxPopup("instance");
        popup.show();
    }


    // 작업방법 복사 팝업
    function ItemWorkGuideCopyPopup() {
        if (!$("#ItemGuideItemCode").val()) {
            alert("제품을 선택해주세요.");

            return;
        }

        if (_sign_cnt > 0) {
            alert("승인이 시작된 자료는 수정할 수 없습니다.");
            return;
        }

        var treeList = $("#itemProcessGrid").dxTreeList("instance");
        if (treeList.option("focusedRowIndex") <= 0) {
            alert("작업 방법을 입력하고자 하는 공정을 선택해 주세요.");
            return;
        }

        var treeData = treeListGetFocusedRowData("itemProcessGrid");



        var requestData = {
            mp_ck: "M",
            search_info: treeData.fieldname
        }


        $.ajax({
            type: "GET",
            url: '/ProductionMaster/ItemWorkGuidePopupView',
            data: requestData
        }).done(function (response) {

            var popup = $("#ItemWorkGuideCopyPopup").dxPopup('instance');

            popup.option("contentTemplate", function (content) {
                content.append(response);
            });

            popup.show();

        }).fail(function (data) {
            alert("Failed: " + data.response);
        });
    }


    // 제조 공정도 다이어그램 팝업을 위한 function
    function ItemGuide_ProcessInfomationPopup() {

        var data = {
            item_cd: $("#ItemGuide #ItemGuide_Form input[name='item_cd']").val(),
            revision_no: $("#ItemGuide #ItemGuide_Form select[name='Revision_no'] option:selected").val(),
            order_type: 'M'
        }

        $.ajax({
            type: "POST",
            url: '/ProductionMaster/ProcInfoPopupView',
            data: data,
            success: function (result) {

                if (result[0] != null) {
                    var jsonData = new Array();
                    for (let i = 0; i < result.length; i++) {

                        if (result[i] != "" && result[i] != null) {
                            jsonData[i] = JSON.parse(result[i]);
                        }
                        else {
                            jsonData[i] = result[i];
                        }

                    }

                    var popup = $("#ItemGuide_ProcessInfomationPopup").dxPopup('instance');
                    popup.option("contentTemplate", $("#ItemGuide_ProcessInfomationPopupTemplate"));
                    popup.show();

                    var itemsWidth = 1.2;
                    var maxItmesLength = 0;

                    $("#ItemGuide_ProcInfoDiagram").dxDiagram({
                        nodes: {
                            dataSource: new DevExpress.data.ArrayStore({
                                key: "this",
                                data: ItemGuide_ProcInfoPrase(jsonData[0])
                            }),
                            keyExpr: "item_cd",
                            textExpr: "item_text",
                            typeExpr: "item_type",
                            heightExpr: function () { return 0.8 },
                            widthExpr: function (e) {
                                var length = e.item_text.length;

                                if (length > maxItmesLength) {
                                    maxItmesLength = length
                                }

                                if (maxItmesLength >= 13) {
                                    itemsWidth = 1.8;
                                } else {
                                    itemsWidth = 1.2;
                                }

                                return itemsWidth;
                            },
                            autoLayout: {
                                type: jsonData[0].length > 10 ? "tree" : "layered"
                            }
                        },
                        edges: {
                            dataSource: new DevExpress.data.ArrayStore({
                                key: "this",
                                data: jsonData[1]
                            }),
                            keyExpr: "item_cd",
                            fromExpr: "item_from",
                            toExpr: "item_to"
                        }
                    });

                } else {
                    alert("공정정보가 없습니다.");

                    return;
                }
            }
        })
    }

    // 배열의 \\n을 \n 로 Replace
    function ItemGuide_ProcInfoPrase(arry) {

        for (var i in arry) {

            if ((arry[i].item_text).indexOf("\\n") != -1) {
                arry[i].item_text = arry[i].item_text.replace("\\n", "\n");
            }
        }

        return arry;
    }

    // 공정 조회 팝업 더블클릭
    function ItemGuideProcessRowDblClick(selectedItems) {

        $("#ItemGuideProcessCode").val(selectedItems.data.process_cd);
        $("#ItemGuideProcessName").val(selectedItems.data.fieldname);

        var popup = $("#ItemGuideProcessPopup").dxPopup("instance");

        popup.hide();
    }


    // 공정 조회 팝업2 더블클릭
    function ItemGuideProcess2RowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#prescriptionDataGrid").dxDataGrid("instance");

        if (_cellClickEvent.column != null && _cellClickEvent.column.dataField == "target_process_cd") {
            dataGrid.cellValue(_cellClickEvent.rowIndex, "target_process_cd", data.process_cd);
            dataGrid.cellValue(_cellClickEvent.rowIndex, "target_process_nm", data.fieldname);

            dataGrid.cellValue(_cellClickEvent.rowIndex, "sum_ck", false);
            dataGrid.cellValue(_cellClickEvent.rowIndex, "item_bom_manufacture_qty", "0");
            dataGrid.cellValue(_cellClickEvent.rowIndex, "item_bom_tea_qty", "0");
            dataGrid.cellValue(_cellClickEvent.rowIndex, "item_bom_batch_qty", "0");
            dataGrid.cellValue(_cellClickEvent.rowIndex, "item_bom_standard_qty", "0");
        }
        else if (_cellClickEvent.column != null && _cellClickEvent.column.dataField == "process_cd") {
            dataGrid.cellValue(_cellClickEvent.rowIndex, "process_cd", data.process_cd);
            dataGrid.cellValue(_cellClickEvent.rowIndex, "process_nm", data.fieldname);
        }

        var popup = $("#ItemGuideProcess2Popup").dxPopup("instance");

        popup.hide();
    }


    // 공정 조회 팝업3 더블클릭
    function ItemGuideProcess3RowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#itemProcessGrid").dxTreeList("instance");
        dataGrid.cellValue(_cellClickEvent.rowIndex, "next_process_cd", data.process_cd);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "next_process_nm", data.process_nm);

        var popup = $("#ItemGuideProcess3Popup").dxPopup("instance");

        popup.hide();
    }


    // 작업실 조회 팝업1 더블클릭
    function ItemGuideWorkRoom1RowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#itemProcessGrid").dxTreeList("instance");
        dataGrid.cellValue(_cellClickEvent.rowIndex, "workroom_nm", data.workroom_nm);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "workroom_cd", data.workroom_cd);

        var popup = $("#ItemGuideWorkRoom1Popup").dxPopup("instance");

        popup.hide();
    }


    // 작업실 조회 팝업2 더블클릭
    function ItemGuideWorkRoom2RowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#itemProcessGrid").dxTreeList("instance");
        dataGrid.cellValue(_cellClickEvent.rowIndex, "item_proc_warehouse", data.workroom_cd);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "item_proc_warehouse_nm", data.workroom_nm);

        var popup = $("#ItemGuideWorkRoom2Popup").dxPopup("instance");

        popup.hide();
    }


    // 공정 일괄 변경
    function changeProcess() {

        if (!_isEditable) {
            alert("수정상태일때에 변경 가능합니다.");
            return;
        }

        _isEdited = true;

        //var dataGrid = $("#prescriptionDataGrid").dxDataGrid("instance");

        //for (var i = 0; i < dataGrid.getSelectedRowsData().length; i++) {

        //    var index = dataGrid.getRowIndexByKey(dataGrid.getSelectedRowKeys()[i]);

        //    dataGrid.cellValue(index, "process_cd", $("#ItemGuideProcessCode").val());
        //    dataGrid.cellValue(index, "process_nm", $("#ItemGuideProcessName").val());
        //}

        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        grid.option("focusedRowEnabled", true);
        var gridData = grid.getVisibleRows();

        for (var i = 0; i < gridData.length; i++) {
            if (grid.cellValue(i, "row_check")) {
                grid.cellValue(i, "process_cd", $("#ItemGuideProcessCode").val());
                grid.cellValue(i, "process_nm", $("#ItemGuideProcessName").val());

            }
        }
    }


    // 단위 일괄 변경
    function changeUnit(num) {

        if (!_isEditable) {
            alert("수정상태일때에 변경 가능합니다.");
            return;
        }

        _isEdited = true;

        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        grid.option("focusedRowEnabled", true);
        var gridData = grid.getVisibleRows();

        for (var i = 0; i < gridData.length; i++) {
            if (grid.cellValue(i, "row_check")) {
                if (num == 1) {
                    grid.cellValue(i, "item_bom_tea_unit", $("#prescriptionUnit option:selected").val());
                } else if (num == 2) {
                    grid.cellValue(i, "item_bom_batch_unit", $("#prescriptionUnit option:selected").val());
                }
            }
        }
    }


    // 제조기록서 조회
    function ItemGuideSearch() {
        $("#itemPrescriptionDataGrid").dxDataGrid("instance").clearSorting();
        GetItemDetail();
    }


    // 제조기록서 입력 팝업
    function ItemGuideInput() {
        var item_cd = $("#ItemGuide_Form input[name=item_cd]").val();

        if (!item_cd) {
            alert("품목을 선택해야 합니다.");
            return;
        }


        var popup = $("#ItemGuideAddPopup").dxPopup("instance");
        popup.option("contentTemplate", $("#itemguideAddPopupTemplate"));

        popup.show();

        $("#ItemGuideInputForm input[name=item_cd]").val($("#ItemGuide_Form input[name=item_cd]").val());
        $("#ItemGuideInputForm input[name=item_nm]").val($("#ItemGuide_Form input[name=item_nm]").val());

        $('#itemguideDatePicker').datepicker({
            format: "yyyy-mm-dd",	//데이터 포맷 형식(yyyy : 년 mm : 월 dd : 일 )
            autoclose: true,	//사용자가 날짜를 클릭하면 자동 캘린더가 닫히는 옵션
            templates: {
                leftArrow: '&laquo;',
                rightArrow: '&raquo;'
            }, //다음달 이전달로 넘어가는 화살표 모양 커스텀 마이징
            todayHighlight: true,	//오늘 날짜에 하이라이팅 기능 기본값 :false
            toggleActive: false,	//이미 선택된 날짜 선택하면 기본값 : false인경우 그대로 유지 true인 경우 날짜 삭제
            weekStart: 0,//달력 시작 요일 선택하는 것 기본값은 0인 일요일
            language: "ko"	//달력의 언어 선택, 그에 맞는 js로 교체해줘야한다.

        });//datepicker end
    }


    // 개정 수정
    function ItemGuideEdit() {

        if ($("#ItemGuide_Form select[name='Revision_no']").val() == null) {
            alert("수정할 수 없습니다. 품목을 선택하세요.");

            return;
        }

        if ($("#ItemGuide_Form select[name='Revision_no']").val() == "NEW") {
            alert("수정할 수 없습니다. 개정번호를 선택하세요.");

            return;
        }

        //조회된 데이터가 없으면 수정모드 진입을 막는다.
        var Procgrid = $("#itemProcessGrid").dxTreeList("instance");
        var rows = Procgrid.getVisibleRows();
        var revision_no = $("#ItemGuide select[id=ItemGuideRevisionNo]").val();

        if (UtilView.isEmpty(rows) && UtilView.isEmpty(revision_no)) {
            return;
        }

        if (_sign_cnt > 0) {
            alert("승인이 시작된 자료는 수정할 수 없습니다.");
            return;
        }

        var editing = {
            allowUpdating: true,
            selectTextOnEditStart: true,
            mode: 'batch'
        }

        $("#itemRevisionInfoDiv input").prop("disabled", false);
        $("#itemRevisionInfoDiv textarea").prop("disabled", false);

        $("#itemProcExamDiv").prop("disabled", false);
        $("#itemProcessExamDataGrid").dxDataGrid("option", "editing", editing);

        $("#itemWorkGuideDiv").prop("disabled", false);
        _isEditable = true;

        $("#itemProcessGrid").dxTreeList("option", "editing", editing);

        editing = {
            allowUpdating: true,
            allowAdding: true,
            allowDeleting: true,
            mode: 'batch'
        }

        $("#itemWorkGuideDataGrid").dxDataGrid("option", "editing", editing);

        itemGuideEditing(true);
    }

    // 개정정보 입력
    function ItemGuideAdd() {

        if (!UtilView.checkValidForm("ItemGuideInputForm")) {
            return;
        }

        var data = new FormData($('#ItemGuideInputForm')[0]);

        data.set("gubun", "C");

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/RevisonCRUD',
            data: data,
            contentType: false,
            processData: false,
            async: false,
            success: function (result) {

                if (result == 0) {

                    ItemGuideLoadInfo();

                } else if (result == 1) {
                    alert("동일한 개정번호가 있습니다. 확인해주세요.");

                } else if (result == 2) {
                    alert("개정생성에 실패했습니다.");

                }
            }
        });
    }


    async function ItemGuideLoadInfo() {

        var item_cd = $("#ItemGuideItemCode3").val();
        var batch_size = $("#ItemGuideInputForm input[name=batch_size]").val() + ".0000";
        var revision_num = $("#ItemGuideInputForm input[name=revision_num]").val();

        var popup = $("#ItemGuideAddPopup").dxPopup("instance");
        popup.hide();

        await ItemGuideSelectBatchSize(item_cd);

        $("#ItemGuideQuantity").val(batch_size);

        await GetRevisionNumber();

        $("#ItemGuideRevisionNo option:contains('" + revision_num + "')").attr("selected", "selected");

        GetItemDetail();
    }


    // 개정정보 삭제
    function ItemGuideDelete() {
        if ($("form#ItemGuide_Form select[name='Revision_no']").val() == null) {
            alert("삭제할 수 없습니다. 품목을 선택하세요.");

            return;
        }

        var isChecked = $("#ItemGuideForm2 input[name=revision_current_ck]").prop("checked");

        if (isChecked) {
            alert("현개정은 삭제할 수 없습니다.");
            return;
        }

        if (_sign_cnt > 0) {
            alert("이미 승인이 시작된 자료는 삭제할 수 없습니다.");
            return;
        }

        var treeList = $("#itemProcessGrid").dxTreeList("instance");

        if (treeList.option("dataSource").length > 0) {

            var node = treeList.getNodeByKey(treeList.option("focusedRowKey"));

            if (confirm("선택된 공정정보를 삭제하시겠습니까?")) {

                var node = treeList.getNodeByKey(treeList.option("focusedRowKey"));

                //if (node.level === 0) {
                //    deleteAllProcess();
                //}
                //else if (node.level === 1) {
                    deleteProcess();
                //}

            }

        } else {
            if ($("select[name='Revision_no']").val() == "NEW") {
                alert("삭제할 수 없습니다. 개정번호을 선택하세요.");

                return;
            }


            if (confirm("선택된 개정정보를 삭제하시겠습니까?")) {

                var data = {
                    mp_ck: "M",
                    item_cd: $("#ItemGuideItemCode").val(),
                    batch_size: $("#ItemGuideQuantity").val(),
                    item_bom_no: $("#ItemGuideRevisionNo").val()
                }

                $.ajax({
                    type: 'POST',
                    url: '/ProductionMaster/ItemGuideDeleteAll',
                    data: data,
                    success: function (result) {

                        alert("삭제되었습니다.");
                        GetRevisionNumber();

                        GetItemDetail();
                    }
                });

            }
        }
    }

    // 개정정보 저장
    async function ItemGuideSave() {

        if (confirm("저장하시겠습니까?")) {

            var treeList = $("#itemProcessGrid").dxTreeList("instance");
            var data = new FormData($('#itemRevisionInfoForm')[0]);

            // 작업실 입력 여부 확인
            if (! await ItemGuide_WorkroomCheck()) {
                alert("작업실을 선택하세요.");
                return;
            }

            if ($("#itemProcessDiv").hasClass("col-12")) {

                // 다음 공정 자동 입력
                await NextProcessInsert();

                // 그룹 자동 입력
                await ProcessGroupInsert();

                // 공정 트리리스트 저장
                await treeList.saveEditData();

            } else {
                await treeList.saveEditData();

            }

            var editing = {
                allowUpdating: false,
                selectTextOnEditStart: false,
            }
            treeList.option("editing", editing);


            // 제조기록서 정보 저장
            if ($("#revisionInfoToggle").prop("checked")) {

                await RevisionInfoSave(data);
            }
            var revision_no = $("#ItemGuide_Form select[name=Revision_no]").val();


            // 공정검사 설정 저장
            if ($("#itemProcessExamToggle").prop("checked")) {

                // CCP코드가 등록되지 않은 공정은 공정검사를 사용할 수 없도록
                var data = treeListGetFocusedRowData("itemProcessGrid");

                if (data.ccp_cd != null && data.ccp_cd.length > 0) {
                    var examGrid = $("#itemProcessExamDataGrid").dxDataGrid("instance");
                    var examData = examGrid.getVisibleRows();
                    var count = 0;

                    for (var i = 0; i < examData.length; i++) {

                        if (examData[i].data.application_ck == true || examData[i].data.application_ck == "Y") {
                            count++;

                            continue;
                        }
                    }

                    if (count <= 0 && examData.length > 0) {
                        alert("설정된 공정검사가 없습니다.\nCCP코드를 제거하거나 공정검사를 설정해주세요.");

                        return;
                    }
                }

                await ItemProcessExamInfoSave();

            }
            $("#itemProcessExamDataGrid").dxDataGrid("option", "editing", editing);


            // 작업방법 정보 저장
            if ($("#itemWorkGuideToggle").prop("checked")) {

                await ItemWorkGuideInfoSave(treeList);

            }
            $("#itemProcessExamDataGrid").dxDataGrid("option", "editing", editing);


            editing = {
                allowUpdating: false,
                allowAdding: false,
                allowDeleting: false,
                mode: 'row'
            }
            $("#itemWorkGuideDataGrid").dxDataGrid("option", "editing", editing);

            _isEditable = false;
            itemGuideEditing(false);

            await GetRevisionNumber();
            $("#ItemGuideRevisionNo").val(revision_no);

            await GetItemDetail();



            $("#itemRevisionInfoDiv input").prop("disabled", true);
            $("#itemRevisionInfoDiv textarea").prop("disabled", true);

            alert("저장하였습니다.");
        } else {
            return;
        }

    }



    function RevisionInfoSave(_data) {
        var data = _data;

        data.set("gubun", "U0");
        data.set("item_cd", $("#ItemGuideItemCode").val());
        data.set("revision_no", $("select[name=Revision_no]").val());
        data.set("batch_size", $("select[name=batch_size]").val());


        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/RevisonCRUD',
            data: data,
            contentType: false,
            processData: false,
            async: false,
            success: function (result) {

                if (result == "0") {
                    console.log("개정 정보 저장 // 성공");
                } else {
                    console.log("개정 정보 저장 // 실패");
                }
            }
        });
    }


    async function ItemProcessExamInfoSave() {
        $("#itemProcExamDiv").prop("disabled", true);
        await $("#itemProcessExamDataGrid").dxDataGrid("instance").saveEditData();
    }


    async function ItemWorkGuideInfoSave(treeList) {
        $("#itemWorkGuideDiv").prop("disabled", true);

        if (treeList.option("focusedRowIndex") < 0) {
            alert("세부공정을 선택해야 작업방법을 입력 할 수 있습니다");

            return;
        } else {
            await $("#itemWorkGuideDataGrid").dxDataGrid("instance").saveEditData();
        }

    }

    // 다음공정 자동 입력
    function NextProcessInsert() {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");

        if (treeList.getDataSource().totalCount() > 0) {
            var treeData = treeList.getDataSource()._items;

            for (var i = 0; i < treeData.length; i++) {
                if (i == treeData.length - 1) {
                    return;
                }

                // 다음공정이 빈값일 경우에만 자동으로 다음공정을 입력
                //if (treeData[i].data.level != "1" && treeList.cellValue(i, "next_process_cd") == null) {
                //    if (treeData[i + 1].data.level != "1") {
                //        treeList.cellValue(i, "next_process_cd", treeData[i + 1].data.process_cd);
                //        treeList.cellValue(i, "next_process_nm", treeData[i + 1].data.fieldname);
                //    } else {
                //        treeList.cellValue(i, "next_process_cd", treeData[i + 2].data.process_cd);
                //        treeList.cellValue(i, "next_process_nm", treeData[i + 2].data.fieldname);
                //    }
                //}

                if (treeData[i + 1].data.level != "1") {
                    treeList.cellValue(i, "next_process_cd", treeData[i + 1].data.process_cd);
                    treeList.cellValue(i, "next_process_nm", treeData[i + 1].data.fieldname);
                } else {
                    treeList.cellValue(i, "next_process_cd", treeData[i + 2].data.process_cd);
                    treeList.cellValue(i, "next_process_nm", treeData[i + 2].data.fieldname);
                }
            }
        }
    }


    // 그룹 자동 입력
    function ProcessGroupInsert() {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");

        if (treeList.getDataSource().totalCount() > 0) {
            var treeData = treeList.getDataSource()._items;
            for (var i = 0; i < treeData.length; i++) {
                if (treeData[i].data.level == "1" && (treeList.cellValue(i, "grouping_cd") == null || treeList.cellValue(i, "grouping_cd").length <= 0)) {

                    treeList.cellValue(i, "grouping_cd", "1");
                }
            }
        }

    }


    // 개정정보 수정 취소
    function ItemGuideUndo() {

        var editing = {
            allowUpdating: false,
            selectTextOnEditStart: false,
        }

        $("#itemRevisionInfoDiv input").prop("disabled", true);
        $("#itemRevisionInfoDiv textarea").prop("disabled", true);

        $("#itemProcExamDiv").prop("disabled", true);
        $("#itemProcessExamDataGrid").dxDataGrid("option", "editing", editing);

        $("#itemWorkGuideDiv").prop("disabled", true);

        _isEditable = false;

        $("#itemProcessGrid").dxTreeList("option", "editing", editing);

        editing = {
            allowUpdating: false,
            allowAdding: false,
            allowDeleting: false,
            mode: 'batch'
        }

        $("#itemWorkGuideDataGrid").dxDataGrid("option", "editing", editing);

        itemGuideEditing(false);
    }


    // 처방전 수정 버튼 클릭
    function ItemGuide_1Edit() {
        if (_sign_cnt > 0) {
            alert("승인이 시작된 자료는 수정할 수 없습니다.");
            return;
        }

        _isEditable = true;

        $("#prescriptionForm input").prop('disabled', false);
        //$("#prescriptionForm select").prop('disabled', false);
        $("#prescriptionForm button").prop('disabled', false);

        $("#ItemGuide_1Edit").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Excel").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Save").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Undo").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Upload").dxButton().parent().parent().removeClass("display-none");

        var editing = {
            allowUpdating: true,
            allowAdding: true,
            allowDeleting: true,
            mode: 'batch'
        }

        $("#prescriptionDataGrid").dxDataGrid("option", "editing", editing);
    }

    // 처방전 저장 버튼
    async function ItemGuide_1Save() {
        editSaveCheck = true;
        await insertPrescriptionGridSeq();
        await RowSelectReset();

        await $("#prescriptionDataGrid").dxDataGrid("instance").saveEditData();

        if (!editSaveCheck) {
            alert("공정을 입력해주세요");

            return;
        }


        $("#ItemGuide_1Edit").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Excel").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Save").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Undo").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Upload").dxButton().parent().parent().addClass("display-none");

        var editing = {
            allowUpdating: false,
            allowAdding: false,
            allowDeleting: false
        }

        $("#prescriptionDataGrid").dxDataGrid("option", "editing", editing);
        _prescriptionDataGridSeq = $("#prescriptionDataGrid").dxDataGrid("instance").totalCount();
    }

    // 처방전 취소 버튼
    function ItemGuide_1Undo() {

        $("#prescriptionDataGrid").dxDataGrid("instance").cancelEditData();

        $("#ItemGuide_1Edit").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Excel").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Save").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Undo").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Upload").dxButton().parent().parent().addClass("display-none");

        var editing = {
            allowUpdating: false,
            allowAdding: false,
            allowDeleting: false
        }

        $("#prescriptionDataGrid").dxDataGrid("option", "editing", editing);
        _prescriptionDataGridSeq = $("#prescriptionDataGrid").dxDataGrid("instance").totalCount();
    }

    // 처방전 엑셀 추출
    function ItemGuide_1Excel() {
        gridExportToExcel("prescriptionDataGrid", "제제표준서_마스터_관리_" + '@DateTime.Now.ToShortDateString()');
    }

    // 처방전 엑셀 입력
    function ItemGuide_1Upload() {
        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        if (grid.totalCount() > 0) {
            alert("기존 데이터를 삭제한 후 시도해주세요.");

            return;
        }

        // 임시로 만들어둔 input type[file]을 클릭
        $("#ItemGuide #excel_upload").click();
    }

    // input type[file]의 데이터가 변경되었을 경우 실행
    document.querySelector("#ItemGuide #excel_upload").addEventListener("change", function (event) {

        var input = event.target;
        var fileName = input.files[0].name;
        var fileType = fileName.substring(fileName.lastIndexOf(".")).toUpperCase();

        // 엑셀 확장자가 아니면 return;
        if (!(fileType == ".XLSX" || fileType == ".XLS")) {
            alert("확장자가 .xls, .xlsx인 파일만 입력할 수 있습니다.");

            event.target.value = "";
            return;
        }


        // FileReader를 선언한 후, 해당 FileReader에 input type[file]로 입력 받은 파일은 입력(readAsBinaryString)
        var reader = new FileReader();
        reader.readAsBinaryString(input.files[0]);

        // FileReader에 파일이 제대로 입력되면 실행할 function
        reader.onload = function () {
            var fileData = reader.result;
            var wb = XLSX.read(fileData, { type: 'binary' });

            wb.SheetNames.forEach(function (sheetName) {
                var rowObj = ItemGuide_xlsxToArry(wb.Sheets[sheetName]);

                // input type[file]을 통해 입력받은 파일을 DataGrid에 입력
                ItemGuide_excelDataInsertToGrid(rowObj);
            })
        };

    })


    function ItemGuide_xlsxToArry(sheet) {
        var range = XLSX.utils.decode_range(sheet['!ref']);
        var arry = [];

        for (var i = 0; i <= range.e.r; i++) {

            if (i == 0 || i == 1 || i == (range.e.r)) continue;

            var arry2 = [];

            for (var j = 0; j <= range.e.c; j++) {
                cell = sheet[XLSX.utils.encode_cell({ c: j, r: i })];

                var hdr = "";

                if (cell && cell.t) hdr = XLSX.utils.format_cell(cell);

                arry2.push(hdr);
            }

            arry.push(arry2);
        }

        return arry;
    }



    function ItemGuide_arryFindElement(text, arry) {

        if (typeof arry.find(i => i.displayfield == text) == "undefined") {
            return "";
        } else {
            return arry.find(i => i.displayfield == text).keyfield;
        }
    }


    // input type[file]을 통해 입력받은 파일을 DataGrid에 입력
    async function ItemGuide_excelDataInsertToGrid(data) {

        var dataArry = new Array();
        var count = 0;

        for (var i = 0; i < data.length; i++) {

            var unitArry = JSON.parse(@itemUnit);
            var itemBomRoundingArry = JSON.parse(@itemBomRounding);
            var tradeArry = JSON.parse(@trade);
            var itemBomLastTypeArry = JSON.parse(@itemBomLastType);
            var itemBomCalcTypeArry = JSON.parse(@itemBomCalcType);

            var excelDataArry = data[i];

            var _data = {
                row_check: excelDataArry[0],
                item_bom_seq: excelDataArry[1],
                process_cd: excelDataArry[2],
                process_nm: excelDataArry[3],
                item_bom_child_cd: excelDataArry[4],
                item_bom_child_nm: excelDataArry[5],
                trade_cd: ItemGuide_arryFindElement(excelDataArry[6].toString(), tradeArry),
                item_bom_last_type: ItemGuide_arryFindElement(excelDataArry[7].toString(), itemBomLastTypeArry),

                target_process_cd: excelDataArry[8],
                target_process_nm: excelDataArry[9],
                manufacture_percent: excelDataArry[10],
                item_bom_manufacture_qty: excelDataArry[11],
                item_bom_tea_qty: excelDataArry[12],
                item_bom_tea_unit: ItemGuide_arryFindElement(excelDataArry[13].toString(), unitArry),

                item_bom_standard_qty: excelDataArry[14],
                item_bom_batch_qty: excelDataArry[15],
                item_bom_batch_unit: ItemGuide_arryFindElement(excelDataArry[16].toString(), unitArry),
                sum_ck: excelDataArry[17],
                item_bom_standard_ucl_qty: excelDataArry[18],



                item_bom_calc_type: ItemGuide_arryFindElement(excelDataArry[19].toString(), itemBomCalcTypeArry),
                item_bom_last_type: excelDataArry[20],
                item_bom_use_rate: excelDataArry[21],
                item_bom_specific_gravity: excelDataArry[22],
                item_bom_rounding: ItemGuide_arryFindElement(excelDataArry[23].toString(), itemBomRoundingArry),
                remark: excelDataArry[24],
                item_cd : $("#ItemGuideItemCode").val(),
                item_bom_no : $("#ItemGuide select[name=Revision_no]").val(),
                batch_size : $("#ItemGuide select[name=batch_size]").val(),
                item_bom_id : ""
            }

            if (i == 0) {
                _data.pGubun = "UID"
                _data.excelInput = true
            } else {
                _data.pGubun = "ID"
                _data.excelInput = true
            }

            $.ajax({
                type: 'POST',
                url: '/ProductionMaster/PrescriptionCRUD',
                data: _data,
                success: function (result) {


                }
            });


            dataArry[count] = _data;
            count++;
        }

        if (dataArry.length > 0) {
            await $("#prescriptionDataGrid").dxDataGrid("option", "dataSource", dataArry);
            $("#prescriptionDataGrid").dxDataGrid("instance").refresh();
        } else {
            $("#prescriptionDataGrid").dxDataGrid("option", "dataSource", []);

        }

        $("#ItemGuide #excel_upload").val("");

        $("#ItemGuide_1Edit").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Excel").dxButton().parent().parent().removeClass("display-none");
        $("#ItemGuide_1Save").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Undo").dxButton().parent().parent().addClass("display-none");
        $("#ItemGuide_1Upload").dxButton().parent().parent().addClass("display-none");

        var editing = {
            allowUpdating: false,
            allowAdding: false,
            allowDeleting: false
        }

        $("#prescriptionDataGrid").dxDataGrid("option", "editing", editing);
    }


    function AllRowSelect() {

        if (!_isEditable) {
            alert("수정상태일때에 사용 가능합니다.");
            return;
        }


        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        grid.option("focusedRowEnabled", true);
        var gridData = grid.getVisibleRows();

        var button_state = $("button#allRowSelect_Btn").attr("state");
        if (button_state == "select") {
            for (var i = 0; i < gridData.length; i++) {
                grid.cellValue(i, "row_check", true);
            }

            $("button#allRowSelect_Btn").attr("state", "cancel");
            $("button#allRowSelect_Btn").text("선택 해제");
        } else {
            for (var i = 0; i < gridData.length; i++) {
                grid.cellValue(i, "row_check", false);
            }

            $("button#allRowSelect_Btn").attr("state", "select");
            $("button#allRowSelect_Btn").text("전체 선택");
        }

    }


    // 공정, 원료 팝업
    function getGrid(e) {

        if (!_isEditable) {
            return;
        }

        _cellClickEvent = e;

        if (e.column != null) {
            if ((e.column.dataField == "process_cd" || e.column.dataField == "target_process_cd") && e.row.isEditing) {
                var processPopup = $("#ItemGuideProcess2Popup").dxPopup("instance");
                processPopup.show();
            }
            else if (e.column.dataField == "item_bom_child_cd" && e.row.isEditing) {
                var materialPopup = $("#ItemGuideMaterialPopup").dxPopup("instance");
                materialPopup.show();
            }
        }
    }

    // 원료 팝업 더블클릭
    function ItemGuideMaterialRowDblClick(selectedItems) {

        var data = selectedItems.data;

        _isEdited = true;

        var dataGrid = $("#prescriptionDataGrid").dxDataGrid("instance");
        dataGrid.cellValue(_cellClickEvent.rowIndex, "item_bom_child_cd", data.item_cd);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "item_bom_child_nm", data.item_nm);

        var materialPopup = $("#ItemGuideMaterialPopup").dxPopup("instance");
        materialPopup.hide();
    }

    // 작업정보 원료 팝업 더블클릭
    function ItemGuideMaterial2RowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#itemWorkGuideDataGrid").dxDataGrid("instance");

        dataGrid.cellValue(_cellClickEvent.rowIndex, "workguide_sub_item", data.item_cd);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "workguide_sub_item_nm", data.item_nm);

        var materialPopup = $("#ItemGuideMaterial2Popup").dxPopup("instance");
        materialPopup.hide();
    }

    // ccp코드 팝업 더블 클릭
    function ItemGuideCcpRowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#itemProcessGrid").dxTreeList("instance");
        dataGrid.cellValue(_cellClickEvent.rowIndex, "ccp_cd", data.ccp_cd);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "ccp_nm", data.ccp_nm);

        var ccpPopup = $("#ItemGuideCcpPopup").dxPopup("instance");
        ccpPopup.hide();
    }

    // 처방전 복사
    function CopyPrescription() {

        var dataGrid = $("#prescriptionDataGrid").dxDataGrid("instance");

        _isEdited = true;

        if (dataGrid.getDataSource().totalCount() > 0) {
            alert("기존 처방전 데이터를 삭제해 주세요.");

            return;
        }

        var data1 = {
            pGubun: "SD2",
            item_cd: $("#ItemGuideItemCode2").val(),
            item_bom_no: $("#ItemGuideRevisionNo2").val(),
            batch_size: $("#ItemGuideQuantity2").val()
        }
        var data2 = {
            item_cd: $("#prescriptionItemCd").val(),
            item_bom_no: $("#ItemGuideRevisionNo").val(),
            batch_size: $("#prescriptionBatchSize").val()
        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/CopyPrescription',
            data: {
                data1: data1,
                data2: data2
            },
            success: function (result) {
                setPrescriptionDataGrid($("#ItemGuide_Form #ItemGuideItemCode").val(), $("#ItemGuide_Form select[name=Revision_no]").val(), $("#ItemGuide_Form select[name=batch_size]").val());

            }
        });

    }


    // 처방전 추가시 순서 자동 생성, 총중량 반영 기본값 체크
    function initPrescriptionSeq(e) {
        insertPrescriptionGridSeq(e);

        e.data.sum_ck = true;
        e.data.item_bom_last_type = false;

        var batch_size_unit = $("#prescriptionForm select[name='batch_size_unit']").val();
        // 배치사이즈가 무게단위이면 mg, g / 부피단위이면 ml, l
        if (batch_size_unit == "KG" || batch_size_unit == "G" || batch_size_unit == "MG") {
            e.data.item_bom_tea_unit = "MG";
            e.data.item_bom_batch_unit = "G";
        } else if (batch_size_unit == "L" || batch_size_unit == "ML") {
            e.data.item_bom_tea_unit = "ML";
            e.data.item_bom_batch_unit = "L";
        }
    }


    async function insertPrescriptionGridSeq(e) {
        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        grid.option("focusedRowEnabled", true);
        var gridData = grid.getVisibleRows();

        var count = 1;
        if (arguments.length > 0) {
            var insertCheck = false;
            var deleteCheck = false;
            for (var i = 0; i < gridData.length; i++) {
                var tr = grid.getRowElement(i)[0];
                if (tr.classList.contains("dx-row-inserted")) {
                    insertCheck = true;
                } else if (!tr.classList.contains("dx-row-removed")) {
                    grid.cellValue(i, "item_bom_seq", count++);

                    deleteCheck = true;
                }
            }

            var newSeq = 0;
            if (insertCheck || !deleteCheck) {
                newSeq = _prescriptionDataGridSeq + 1;
            } else if (!insertCheck || deleteCheck) {
                newSeq = count;
            }

            e.data.item_bom_seq = newSeq;
            _prescriptionDataGridSeq = newSeq;
        } else {
            var insertCount = 0;
            for (var i = 0; i < gridData.length; i++) {
                var tr = grid.getRowElement(i)[0];
                if (!tr.classList.contains("dx-row-removed")) {
                    if (tr.classList.contains("dx-row-inserted")) {;
                        //grid.cellValue(i, "item_bom_seq", gridData.length - i);
                        insertCount++;
                    } else {
                        grid.cellValue(i, "item_bom_seq", count++);
                    }
                } else {
                    grid.cellValue(i, "item_bom_seq", gridData.length);
                }
            }

            for (var i = 0; i < insertCount; i++) {
                grid.cellValue(i, "item_bom_seq", (count - 1) + insertCount - i);
            }
        }
    }


    function CustomSummary(options) {
        switch (options.name) {
            case "manufacture_percent_summary":
                if (options.summaryProcess === "start") {
                    options.totalValue = 0;
                }
                if (options.summaryProcess === "calculate") {
                    if (options.value.sum_ck == "Y") {
                        options.totalValue = parseFloat(options.totalValue) + parseFloat(options.value.manufacture_percent);
                    }
                }
                if (options.summaryProcess === "finalize") {
                    //
                }

                break;
            case "item_bom_manufacture_qty_summary":
                if (options.summaryProcess === "start") {
                    options.totalValue = 0;
                }
                if (options.summaryProcess === "calculate") {
                    if (options.value.sum_ck == "Y") {
                        options.totalValue = parseFloat(options.totalValue) + parseFloat(options.value.item_bom_manufacture_qty);
                    }
                }
                if (options.summaryProcess === "finalize") {
                    //
                }

                break;
            case "item_bom_tea_qty_summary":
                if (options.summaryProcess === "start") {
                    options.totalValue = 0;
                }
                if (options.summaryProcess === "calculate") {
                    if (options.value.sum_ck == "Y") {
                        options.totalValue = parseFloat(options.totalValue) + parseFloat(options.value.item_bom_tea_qty);
                    }
                }
                if (options.summaryProcess === "finalize") {
                    //
                }

                break;
            case "item_bom_standard_qty_summary":
                if (options.summaryProcess === "start") {
                    options.totalValue = 0;
                }
                if (options.summaryProcess === "calculate") {
                    if (options.value.sum_ck == "Y") {
                        options.totalValue = parseFloat(options.totalValue) + parseFloat(options.value.item_bom_standard_qty);
                    }
                }
                if (options.summaryProcess === "finalize") {
                    //
                }

                break;
            case "item_bom_batch_qty_summary":
                if (options.summaryProcess === "start") {
                    options.totalValue = 0;
                }
                if (options.summaryProcess === "calculate") {
                    if (options.value.sum_ck == "Y") {
                        options.totalValue = parseFloat(options.totalValue) + parseFloat(options.value.item_bom_batch_qty);
                    }
                }
                if (options.summaryProcess === "finalize") {
                    //
                }

                break;
        }

    }


    // 처방전 수정사항 저장
    function prescriptionUpdate(info) {
        var data = info.data;

        if (typeof data.process_cd == "undefined") {
            editSaveCheck = false;


            return;
        }
        if (typeof data.item_bom_child_cd == "undefined") {
            editSaveCheck = false;

            return;
        }

        data.pGubun = "UD";
        data.item_cd = $("#ItemGuideItemCode").val();
        data.item_bom_no = $("#ItemGuide select[name=Revision_no]").val();
        data.batch_size = $("#ItemGuide select[name=batch_size]").val();

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/PrescriptionCRUD',
            data: data,
            success: function (result) {

            }
        });
    }

    // 처방전 추가 입력
    function prescriptionInsert(info) {
        var data = info.data;
        _isEdited = true;

        if (typeof data.process_cd == "undefined") {
            editSaveCheck = false;


            return;
        }
        if (typeof data.item_bom_child_cd == "undefined") {
            editSaveCheck = false;

            return;
        }


        data.pGubun = "ID";
        data.item_cd = $("#ItemGuideItemCode").val();
        data.item_bom_no = $("#ItemGuide select[name=Revision_no]").val();
        data.batch_size = $("#ItemGuide select[name=batch_size]").val();
        data.item_bom_id = "";

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/PrescriptionCRUD',
            data: data,
            success: function (result) {


            }
        });
    }

    // 처방전 삭제
    function prescriptionDelete(info) {

        _isEdited = true;
        var data = info.data;

        data.pGubun = "DD";
        data.item_cd = $("#ItemGuideItemCode").val();
        data.item_bom_no = $("#ItemGuide select[name=Revision_no]").val();
        data.batch_size = $("#ItemGuide select[name=batch_size]").val();

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/PrescriptionCRUD',
            data: data,
            success: function (result) {


            }
        });
    }

    // 처방전 전체삭제
    function deleteCheckedPrescription() {

        if (!_isEditable) {
            alert("수정상태일때에 삭제 가능합니다.");
            return;
        }


        if (!confirm("선택된 처방전을 모두 삭제하시겠습니까?")) {
            return;
        }

        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        grid.option("focusedRowEnabled", true);
        var gridData = grid.getVisibleRows();
        var count = 0;

        for (var i = 0; i < gridData.length; i++) {
            if (grid.cellValue(i, "row_check")) {
                count++;
            }
        }

        if (count <= 0) {
            alert("선택된 처방전이 없습니다.");
            return;
        }

        var cnt = 0;
        for (var i = 0; i < gridData.length; i++) {
            if (grid.cellValue(i, "row_check")) {
                var data = getGridRowByKey("prescriptionDataGrid", grid.getKeyByRowIndex(i));

                data.pGubun = "DD";
                data.item_cd = $("#ItemGuideItemCode").val();
                data.item_bom_no = $("#ItemGuide select[name=Revision_no]").val();
                data.batch_size = $("#ItemGuide select[name=batch_size]").val();

                $.ajax({
                    type: 'POST',
                    url: '/ProductionMaster/PrescriptionCRUD',
                    data: data,
                    async:false,
                    success: function (result) {

                        cnt++;
                    }
                });
            }
        }


        if (cnt > 0) {
            setPrescriptionDataGrid($("#ItemGuide_Form #ItemGuideItemCode").val(), $("#ItemGuide_Form select[name=Revision_no]").val(), $("#ItemGuide_Form select[name=batch_size]").val());
            _isEdited = true;
            $("#prescriptionDataGrid").dxDataGrid("option", "dataSource", []);
        }

    }


    // 처방전 팝업 닫을때 데이터 소스 다시 로드
    function reloadPrescription() {

        if (_isEdited) {

            $.ajax({
                type: 'POST',
                url: '/ProductionMaster/GetPrescirptionInfo',
                data: {
                    pSpName: "SP_StandardItemGuide",
                    pGubun: "S6",
                    pItemCd: $("#ItemGuideItemCode").val(),
                    pBatchSize: $("#ItemGuideQuantity").val(),
                    pRevisionNo: $("#ItemGuideRevisionNo").val()
                },
                success: function (result) {

                    if (result.length > 0) {
                        $("#itemPrescriptionDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result));
                    } else {
                        $("#itemPrescriptionDataGrid").dxDataGrid("option", "dataSource", []);
                    }

                    ItemGuide_1Undo();
                }
            });
        }

        _isEdited = false;
        _isEditable = false;
    }

    // 표준량, 사용량 자동계산 / 비율대상공정관련 데이터 확인
    function prescriptionDataCheck(e) {
        _isEdited = true;
        var batchsize = $("#prescriptionBatchSize").val();
        var dataGrid = $("#prescriptionDataGrid").dxDataGrid("instance");
        if (e.parentType == 'dataRow' && e.dataField == 'manufacture_percent') {
            e.editorElement.dxNumberBox('instance').option('onValueChanged', args => {
                e.setValue(args.value);
                var batch_size_unit = $("#prescriptionForm select[name='batch_size_unit']").val();
                var item_bom_tea_unit = dataGrid.cellValue(e.row.rowIndex, "item_bom_tea_unit");
                var item_bom_tea_qty = UnitConvert(args.value, batch_size_unit, item_bom_tea_unit);
                var target_process_cd = dataGrid.cellValue(e.row.rowIndex, "target_process_cd");
                if (target_process_cd == "" || typeof target_process_cd == 'undefined' || target_process_cd == null) {
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_manufacture_qty", item_bom_tea_qty);
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_tea_qty", item_bom_tea_qty);

                    var item_bom_batch_unit = dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit");
                    var item_bom_standard_qty = UnitConvert2(item_bom_tea_qty, item_bom_tea_unit, item_bom_batch_unit, batchsize);
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", item_bom_standard_qty);
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", item_bom_standard_qty);
                }
            });

        } else if (e.parentType == 'dataRow' && e.dataField == 'item_bom_manufacture_qty') {
            e.editorElement.dxNumberBox('instance').option('onValueChanged', args => {

                e.setValue(args.value);

                var res = (args.value) * batchsize;

                if (e.row.data.item_bom_tea_unit == "MG") {
                    if (e.row.data.item_bom_batch_unit == "MG") {

                    } else if (e.row.data.item_bom_batch_unit == "G") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000);
                    } else if (e.row.data.item_bom_batch_unit == "KG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000000);
                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "G") {
                    if (e.row.data.item_bom_batch_unit == "MG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res * 1000);
                    } else if (e.row.data.item_bom_batch_unit == "G") {

                    } else if (e.row.data.item_bom_batch_unit == "KG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000);
                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "KG") {
                    if (e.row.data.item_bom_batch_unit == "MG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res * 1000000);
                    } else if (e.row.data.item_bom_batch_unit == "G") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res * 1000);
                    } else if (e.row.data.item_bom_batch_unit == "KG") {

                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "ML") {
                    if (e.row.data.item_bom_batch_unit == "ML") {

                    } else if (e.row.data.item_bom_batch_unit == "L") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000);
                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "L") {
                    if (e.row.data.item_bom_batch_unit == "ML") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res * 1000);
                    } else if (e.row.data.item_bom_batch_unit == "L") {

                    } else {

                    }
                }

                //if (e.row.data.item_bom_tea_unit == "MG" && res < 1000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "MG");
                //}
                //else if (e.row.data.item_bom_tea_unit == "MG" && (res >= 1000 /*&& res < 1000000*/)) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res/1000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "G");
                //}
                //else if (e.row.data.item_bom_tea_unit == "MG" && res >= 1000000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "KG");
                //}
                //else if (e.row.data.item_bom_tea_unit == "G" && res > 1000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "G");
                //}
                //else if (e.row.data.item_bom_tea_unit == "ML" && res >= 1000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res / 1000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "L");
                //} else {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", res);
                //}

            });
        } else if (e.parentType == 'dataRow' && e.dataField == 'item_bom_tea_qty') {
            e.editorElement.dxNumberBox('instance').option('onValueChanged', args => {

                e.setValue(args.value);

                var res = (args.value) * batchsize;

                if (e.row.data.item_bom_tea_unit == "MG") {
                    if (e.row.data.item_bom_batch_unit == "MG") {

                    } else if (e.row.data.item_bom_batch_unit == "G") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000);
                    } else if (e.row.data.item_bom_batch_unit == "KG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000000);
                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "G") {
                    if (e.row.data.item_bom_batch_unit == "MG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res * 1000);
                    } else if (e.row.data.item_bom_batch_unit == "G") {

                    } else if (e.row.data.item_bom_batch_unit == "KG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000);
                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "KG") {
                    if (e.row.data.item_bom_batch_unit == "MG") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res * 1000000);
                    } else if (e.row.data.item_bom_batch_unit == "G") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res * 1000);
                    } else if (e.row.data.item_bom_batch_unit == "KG") {

                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "ML") {
                    if (e.row.data.item_bom_batch_unit == "ML") {

                    } else if (e.row.data.item_bom_batch_unit == "L") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000);
                    } else {

                    }
                } else if (e.row.data.item_bom_tea_unit == "L") {
                    if (e.row.data.item_bom_batch_unit == "ML") {
                        dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res * 1000);
                    } else if (e.row.data.item_bom_batch_unit == "L") {

                    } else {

                    }
                }

                //if (e.row.data.item_bom_tea_unit == "MG" && res < 1000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "MG");
                //}
                //else if (e.row.data.item_bom_tea_unit == "MG" && (res >= 1000 /*&& res < 1000000*/)) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "G");
                //}
                //else if (e.row.data.item_bom_tea_unit == "MG" && res >= 1000000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "KG");
                //}
                //else if (e.row.data.item_bom_tea_unit == "G" && res > 1000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "G");
                //}
                //else if (e.row.data.item_bom_tea_unit == "ML" && res >= 1000) {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res / 1000);
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit", "L");
                //} else {
                //    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", res);
                //}
            });
        }

        else if (e.parentType == 'dataRow' && e.dataField == 'sum_ck') {
            e.editorElement.dxCheckBox('instance').option('onValueChanged', args => {
                e.setValue(args.value);

                if (args.value) {
                    dataGrid.cellValue(e.row.rowIndex, "target_process_cd", "");
                    dataGrid.cellValue(e.row.rowIndex, "target_process_nm", "");

                    var manufacture_percent = dataGrid.cellValue(e.row.rowIndex, "manufacture_percent");
                    var batch_size_unit = $("#prescriptionForm select[name='batch_size_unit']").val();
                    var item_bom_tea_unit = dataGrid.cellValue(e.row.rowIndex, "item_bom_tea_unit");
                    var item_bom_tea_qty = UnitConvert(manufacture_percent, batch_size_unit, item_bom_tea_unit);

                    dataGrid.cellValue(e.row.rowIndex, "item_bom_manufacture_qty", item_bom_tea_qty);
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_tea_qty", item_bom_tea_qty);

                    var item_bom_batch_unit = dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_unit");
                    var item_bom_standard_qty = UnitConvert2(item_bom_tea_qty, item_bom_tea_unit, item_bom_batch_unit, batchsize);
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_standard_qty", item_bom_standard_qty);
                    dataGrid.cellValue(e.row.rowIndex, "item_bom_batch_qty", item_bom_standard_qty);
                }
            });
        } else if (e.parentType == 'dataRow' && e.dataField == 'item_bom_last_type') {
            e.editorElement.dxCheckBox('instance').option('onValueChanged', args => {
                e.setValue(args.value);
            });
        }
    }

    // 단위 환산
    function UnitConvert(manufacture_percent, batch_size_unit, item_bom_tea_unit) {
        var prescription_item_content = $("#prescriptionForm input#prescriptionItemContent").val();

        if (batch_size_unit == "MG") {

            if (item_bom_tea_unit == "MG") {

            } else if (item_bom_tea_unit == "G") {
                prescription_item_content = prescription_item_content / 1000;
            } else if (item_bom_tea_unit == "KG") {
                prescription_item_content = prescription_item_content / 1000000;
            } else {
                prescription_item_content = 0;
            }
        } else if (batch_size_unit == "G") {

            if (item_bom_tea_unit == "MG") {
                prescription_item_content = prescription_item_content * 1000;
            } else if (item_bom_tea_unit == "G") {

            } else if (item_bom_tea_unit == "KG") {
                prescription_item_content = prescription_item_content / 1000;
            } else {
                prescription_item_content = 0;
            }
        } else if (batch_size_unit == "KG") {

            if (item_bom_tea_unit == "MG") {
                prescription_item_content = prescription_item_content * 1000000;
            } else if (item_bom_tea_unit == "G") {
                prescription_item_content = prescription_item_content * 1000;
            } else if (item_bom_tea_unit == "KG") {

            } else {
                prescription_item_content = 0;
            }
        } else if (batch_size_unit == "ML") {

            if (item_bom_tea_unit == "ML") {

            } else if (item_bom_tea_unit == "L") {
                prescription_item_content = prescription_item_content / 1000;
            } else {
                prescription_item_content = 0;
            }
        } else if (batch_size_unit == "L") {

            if (item_bom_tea_unit == "ML") {
                prescription_item_content = prescription_item_content * 1000;
            } else if (item_bom_tea_unit == "L") {

            } else {
                prescription_item_content = 0;
            }
        }

        //var item_bom_tea_qty = Math.round((prescription_item_content * manufacture_percent / 100), 3);
        var item_bom_tea_qty = prescription_item_content * manufacture_percent / 100;
        return item_bom_tea_qty;
    }


    // 단위 환산2
    function UnitConvert2(item_bom_tea_qty, item_bom_tea_unit, item_bom_batch_unit, batchsize) {
        var item_bom_standard_qty = batchsize * item_bom_tea_qty;
        var batch_size_unit = $("#ItemGuide_Form select[name='batch_size_unit']").val();

        if (batch_size_unit == "KG" || batch_size_unit == "G" || batch_size_unit == "MG") {

            var prescription_batch_size_unit = $("#prescriptionForm select[name='batch_size_unit']").val();
            var prescription_item_content = $("#prescriptionForm input#prescriptionItemContent").val();
            var _batch_size = parseFloat(batchsize);
            if (batch_size_unit == "KG") {

                if (prescription_batch_size_unit == "KG") {

                } else if (prescription_batch_size_unit == "G") {
                    _batch_size = _batch_size * 1000;
                } else if (prescription_batch_size_unit == "MG") {
                    _batch_size = _batch_size * 1000000;
                }

            } else if (batch_size_unit == "G") {

                if (prescription_batch_size_unit == "KG") {
                    _batch_size = _batch_size / 1000;
                } else if (prescription_batch_size_unit == "G") {

                } else if (prescription_batch_size_unit == "MG") {
                    _batch_size = _batch_size * 1000;
                }
            } else if (batch_size_unit == "MG") {

                if (prescription_batch_size_unit == "KG") {
                    _batch_size = _batch_size / 1000000;
                } else if (prescription_batch_size_unit == "G") {
                    _batch_size = _batch_size / 1000;
                } else if (prescription_batch_size_unit == "MG") {

                }
            }
            _batch_size = _batch_size / prescription_item_content;

            if (item_bom_tea_unit == "KG") {
                if (item_bom_batch_unit == "KG") {

                } else if (item_bom_batch_unit == "G") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty * 1000;
                } else if (item_bom_batch_unit = "MG") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty * 1000000;
                } else {

                }
            } else if (item_bom_tea_unit == "G") {

                if (item_bom_batch_unit == "KG") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty / 1000;
                } else if (item_bom_batch_unit == "G") {

                } else if (item_bom_batch_unit = "MG") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty * 1000;
                } else {

                }
            } else if (item_bom_tea_unit == "MG") {

                if (item_bom_batch_unit == "KG") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty / 1000000;
                } else if (item_bom_batch_unit == "G") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty / 1000;
                } else if (item_bom_batch_unit = "MG") {

                } else {

                }
            } else if (item_bom_tea_unit == "ML") {

                if (item_bom_batch_unit == "ML") {

                } else if (item_bom_batch_unit == "L") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty / 1000;
                } else {

                }
            } else if (item_bom_tea_unit == "L") {

                if (item_bom_batch_unit == "ML") {
                    item_bom_standard_qty = _batch_size * item_bom_tea_qty * 1000;
                } else if (item_bom_batch_unit == "L") {

                } else {

                }
            }
            //item_bom_standard_qty = _batch_size * item_bom_tea_qty;

        } else {
            if (item_bom_tea_unit == "KG") {

                if (item_bom_batch_unit == "KG") {

                } else if (item_bom_batch_unit == "G") {
                    item_bom_standard_qty = item_bom_standard_qty * 1000;
                } else if (item_bom_batch_unit = "MG") {
                    item_bom_standard_qty = item_bom_standard_qty * 1000000;
                } else {

                }
            } else if (item_bom_tea_unit == "G") {

                if (item_bom_batch_unit == "KG") {
                    item_bom_standard_qty = item_bom_standard_qty / 1000;
                } else if (item_bom_batch_unit == "G") {

                } else if (item_bom_batch_unit = "MG") {
                    item_bom_standard_qty = item_bom_standard_qty * 1000;
                } else {

                }
            } else if (item_bom_tea_unit == "MG") {

                if (item_bom_batch_unit == "KG") {
                    item_bom_standard_qty = item_bom_standard_qty / 1000000;
                } else if (item_bom_batch_unit == "G") {
                    item_bom_standard_qty = item_bom_standard_qty / 1000;
                } else if (item_bom_batch_unit = "MG") {

                } else {

                }
            } else if (item_bom_tea_unit == "ML") {

                if (item_bom_batch_unit == "ML") {

                } else if (item_bom_batch_unit == "L") {
                    item_bom_standard_qty = item_bom_standard_qty / 1000;
                } else {

                }
            } else if (item_bom_tea_unit == "L") {

                if (item_bom_batch_unit == "ML") {
                    item_bom_standard_qty = item_bom_standard_qty * 1000;
                } else if (item_bom_batch_unit == "L") {

                } else {

                }
            }
        }

        //return Math.round(item_bom_standard_qty, 3);
        return item_bom_standard_qty;
    }


    function ItemGuide_DbClickProcessInsert(e) {
        var grid = $("#itemProcessGrid").dxTreeList("instance");
        if (grid.totalCount() < 0) {
            return;
        }

        if (e.data.process_type == "ZZ") {
            addProcess("Standard");
        } else {
            addProcess("Detail");
        }
    }


    // 대표공정 추가
    function addProcess(type) {

        if (!_isEditable) {
            alert("수정 상태일때만 추가 가능합니다.");
            return;
        }


        var startingKey;
        var processCd;

        var pGubun;

        if (type === "Standard") {
            pGubun = "MC1";

            var datagrid = $("#standardProcessDataGrid").dxDataGrid("instance");
            var datagrid2 = $("#itemProcessGrid").dxTreeList("instance");

            if (datagrid.option("focusedRowIndex") >= 0) {
                startingKey = getGridRowByKey("standardProcessDataGrid", datagrid.option("focusedRowKey")).process_cd;
            } else {
                alert("선택된 대표공정이 없습니다.");

                return;
            }


            if (datagrid2.getSelectedRowsData().length > 0) {
                processCd = datagrid2.getSelectedRowsData();
                processCd = processCd[0].process_cd;
                processCd = processCd.substring(0, processCd.length - 1);
                processCd += "0";
            }

        } else if (type === "Detail") {
            pGubun = "MC4";

            var datagrid = $("#detailProcessDataGrid").dxDataGrid("instance");
            var datagrid2 = $("#itemProcessGrid").dxTreeList("instance");


            if (datagrid.option("focusedRowIndex") >= 0) {
                startingKey = getGridRowByKey("detailProcessDataGrid", datagrid.option("focusedRowKey")).process_cd;
            } else {
                alert("선택된 작업공정이 없습니다.");

                return;
            }

            if (datagrid2.option("focusedRowIndex") < 0) {
                alert("작업공정을 추가할 공정을 선택하세요.");

                return;
            } else {
                processCd = treeListGetFocusedRowData("itemProcessGrid").process_cd;
            }

        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/ProcessCRUD',
            data: {
                pGubun: pGubun,
                item_cd: $("#ItemGuideItemCode").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                batch_size: $("#ItemGuideQuantity").val(),
                process_cd: processCd,
                startingkey: startingKey
            },
            success: function (result) {
                getProcessInfo();
                ItemGuideTreeListAllExpand();
            }
        });
    }



    // 공정 삭제
    function deleteProcess() {
        if (_sign_cnt > 0) {
            alert("승인이 시작된 자료는 수정할 수 없습니다.");
            return;
        }


        var datagrid = $("#itemProcessGrid").dxTreeList("instance");
        var _focusIndexTemp = 0;

        if (datagrid.option("focusedRowIndex") >= 0) {
            data = treeListGetFocusedRowData("itemProcessGrid");

            if (data.level == "1") {
                _focusIndexTemp = datagrid.option("focusedRowIndex") == 0 ? 0 : (datagrid.option("focusedRowIndex") - 1);
            } else {
                _focusIndexTemp = datagrid.option("focusedRowIndex") == (datagrid.totalCount() - 1) ? (datagrid.option("focusedRowIndex") - 1) : (datagrid.option("focusedRowIndex") + 1);
            }


        } else {
            alert("선택된 공정이 없습니다.");

            return;
        }

        processCd = data.process_cd;

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/ProcessCRUD',
            data: {
                pGubun: "D",
                item_cd: $("#ItemGuideItemCode").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                batch_size: $("#ItemGuideQuantity").val(),
                process_cd: processCd
            },
            async: false,
            success: function (result) {
                $("#detailProcessDataGrid").dxDataGrid("instance").option("dataSource", []);
                $("#detailProcessDataGrid").dxDataGrid("instance").option("focusedRowIndex", -1);
                $("#detailProcessDataGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
                $("#detailProcessDataGrid").dxDataGrid("instance").option("focusedRowKey", "");




                var indexInfo = {
                    itemProcessGridIndex: _focusIndexTemp
                }

                GetItemDetail(indexInfo);
            }
        });
    }

    // 공정 전체삭제
    function deleteAllProcess() {
        if (_sign_cnt > 0) {
            alert("승인이 시작된 자료는 수정할 수 없습니다.");
            return;
        }


        if (!confirm("모든 공정을 삭제하시겠습니까?")) {
            return;
        }

        var datagrid = $("#itemProcessGrid").dxTreeList("instance");
        var data = datagrid.getDataSource()._items;

        $.each(data, function (idx, row) {

            if (data[idx].data.level == 1) {

                $.ajax({
                    type: 'POST',
                    url: '/ProductionMaster/ProcessCRUD',
                    data: {
                        pGubun: "D",
                        item_cd: $("#ItemGuideItemCode").val(),
                        revision_no: $("#ItemGuideRevisionNo").val(),
                        batch_size: $("#ItemGuideQuantity").val(),
                        process_cd: data[idx].data.process_cd
                    },
                    async: false,
                    success: function (result) {

                    }
                });
            }
        })

        GetItemDetail();
    }

    // 공정 위치 조정
    function moveProcess(type, method) {
        var _focusIndexTemp = 0;

        if (!_isEditable) {
            alert("수정 상태일때만 조정 가능합니다.");
            return;
        }

        var datagrid = $("#itemProcessGrid").dxTreeList("instance");

        if (datagrid.option("focusedRowIndex") >= 0) {
            data = treeListGetFocusedRowData("itemProcessGrid");
            _focusIndexTemp = datagrid.option("focusedRowIndex");

        } else {
            alert("선택된 공정이 없습니다.");

            return;
        }

        processCd = data.process_cd;

        var ds = datagrid.getDataSource()._items;
        var length1 = 0;
        var length2 = 0;

        for (var i = 0; i < ds.length; i++) {
            if (ds[i].data.level === "1") {

                length1++;

                if (data.standard_process_cd === ds[i].data.process_cd) {
                    length2 = ds[i].children.length;
                }
            }
        }

        var pGubun;

        if (type === "Standard") {

            if (data.level != "1") {
                alert("대표공정을 선택해주세요.");
                return;
            }

            if (method === "UP") {

                if (data.seq <= 1) {
                    alert("첫번째 공정입니다.");
                    return;
                }

                _focusIndexTemp++;

                pGubun = "U4";
            } else if (method === "DOWN") {

                if (data.seq >= length1) {

                    alert("마지막 공정입니다.");
                    return;
                }

                _focusIndexTemp--;

                pGubun = "U5";
            }

        } else if (type === "Detail") {

            if (data.level != "2") {
                alert("세부공정을 선택해주세요.");
                return;
            }

            if (method === "UP") {

                if (data.seq <= 1) {
                    alert("첫번째 공정입니다.");
                    return;
                }

                _focusIndexTemp++;

                pGubun = "U8";
            } else if (method === "DOWN") {

                if (data.seq >= length2) {
                    alert("마지막 공정입니다.");
                    return;
                }

                _focusIndexTemp--;

                pGubun = "U9";
            }

        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/MoveProcess',
            data: {
                pGubun: pGubun,
                item_cd: $("#ItemGuideItemCode").val(),
                batch_size: $("#ItemGuideQuantity").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                process_cd: processCd,
                process_seq: data.seq,
                standard_process_cd: processCd.substring(0, processCd.length - 1) + "0",
                type: type
            },
            success: function (result) {
                getProcessInfo(_focusIndexTemp);
            }

        });
    }

    // 공정정보 얻어오기
    function getProcessInfo() {
        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetProcessInfo',
            data: {
                pGubun: "S2",
                item_cd: $("#ItemGuideItemCode").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                batch_size: $("#ItemGuideQuantity").val()
            },
            success: function (result) {

                if (result <= 0) return;

                var _focusIndexTemp = -1;
                if (arguments.length > 0) {
                    _focusIndexTemp = arguments[0];
                }

                $("#itemProcessGrid").dxTreeList("option", "dataSource", []);
                $("#itemProcessGrid").dxTreeList("option", "dataSource", JSON.parse(result));
                $("#itemProcessGrid").dxTreeList("option", "focusedRowEnabled", true);
                $("#itemProcessGrid").dxTreeList("option", "focusedRowIndex", _focusIndexTemp);
            }

        });
    }

    // 전자서명 테이블 클릭
    function itemGuideSign(e) {

        if (e.column.dataField == "sign_image") {
            _signGubun = "U";

            _itemGuideSignData = e.data;

            if (e.data.prev_sign_yn == "0") {
                alert("먼저 앞 단계 승인이 필요합니다.");
                return;
            }

            if (e.data.sign_yn == "1") {

                if (ItemGuideCheckWorkOrder()) { //제조 대장이 있을 경우
                    alert("해당 개정에 대한 제조지시가 존재합니다. 서명을 취소할 수 없습니다. 개정을 새로 작성하세요."); 
                    return;
                }

                if (confirm("이미 승인 되었습니다. 서명을 삭제하시겠습니까?")) {
                    _signGubun = "U3";
                } else {
                    return;
                }

                if (e.data.next_sign_yn == "1") {
                    alert("이미 다음 단계가 승인 되어 있습니다.\n먼저 다음 단계 승인을 삭제(취소)해주세요. ");
                    return;
                }
            }

            var popup = $("#ItemGuideSignPopup").dxPopup("instance");
            popup.option("contentTemplate", $("#itemguideSignPopupTemplate"));
            popup.show();

        }
    }

    // 서명 권한 체크(id, pw)
    function itemGuideSignSubmit() {

        var data = new FormData($('#ItemGuideSignForm')[0]);
        var datagrid = $("#itemGuideSignTable").dxDataGrid("instance");

        data.set("gubun", "S");

        $.ajax({
            type: 'POST',
            url: '/Comm/IDValidation',
            data: data,
            contentType: false,
            processData: false,
            success: function (result) {

                if (result.length <= 0) {
                    alert("잘못된 ID,PW 입니다.");
                    return;
                }

                var isOK = false;

                if (_itemGuideSignData.responsible_emp_cd !== JSON.parse(result)[0].emp_cd) {

                    $.ajax({
                        type: 'GET',
                        url: '/Comm/DelegateCheck',
                        data: {
                            emp_cd: JSON.parse(result)[0].emp_cd,
                            sign_set_cd: "2003",
                            sign_set_seq: _itemGuideSignData.sign_set_dt_seq
                        },
                        async: false,
                        success: function (result) {

                            if (result.length > 0) {
                                isOK = true;
                            } else {
                                isOK = false;
                            }
                        }
                    });
                } else {
                    isOK = true;
                }

                if (!isOK) {
                    alert("권한이 없는 사용자입니다.");
                    return;
                }

                $("#ItemGuideSignPopup input[name='dept_nm']").val(JSON.parse(result)[0].dept_nm);
                $("#ItemGuideSignPopup input[name='emp_nm']").val(JSON.parse(result)[0].emp_nm);

                var last_seq = false;
                if (datagrid.option("dataSource").length == datagrid.getSelectedRowsData()[0].sign_set_dt_seq) {
                    last_seq = true;
                }

                setTimeout(function () {
                    $.ajax({
                        type: 'POST',
                        url: '/ProductionMaster/SignCRUD',
                        data: {
                            gubun: _signGubun,
                            c_seq: datagrid.getSelectedRowsData()[0].sign_set_dt_seq,
                            emp_cd: JSON.parse(result)[0].emp_cd,
                            item_cd: $("#ItemGuideItemCode").val(),
                            revision_no: $("#ItemGuideRevisionNo").val(),
                            batch_size: $("#ItemGuideQuantity").val(),
                            validation_type: "2",
                            current_ck: $("#ItemGuideForm2 input[name=revision_current_ck]").prop("checked"),
                            last_seq: last_seq
                        },
                        success: function (result) {


                        }
                    });

                    _signGubun = "";
                    GetItemDetail();

                    var popup = $("#ItemGuideSignPopup").dxPopup("instance");
                    popup.hide();
                }, 1000);

            }
        });

    }

    // 서명 인풋 초기화
    function clearSignInput() {
        $('#ItemGuideSignForm')[0].reset();
        $("#ItemGuideSignPopup input[name='dept_nm']").val("");
        $("#ItemGuideSignPopup input[name='emp_nm']").val("");
    }

    // 공정 타품목 복사 메뉴  버튼 클릭
    function itemProcessDetailCopyToggle() {

        var condition = $("#itemProcessDetailCopyToggle").prop("checked");

        if (!condition) {
            $("#standardProcessDiv").removeClass("display-none");
            $("#detailProcessDiv").removeClass("display-none");
            $("#itemProcessDetailCopyDiv").addClass("display-none");
        } else {
            $("#standardProcessDiv").addClass("display-none");
            $("#detailProcessDiv").addClass("display-none");
            $("#itemProcessDetailCopyDiv").removeClass("display-none");
        }

    }

    // 공정 복사
    function copyProcess() {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");

        if (treeList.totalCount() > 0) {
            alert("복사하기 전 현재 공정을 삭제해주세요.");

            return;
        }

        if ($("#ItemGuide_Form select[name='Revision_no']").val() === "NEW") {
            alert("복사할 수 없습니다. 개정번호를 선택하세요.");
            return;
        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/CopyProcess',
            data: {
                pGubun: "C2",
                item_cd: $("#ItemGuideItemCode").val(),
                t_item_cd: $("#ItemGuideItemCode4").val(),
                t_making_dept_cd: $("#ItemGuideQuantity4").val(),
                new_revision_no: $("#ItemGuideRevisionNo").val(),
                revision_no: $("#ItemGuideRevisionNo4").val(),
                batch_size: $("#ItemGuideQuantity").val(),
                batch_size_unit: $("#ItemGuideBatchSizeUnit").val(),
                s_batch_size: $("#ItemGuideQuantity4").val()

            },
            success: function (result) {
               getProcessInfo();
            }

        });
    }

    // 공정 트리리스트 cell 클릭 이벤트
    function getGridPopup(e) {
        if (typeof e.data == "undefined") return;

        if (!$("#itemProcExamDiv").hasClass("display-none")) {
            getProcExam(e.data.process_cd);
        }

        if (!$("#itemWorkGuideDiv").hasClass("display-none")) {
            getWorkGuide(e.data.process_cd);
        }

        if (!_isEditable) {
            return;
        }

        _cellClickEvent = e;

        if (e.row.data.level != "1") {
            switch (e.column.dataField) {
                case "next_process_nm":
                    ItemGuide_getProcPopup();

                    break;
                case "workroom_nm":
                    var workroomPopup1 = $("#ItemGuideWorkRoom1Popup").dxPopup("instance");
                    workroomPopup1.show();
                    break;
                case "item_proc_warehouse_nm":
                    var workroomPopup2 = $("#ItemGuideWorkRoom2Popup").dxPopup("instance");
                    workroomPopup2.show();
                    break;
                case "ccp_nm":
                    var ccpPopup = $("#ItemGuideCcpPopup").dxPopup("instance");
                    ccpPopup.show();
                    break;
            }
        }
    }


    // 다음공정 팝업
    function ItemGuide_getProcPopup() {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");
        var treeData = treeList.getVisibleRows();
        var processArry = new Array();

        for (var i = 0; i < treeData.length; i++) {
            if (treeData[i].data.level == "1") {

                continue;

            } else {

                var _data = {
                    process_cd: treeData[i].data.process_cd,
                    process_nm: treeData[i].data.fieldname
                }

                processArry.push(_data);
            }
        }

        var columns2 = [
            { dataField: "process_cd", caption: "공정코드" },
            { dataField: "process_nm", caption: "공정명" }
        ];

        createPopup("ItemGuideProcess3", "공정조회", JSON.stringify(processArry), columns2);

        var processPopup = $("#ItemGuideProcess3Popup").dxPopup("instance");
        processPopup.show();

    }


    // 공정 트리리스트 컬럼 클릭 이벤트 제한
        function processEditableColumn(cellElement) {

        if (cellElement.rowType != "data" || !cellElement.isEditing)
            return;

        if (cellElement.column.dataField === 'fieldname' && !cellElement.row.inserted)
            cellElement.element.find('input').prop('disabled', true);
        if (cellElement.row.data.level === '1' && !cellElement.row.inserted)
            cellElement.element.find('input').prop('disabled', true);

        if (cellElement.row.data.level === "1" && cellElement.column.dataField == "grouping_cd") {

            cellElement.element.find('input').prop('disabled', false);
        }
    }

    // 공정 트리리스트 부모노드 셀 데이터 감춤
    function ItemGuideHideCheckbox(e) {

        if (e.parentType === "dataRow") {
            if (e.row.node.level === 0 && e.dataField !== "ord1") {
                var cells = e.row.cells;

                e.editorOptions.visible = true;
            }
        }
    }

    function ItemGuideSelectBoxOnChanged(options) {
        if (options.parentType == 'dataRow' && options.dataField == 'ccp_cd') {
            options.editorElement.dxSelectBox('instance').option('onValueChanged', function (e) {

                var treeList = $("#itemProcessGrid").dxTreeList("instance");
                treeList.cellValue(options.row.rowIndex, "ccp_cd", e.value);
                treeList.cellValue(options.row.rowIndex, "ccpChanged", true);
            });
        }
    }

    // 버튼 컬럼
    function ItemGuideCellWithButton(container, cellInfo) {

        if (cellInfo.row.data.level === "1") {
            return;
        }

        if (_isEditable == false) {
            $("<div>").html(cellInfo.value)
                .appendTo(container);
            return;
        }

        $("<div>").html("<div style='float:left; line-height: 2;'>" + (cellInfo.value ? cellInfo.value : "") + "</div><div style='float:right;' class='icon-plus'></div>")
            .appendTo(container);

        $(".icon-plus").dxButton({
            icon: "search",
            onClick: function (e) {

            }
        });
    }

    // 공정 트리리스트 수정
    function processUpdate(info) {

        var data = info.data;

        data.pGubun = "U";
        data.item_cd = $("#ItemGuideItemCode").val();
        data.revision_no = $("#ItemGuide select[name=Revision_no]").val();
        data.batch_size = $("#ItemGuide select[name=batch_size]").val();
        data.item_proc_seq = data.seq;
        data.item_proc_worker1 = data.worker1;
        data.item_proc_worker2 = data.worker2;
        data.item_proc_inspector = data.inspector;

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/ProcessCRUD',
            data: data,
            success: function (result) {

            }
        });
    }

    // 사용확인
    function ItemGuideUseCheck() {

        if (!$("#ItemGuide input[name=revision_sign_end_ck]").prop("checked")) {
            alert("최종 승인 후 사용확인 체크할 수 있습니다.");
            return;
        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/ItemGuideUseChk',
            data: {
                item_cd: $("#ItemGuideItemCode").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                batch_size: $("#ItemGuideQuantity").val()
            },
            success: function (result) {

                var pData = {
                    data: {
                        revision_no: $("#ItemGuideRevisionNo").val()
                    }
                };

                GetRevisionNumber(pData);

                GetItemDetail();
            }
        });

    }

    // 공정검사 조회 : 공정검사설정 버튼 및 좌측 제품공정의 클릭 시 선택된 공정값을 파라미터로 받아 조회한다.
    function getProcExam(processCd) {

        $("#itemProcessExamDataGrid").dxDataGrid("option", "dataSource", []);
        $("#itemProcessExamDataGrid").dxDataGrid("instance").cancelEditData();

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetProcExam',
            data: {
                pGubun: "SX",
                item_cd: $("#ItemGuideItemCode").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                batch_size: $("#ItemGuideQuantity").val(),
                process_cd: processCd
            },
            success: function (result) {

                if (result.length > 0) {
                    $("#itemProcessExamDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result));
                }
                else{
                    $("#itemProcessExamDataGrid").dxDataGrid("option", "dataSource", []);
                }
            }
        });
    }

    // 공정검사 수정
    function ProcExamUpdate(info) {
        var data = info.data;

        data.pGubun = "UX";
        data.batch_size = $("#ItemGuide select[name=batch_size]").val();
        data.mp_ck = "M";       //제조 포장 구분 : M 제조, P 포장
        data.process_cd = "";

        if ($("#itemProcessGrid").dxTreeList("instance").getNodeByKey($("#itemProcessGrid").dxTreeList("option", "focusedRowKey")) != null) {
            data.process_cd = $("#itemProcessGrid").dxTreeList("instance").getNodeByKey($("#itemProcessGrid").dxTreeList("option", "focusedRowKey")).data.process_cd;
        }

        if (data.o_application_ck == "N" && data.application_ck == true) {
            data.pGubun = "IX";
        } else if (data.o_application_ck == "Y" && data.application_ck == false) {
            data.pGubun = "DX";
        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/ProcExamCRUD',
            data: data,
            success: function (result) {
            }
        });
    }

    // 작업방법 조회 : 작업방법 정보 버튼 및 좌측 제품공정의 클릭 시 선택된 공정값을 파라미터로 받아 조회한다.
    function getWorkGuide() {

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetWorkGuide',
            data: {
                pGubun: "S",
                item_cd: $("#ItemGuideItemCode").val(),
                revision_no: $("#ItemGuideRevisionNo").val(),
                batch_size: $("#ItemGuideQuantity").val(),
                process_cd: arguments[0]
            },
            success: function (result) {

                if (result <= 0) {
                    $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("dataSource", []);
                    $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("focusedRowIndex", 0);
                    $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("focusedRowEnabled", false);
                    $("#itemWorkGuideDataGrid").dxDataGrid("instance").option("focusedRowKey", "");

                    return;
                }


                $("#itemWorkGuideDataGrid").dxDataGrid("option", "dataSource", JSON.parse(result));
            }
        });
    }

    // 작업방법 수정
    function ItemWorkGuideInsert(info) {
        ItemWorkGuideCRUD("I", info);
    }

    function ItemWorkGuideUpdate(info) {
        ItemWorkGuideCRUD("U", info);
    }

    function ItemWorkGuideDelete(info) {
        ItemWorkGuideCRUD("D", info);
    }

    function ItemWorkGuideCRUD(pGubun, info) {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");
        var data = info.data;
        data.pGubun = pGubun;
        data.item_cd = $("#ItemGuideItemCode").val();
        data.revision_no = $("#ItemGuideRevisionNo").val();
        data.batch_size = $("#ItemGuide select[name=batch_size]").val();
        data.process_cd = "";

        // proc_rep_yn값이 없을 경우 false값을 입력
        if (typeof data.proc_rep_yn == "undefined") {
            data.proc_rep_yn = "false";
        }

        // proc_rep_yn값이 없을 경우 false값을 입력
        if (typeof data.check_proc == "undefined") {
            data.check_proc = "false";
        }

        if (treeList.getNodeByKey(treeList.option("focusedRowKey")) != null) {
            data.process_cd = treeList.getNodeByKey(treeList.option("focusedRowKey")).data.process_cd;
        }

        if (pGubun == "I") {
            data.workguide_id = "";
        }

        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/ItemWorkGuideCRUD',
            data: data,
            success: function (result) {
                getWorkGuide(data.process_cd);
            }
        });
    }

    // 작업방법 그리드 클릭 시 하단 정보 변경 및 isEditing 상태 시 컬럼 확인 하여 팝업 호출
    function ItemWorkGuideInfo(info) {
        if (typeof info.data == "undefined") return;


        var data = info.data;

        if (data.workguide_es_yn == "Y") {
            $('input:checkbox[name="workguide_es_yn"]').prop("checked", true);
        } else {
            $('input:checkbox[name="workguide_es_yn"]').prop("checked", false);
        }

        if (data.workguide_unnecessary_yn == "Y") {
            $('input:checkbox[name="workguide_unnecessary_yn"]').prop("checked", true);
        } else {
            $('input:checkbox[name="workguide_unnecessary_yn"]').prop("checked", false);
        }

        $('input[name="decimal_cnt"]').val(data.decimal_cnt);

        //isEditing 상태 시 컬럼 확인 하여 팝업 호출
        if (!UtilView.isEmpty(info.row.isEditing)) {
            if (info.column.dataField == "equip_cd") {
                _cellClickEvent = info;

                var equipPopup = $("#ItemGuideEquipPopup").dxPopup("instance");
                equipPopup.show();
            }

            if (info.column.dataField == "workguide_sub_item") {
                _cellClickEvent = info;

                var materialPopup = $("#ItemGuideMaterial2Popup").dxPopup("instance");
                materialPopup.show();
            }
        }
    }

    // 작업정보 설비 팝업 더블클릭
    function ItemGuideEquipRowDblClick(selectedItems) {

        var data = selectedItems.data;

        var dataGrid = $("#itemWorkGuideDataGrid").dxDataGrid("instance");

        dataGrid.cellValue(_cellClickEvent.rowIndex, "equip_cd", data.equip_cd);
        dataGrid.cellValue(_cellClickEvent.rowIndex, "equip_nm", data.equip_nm);

        var materialPopup = $("#ItemGuideEquipPopup").dxPopup("instance");
        materialPopup.hide();
    }

    // 작업방법 하단 변경 시 그리드 히든 필드값 변경
    function changeGridVal() {
        var grid = $("#itemWorkGuideDataGrid").dxDataGrid("instance");
        var rows = grid.getVisibleRows();
        var rowIndex = $("#itemWorkGuideDataGrid").dxDataGrid("option", "focusedRowIndex");

        if (rowIndex < 0) {
            $('input:checkbox[name="workguide_es_yn"]').prop("checked", false);
            $('input:checkbox[name="workguide_unnecessary_yn"]').prop("checked", false);
            $('input[name="decimal_cnt"]').val("");
            return;
        }

        var GuideGridisEditing = rows[rowIndex].isEditing;

        if (GuideGridisEditing) {
            if ($('input:checkbox[name="workguide_es_yn"]').is(":checked")) {
                grid.cellValue(rowIndex, 'workguide_es_yn', "Y");
            } else {
                grid.cellValue(rowIndex, 'workguide_es_yn', "N");
            }

            if ($('input:checkbox[name="workguide_unnecessary_yn"]').is(":checked")) {
                grid.cellValue(rowIndex, 'workguide_unnecessary_yn', "Y");
            } else {
                grid.cellValue(rowIndex, 'workguide_unnecessary_yn', "N");
            }

            grid.cellValue(rowIndex, 'decimal_cnt', $('input[name="decimal_cnt"]').val());
        }
        ItemWorkGuideInfo(rows[rowIndex]);
    }

    // 원료투입 자동 줄추가
    function ItemBOMWorkGuideAdd() {
        var Procgrid = $("#itemProcessGrid").dxTreeList("instance");
        var data = Procgrid.getVisibleRows();
        var dataIndex = $("#itemProcessGrid").dxTreeList("option", "focusedRowIndex");

        var rowIndex;

        //수정 상태가 아니면 실행 안함
        if (!_isEditable) {
            return;
        }

        //세부공정이 선택된 상태가 아니면 실행 안함
        if (UtilView.isEmpty(data) || dataIndex == -1 || data[dataIndex].data.level != 2) {
            return;
        }

        DevExpress.ui.notify({ message: "제품 원료조회 및 작업방법 생성 중 입니다. 잠시 기다려주세요.", height: "120", position: "top center" }, "info", 600);

        //공정BOM 정보 조회
        $.ajax({
            type: 'POST',
            url: '/ProductionMaster/GetItemBomData',
            data: {
                pSpName: "SP_StandardItemGuide",
                pGubun: "S8",
                pItemCd: $("#ItemGuideItemCode").val(),
                pBatchSize: $("select[name=batch_size]").val(),
                pRevisionNo: $("select[name=Revision_no]").val()
            },
            success: function (result) {

                var jsonResult = JSON.parse(result);

                if (jsonResult != null) {
                    //원 화면의 기능은 조회된 BOM 정보를 팝업으로 띄워서 선택된 것만 작업방법으로 등록해야 함. 추후 기능 수정 필요
                    //현재는 등록된 원료를 전부 작업방법으로 등록하는 형태로 되어 있음.

                    var grid = $("#itemWorkGuideDataGrid").dxDataGrid("instance");
                    var idx = $("#itemWorkGuideDataGrid").dxDataGrid("option", "dataSource").length + 1;

                    if (jsonResult.length > 0) {
                        for (var i = 0; i < jsonResult.length; i++){
//                            if (jsonResult[i].chk == "Y") {
                            grid.addRow();

                            grid.cellValue(0, 'workguide_seq', idx + i); //원료코드
                            grid.cellValue(0, 'workguide_sub_item', jsonResult[i].item_bom_child_cd); //원료코드
                            grid.cellValue(0, 'workguide_sub_item_nm', jsonResult[i].item_bom_child_nm); //원료명
                            grid.cellValue(0, 'workguide_method', jsonResult[i].item_bom_child_nm); //작업방법
                            grid.cellValue(0, 'workguide_min_manage', jsonResult[i].item_bom_standard_qty); //관리min
                            grid.cellValue(0, 'workguide_max_manage', jsonResult[i].item_bom_standard_qty); //관리max
                            grid.cellValue(0, 'workguide_min_permit', jsonResult[i].item_bom_standard_qty); //허가min
                            grid.cellValue(0, 'workguide_max_permit', jsonResult[i].item_bom_standard_qty); //허가max
                            grid.cellValue(0, 'workguide_data_type', "g(B)"); //작업방법

                            var rows = grid.getVisibleRows();
                            //신규데이터 저장
                            ItemWorkGuideCRUD("I", rows[0]);
//                            }
                        }
                    }

                }
            }
        });

    }

    // 세부공정이 아닌 경우 작업방법 추가 취소 및 작업방법 추가 시 순서 자동 생성
    function initItemWorkguideSeq(e) {

        var Procgrid = $("#itemProcessGrid").dxTreeList("instance");
        var rowIndex = $("#itemProcessGrid").dxTreeList("option", "focusedRowIndex");
        var rows = Procgrid.getVisibleRows();

        if (UtilView.isEmpty(rows) || rowIndex == -1 || rows[rowIndex].data.level != 2) //세부공정이 선택된 상태가 아니면 추가된 row삭제
        {
            DevExpress.ui.notify({ message: "세부공정을 선택해야 작업방법을 입력 할 수 있습니다.", height: "120", position: "top center" }, "info", 600);
            window.setTimeout(function () { e.component.cancelEditData(); }, 0)
        } else {
            var ds = $("#itemWorkGuideDataGrid").dxDataGrid("option", "dataSource");
            e.data.workguide_seq = (ds.length + 1);
        }
    }

    function ItemGuideResetInsertForm() {
        $("#ItemGuideInputForm")[0].reset();
        $("#ItemGuideInputForm textarea").text("");
    }

    function ItemGuideResetInfoForm() {
        $("#itemRevisionInfoForm")[0].reset();
        $("#itemRevisionInfoForm textarea").text("");
    }

    function ItemGuideParentNodeBackgroundColor(e) {

        if (e.rowType === "data" && e.level == 0) {
            e.rowElement[0].style.backgroundColor = '#e8e8e8';
        }
    }


    function RowSelectReset() {
        var grid = $("#prescriptionDataGrid").dxDataGrid("instance");
        grid.option("focusedRowEnabled", true);
        var gridData = grid.getVisibleRows();

        for (var i = 0; i < gridData.length; i++) {
            grid.cellValue(i, "row_check", false);
        }
    }


    function ItemGudie_ContentResize() {
        var topPoint = document.querySelector("div#itemProcessDiv div.align-end-only").getBoundingClientRect().bottom;
        var content_max_height = window.innerHeight - topPoint - 20;

        // 공정 그리드
        document.getElementById("itemProcessGrid").style.height = content_max_height + "px";

        // 공정정보 대표공정 그리드
        document.getElementById("standardProcessDataGrid").style.height = (content_max_height - 25) + "px";

        // 공정정보 작업공정 그리드
        document.getElementById("detailProcessDataGrid").style.height = (content_max_height - 25) + "px";

        // 처방전 정보 그리드
        document.getElementById("itemPrescriptionDataGrid").style.height = content_max_height + "px";

        // 공정검사 설정 그리드
        var div_align_end_only_height = $("div#ItemGuide div.align-end-only").eq(1).height() + 2;
        document.getElementById("itemProcessExamDataGrid").style.height = content_max_height + div_align_end_only_height + "px";

        // 작업방법 정보 그리드
        document.getElementById("itemWorkGuideDataGrid").style.height = (content_max_height + div_align_end_only_height - 51) + "px";

        // 타품목에서 복사
        var div_mt = $("div#itemProcessDetailCopyDiv div.menuDiv").css("margin-top").replace(/[^-\d\.]/g, '');
        var div_mb = $("div#itemProcessDetailCopyDiv div.menuDiv").css("margin-bottom").replace(/[^-\d\.]/g, '');
        var conent_height = content_max_height + div_align_end_only_height - div_mt - div_mb - 27;

        document.querySelector("div#itemProcessDetailCopyDiv div.menuDiv").style.height = conent_height + "px";

    }


    // 그리드editing 버튼 숨김
    function ItemGuideHideSaveButton(e) {
        e.toolbarOptions.visible = false;
    }


    // 공정 TreeList 저장 전 작업실 입력 여부 확인
    function ItemGuide_WorkroomCheck() {
        var treeList = $("#itemProcessGrid").dxTreeList("instance");
        var workroom_check = true;

        if (treeList.totalCount() > 0) {
            var data = treeList.getVisibleRows();

            for (var i in data) {
                if (data[i].data.level != "1") {
                    if (data[i].data.workroom_cd == null || data[i].data.workroom_cd == "") {
                        workroom_check = false;

                        return;
                    }
                }
            }

        }

        return workroom_check;
    }


    function ItemGuide_TreeListTransferChagne() {


        if ('@Public_Function.process_transfer_yn' == "N") {
            var treeList = $("#itemProcessGrid").dxTreeList("instance");
            treeList.columnOption("item_proc_transfer_ck", "visible", false);
        }
        }

        // 통합 제조기록서 미리보기(품목에 해당하는 개정번호를 기준으로 조회)
        // 20201.03.05 박가희 추가(아오스 요청으로 인한 작업)
        function ItemGuidePrint() {
            var btnType;
            btnType = $(event.target).closest('.dx-button').attr('id');

            var report = new ReportHelper();

            var item_cd = $("#ItemGuide_Form #ItemGuideItemCode").val();
            var revision_no = $("#ItemGuide_Form select[name=Revision_no]").val();

            //품목과 그에 해당하는 개정번호가 있을때
            if ((item_cd != "" && item_cd != null) && (revision_no != "" && revision_no != null)) {

                //report.addParam({
                //    objFile: { path: "ProductionMaster", RptFileName: "ItemGuideRPT" },
                //    objSp: { SpName: "SP_ItemGuideRPT", gubun: "S", reportParam: "item_cd:" + item_cd + ";revision_no:" + revision_no },
                //    objEtcInfo: { subParam: "" },
                //    objTblNm: {
                //        tblName: "WorkSheetW_header,WorkSheetW_order_weighing,WorkSheetW_sum,WorkSheetW_order_procB,WorkSheetW_order_item_bom,WorkSheetW_sum_bom,WorkSheetHistory_Header,WorkSheetHistory_History,OrderIssue_Header,OrderIssue_TotalRate," +
                //            "WorkSheet_Master,WorkSheet_Header,WorkSheet_OrderProc"
                //    },
                //    objSub: { subRptName: "WorkSheetWRA.rpt,WorkSheetWRB.rpt,WorkSheetWR.rpt,WorkSheetWRC.rpt,WorkSheetHistory.rpt,OrderIssue2.rpt,WorkSheet.rpt" }

                //});

                report.addParam({
                    objFile: { path: "ProductionMaster", RptFileName: "ItemGuideRPT" },
                    objSp: { SpName: "SP_ItemGuideReport", gubun: "M", reportParam: "item_cd:" + item_cd + ";revision_no:" + revision_no },
                    objEtcInfo: { subParam: "" },
                    objTblNm: {
                        tblName: "WorkSheetHistory_Header,WorkSheetHistory_History,WorkSheetW_Header,WorkSheetW_order_item_bom,WorkSheetW_sum_bom"   
                    },
                    objSub: { subRptName: "WorkSheetHistory.rpt,WorkSheetWRA.rpt" }

                });

                report.addParam({
                    objFile: { path: "ProductionMaster", RptFileName: "WorkSheet" },
                    objSp: { SpName: "SP_ItemGuideReport", gubun: "WorkSheet", reportParam: "item_cd:" + item_cd + ";revision_no:" + revision_no +";mp_ck:M"},
                    objEtcInfo: { subParam: "" },
                    objTblNm: {
                        tblName: "WorkSheet_Header,WorkSheet_OrderProc,WorkSheet_PrevCheck,WorkSheet_PrevCheck_Equip"
                    },
                    objSub: { subRptName: "PrevCheck,PrevCheck_Equip" }

                });

                if (btnType.indexOf('Preview') > -1) {
                    report.preview();
                } else if (btnType.indexOf('Print') > -1) {
                    report.print();
                }

            } else {
                alert("품목을 선택하시고, 개정데이터를 입력하세요");
            }
    }

    //작업방법 정보 수정시, 반복여부 또는 점검항목 체크시 하나만 체크되도록 설정
    function ItemGuideInfoCheck(e) {
        //반복여부, 점검항목 컬럼일 경우
        var grid = $("#itemWorkGuideDataGrid").dxDataGrid("instance");

        if (e.parentType == 'dataRow' && (e.dataField == 'proc_rep_yn' || e.dataField == 'check_proc')) {

            e.editorElement.dxCheckBox('instance').option('onValueChanged', args => {
                var value = args.value;

                //반복여부, 점검항목 둘 중 하나만 체크 가능
                if (e.dataField == 'proc_rep_yn' && value) {
                    grid.cellValue(e.row.rowIndex, "proc_rep_yn", true);
                    grid.cellValue(e.row.rowIndex, "check_proc", false);
                }

                else if (e.dataField == 'check_proc' && value) {
                    grid.cellValue(e.row.rowIndex, "proc_rep_yn", false);
                    grid.cellValue(e.row.rowIndex, "check_proc", true);

                }
                else {
                    grid.cellValue(e.row.rowIndex, "proc_rep_yn", false);
                    grid.cellValue(e.row.rowIndex, "check_proc", false);
                }
            })
        }
    }

    //개정에 대한 제조대장이 있는지 확인
    function ItemGuideCheckWorkOrder() {
        var item_cd = $("#ItemGuideItemCode").val();
        var revision_no = $("#ItemGuide select[id=ItemGuideRevisionNo]").val();

        var check = "N";

        $.ajax({
            type: 'POST',
            async: false,
            url: '/ProductionMaster/ItemGuideCheckWorkOrder',
            data: {
                item_cd: item_cd,
                revision_no: revision_no
            },
            success: function (result) {
                check = result;
            }
        });

        if ("Y" == check) return true;
        else if ("N" == check) return false;
    }

</script>


<div id="@(pagePrefix)" page-ctrl-name="@(pageControllerNm)">

    @* === 원료 팝업 === *@
    <div id="ItemGuideItemPopup"></div>
    <div id="ItemGuideItem2Popup"></div>
    <div id="ItemGuideItem3Popup"></div>
    <div id="ItemGuideItem4Popup"></div>

    <div id="ItemGuideProcessPopup"></div>
    <div id="ItemGuideProcess2Popup"></div>
    <div id="ItemGuideProcess3Popup"></div>

    <div id="ItemGuideMaterialPopup"></div>
    <div id="ItemGuideMaterial2Popup"></div>

    <div id="ItemGuideWorkRoom1Popup"></div>
    <div id="ItemGuideWorkRoom2Popup"></div>

    <div id="ItemGuideEquipPopup"></div>

    <div id="ItemGuideCcpPopup"></div>


    @*처방전 입력 시 엑셀파일 업로드를 위한 input type[file]*@
    <div class="display-none">
        <input type="file" id="excel_upload" accept=".xls, .xlsx" />  @*Microsoft의 스프레드시트 확장자 .xls, xlsx 만 입력할 수 있도록 설정*@
    </div>


    @* === 제조 공정도 팝업 === *@
    @(Html.DevExtreme().Popup()
        .ID("ItemGuide_ProcessInfomationPopup")
        .Width(600)
        .Height(700)
        .ShowTitle(true)
        .Title("제조 공정도")
        .Visible(false)
        .DragEnabled(true)
        .CloseOnOutsideClick(true)
    )
    @using (Html.DevExtreme().NamedTemplate("ItemGuide_ProcessInfomationPopupTemplate"))
    {
        <div>
            @(Html.DevExtreme().Diagram()
                .ID("ItemGuide_ProcInfoDiagram")
                .ViewToolbar(vt => vt.Visible(false))
                .Toolbox(tb => tb.Visibility(DiagramPanelVisibility.Disabled))
                .HistoryToolbar(ht => ht.Visible(false))
                .ReadOnly(true)
                .SimpleView(true)
                .ShowGrid(false)
                .ContextMenu(cm => cm.Enabled(false))
            )
        </div>
    }

    @*작업방법 복사 팝업*@
    @(Html.DevExtreme().Popup()
        .ID("ItemWorkGuideCopyPopup")
        .Width(1200)
        .Height(720)
        .ShowTitle(true)
        .Title("작업방법 조회")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(true)
        //.OnHiding("ItemGuide2GetItemDetail")
    )
    @* === 개정 조회 팝업 === *@
    @(Html.DevExtreme().Popup()
        .ID("ItemGuideRevisionPopup")
        .Width(1200)
        .Height(720)
        .ShowTitle(true)
        .Title("개정 조회")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(true)
    )

    @using (Html.DevExtreme().NamedTemplate("revisionPopupTemplate"))
    {
        <form>
            <label>마지막 개정만 표시</label>
            <input type="checkbox" value="Y" id="latestRevisionCk" onchange="setRevisionDataSource()" />
            <label>승인여부</label>
            <input type="checkbox" value="Y" id="revisionSignEndCk" onchange="setRevisionDataSource()" />
            <label>사용여부</label>
            <input type="checkbox" value="Y" id="revisionCurrentCk" onchange="setRevisionDataSource()" />
        </form>

        @(Html.DevExtreme().ScrollView()
            .Width("100%")
            .Height("100%")
            .Content(@<text>
                @(Html.DevExtreme().DataGrid()
                    .ID("revisionDataGrid")
                    .ShowBorders(true)
                    .ShowColumnLines(true)
                    .ShowRowLines(true)
                    .SearchPanel(searchPanel => searchPanel.Visible(true))
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                    .Height(600)
                    .AllowColumnResizing(true)
                    .Columns(columns =>
                    {
                        columns.Add()
                            .DataField("item_cd")
                            .Caption("품목코드");
                        columns.Add()
                            .DataField("item_nm")
                            .Caption("품목명");
                        columns.Add()
                            .DataField("revision_num")
                            .Caption("개정번호");
                        columns.Add()
                            .DataField("revision_remark")
                            .Caption("개정사유");
                        columns.Add()
                            .DataField("batchsize")
                            .Caption("수량");

                        columns.Add()
                            .DataField("batchsize_unit_cd")
                            .Caption("단위");
                        columns.Add()
                            .DataField("accept_yn")
                            .Caption("최종승인여부");
                    })
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .OnRowDblClick("revisionDbClick")
                )
            </text>)
        )
    }

    @* === 처방전 팝업 === *@
    @(Html.DevExtreme().Popup()
        .ID("prescriptionPopup")
        .Width(1850)
        .Height(950)
        .ShowTitle(true)
        .Title("원료약품분량 설정")
        .Visible(false)
        .DragEnabled(false)
        .CloseOnOutsideClick(false)
        .OnHiding("reloadPrescription")
    )

    @using (Html.DevExtreme().NamedTemplate("prescriptionPopupTemplate"))
    {

        <form id="prescriptionForm">

            <div class="row">

                <div class="col-9">
                    <div class="input-wrapper">

                        <label class="col-1">제조제품</label>
                        <div class="input-group col-8">
                            <input type="text" class="form-control col-2" id="prescriptionItemCd" readonly="readonly">
                            <input type="text" class="form-control col-10" id="prescriptionItemNm" readonly="readonly">
                        </div>

                    </div>

                    <div class="input-wrapper">

                        <label class="col-1">배치사이즈</label>
                        <div class="input-group col-1">
                            <input type="text" class="form-control" id="prescriptionBatchSize" readonly="readonly">
                        </div>

                        <label class="col-1">단위중량</label>
                        <div class="input-group col-2">
                            <input type="text" class="form-control col-4" id="prescriptionItemContent" readonly="readonly">
                            <select class="form-control col-3" name="batch_size_unit" id="prescriptionBatchSizeUnit" readonly="readonly" disabled>
                                @foreach (DataRow row in ((DataTable)ViewBag.unitGubuns).Rows)
                                {
                                    <option value="@row["keyfield"]">@row["displayfield"]</option>
                                }
                            </select>
                        </div>

                        <label class="col-1">피막단위중량</label>
                        <div class="input-group col-1">
                            <input type="text" class="form-control" readonly="readonly" />
                        </div>

                        <label class="col-1">피막단위중량</label>
                        <div class="input-group col-1">
                            <input type="text" class="form-control" readonly="readonly" />
                        </div>
                    </div>
                </div>

                <div class="col-3">
                    @*@{Html.SetToolbar(1, true, "Edit;Save;Undo;Excel");}*@

                    @(Html.DevExtreme().Toolbar()
                        .Items(items =>
                            {
                                items.Add()
                                    .Widget(w =>
                                        w.Button()
                                        .Type(ButtonType.Default)
                                        .StylingMode(ButtonStylingMode.Contained)
                                        .ID("ItemGuide_1Edit")
                                        .Icon("edit")
                                        .Text("수정")
                                        .OnClick("ItemGuide_1Edit")
                                    )
                                    .Location(ToolbarItemLocation.After);
                            }
                        )

                        .Items(items =>
                            {
                                items.Add()
                                    .Widget(w =>
                                        w.Button()
                                        .Type(ButtonType.Default)
                                        .StylingMode(ButtonStylingMode.Contained)
                                        .ID("ItemGuide_1Save")
                                        .Icon("save")
                                        .Text("저장")
                                        .OnClick("ItemGuide_1Save")
                                    )
                                    .Location(ToolbarItemLocation.After);
                            }
                        )

                        .Items(items =>
                            {
                                items.Add()
                                    .Widget(w =>
                                        w.Button()
                                        .Type(ButtonType.Default)
                                        .StylingMode(ButtonStylingMode.Contained)
                                        .ID("ItemGuide_1Undo")
                                        .Icon("undo")
                                        .Text("취소")
                                        .OnClick("ItemGuide_1Undo")
                                    )
                                    .Location(ToolbarItemLocation.After);
                            }
                        )

                        .Items(items =>
                            {
                                items.Add()
                                    .Widget(w =>
                                        w.Button()
                                        .Type(ButtonType.Default)
                                        .StylingMode(ButtonStylingMode.Contained)
                                        .ID("ItemGuide_1Excel")
                                        .Icon("xlsxfile")
                                        .Text("엑셀")
                                        .OnClick("ItemGuide_1Excel")
                                    )
                                    .Location(ToolbarItemLocation.After);
                            }
                        )

                        .Items(items =>
                            {
                                items.Add()
                                    .Widget(w =>
                                        w.Button()
                                        .Type(ButtonType.Default)
                                        .StylingMode(ButtonStylingMode.Contained)
                                        .ID("ItemGuide_1Upload")
                                        .Icon("upload")
                                        .Text("엑셀 업로드")
                                        .OnClick("ItemGuide_1Upload")
                                    )
                                    .Location(ToolbarItemLocation.After);
                            }
                        )
                    )



                </div>

            </div>

        </form>

        <hr />

        <div class="">

            <div class="display-flex margin-10 row">

                <fieldset class="border prescriptionFieldSet col-3">
                    <legend class="prescriptionLegend">공정 일괄 적용</legend>
                    <div class="input-group col-5">
                        <input type="text" id="ItemGuideProcessCode" class="form-control" name="process_cd">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" id="searchProcessBtn" onclick="searchProcess()">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>
                    <input type="text" id="ItemGuideProcessName" class="form-control col-4" name="process_nm" />

                    <input type="button" value="공정적용" class="btn btn-secondary" onclick="changeProcess()" />
                    <br />
                </fieldset>

                <fieldset class="border prescriptionFieldSet col-3">
                    <legend class="prescriptionLegend">단위 일괄 적용</legend>

                    <select id="prescriptionUnit" class="form-control col-3">
                        <!-- <option value="" selected disabled hidden> </option> -->
                        @foreach (DataRow row in ((DataTable)ViewBag.unitGubuns).Rows)
                        {
                            <option value="@row["keyfield"]">@row["displayfield"]</option>
                        }
                    </select>

                    <input type="button" onclick="changeUnit(1)" value="허가량 단위 적용" class="btn btn-secondary" />
                    <input type="button" onclick="changeUnit(2)" value="사용량 단위 적용" class="btn btn-secondary" />

                </fieldset>

                <fieldset class="border prescriptionFieldSet col-5">

                    <legend class="prescriptionLegend">처방전 복사</legend>

                    <div class="input-group col-2">
                        <input type="text" id="ItemGuideItemCode2" class="form-control">
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" id="searchItem2Btn" onclick="SearchItem2()">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>
                    </div>

                    <input type="text" id="ItemGuideItemName2" class="form-control col-3" />

                    <select id="ItemGuideQuantity2" onchange="GetRevisionNumber2()" class="form-control col-2">
                    </select>

                    <select id="ItemGuideRevisionNo2" class="form-control col-3">
                    </select>

                    <input type="button" id="copyPrescriptionBtn" onclick="CopyPrescription()" value="복사" class="btn btn-secondary" />

                </fieldset>

            </div>

            <button class="btn btn-secondary" onclick="AllRowSelect()" id="allRowSelect_Btn" state="select">전체 선택</button>
            <button class="btn btn-secondary" onclick="deleteCheckedPrescription()">선택 삭제</button>

            @(Html.DevExtreme().ScrollView()
            .Width("100%")
            .Height("100%")
            .Content(@<text>
                @(Html.DevExtreme().DataGrid<HACCP.Models.ProductionMaster.Prescription>()
                    .ID("prescriptionDataGrid")
                    .KeyExpr("item_bom_id")
                    .DataSource(new JS("setPrescriptionData"))
                    .Editing(editing =>
                    {
                        editing.Mode(GridEditMode.Row);
                        editing.AllowAdding(false);
                        editing.AllowDeleting(false);
                        editing.AllowUpdating(false);
                    })
                    .ShowBorders(true)
                    .ColumnAutoWidth(true)
                    .ShowColumnLines(true)
                    .ColumnMinWidth(50)
                    .SearchPanel(searchPanel => searchPanel.Visible(true))
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual))
                    .Height(670)
                    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                    .AllowColumnResizing(true)
                    //.Selection(s => s.Mode(SelectionMode.Multiple)
                    //    .ShowCheckBoxesMode(GridSelectionShowCheckBoxesMode.Always))
                    .Columns(c =>
                    {

                        c.Add()
                        .DataField("row_check")
                        .DataType(GridColumnDataType.Boolean)
                        .CalculateCellValue(@"function(rowData) { return (rowData.row_check == ""Y"" || rowData.row_check == true); }")
                        .Caption("선택")
                        .Width("50")
                        .Fixed(true);

                        c.Add()
                        .Caption("사용원료")
                        .Fixed(true)
                        .Columns(a =>
                        {
                            a.Add()
                            .DataField("item_bom_seq")
                            .DataType(GridColumnDataType.Number)
                            .Caption("순서")
                            .Width("50");
                            a.Add()
                            .DataField("process_cd")
                            .DataType(GridColumnDataType.String)
                            .Caption("공정코드");

                            a.Add()
                            .DataField("process_nm")
                            .DataType(GridColumnDataType.String)
                            .AllowEditing(false)
                            .Caption("공정");
                            a.Add()
                            .DataField("item_bom_child_cd")
                            .DataType(GridColumnDataType.String)
                            .Caption("원료코드");
                            a.Add()
                            .DataField("item_bom_child_nm")
                            .DataType(GridColumnDataType.String)
                            .AllowEditing(false)
                            .Caption("원료");
                            a.Add()
                            .Caption("공급사")
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new {
                                        pGubun = "공통코드"
                                        , pDiv = "D"
                                        , pStrWhere = "CM064"
                                        , pTableName = "Trade"
                                    }
                                    ).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                            ).DataField("trade_cd")
                            .DataType(GridColumnDataType.String);
                            a.Add()
                            //.Caption("원료구분")
                            .Caption("규격")
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드"
                                        , pDiv = "D"
                                        , pStrWhere = "CM003"
                                        , pTableName = "1"
                                    }
                                    ).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                            ).DataField("item_case_cd")
                            .DataType(GridColumnDataType.String);
                        });

                        c.Add()
                        .Caption("사용량")
                        .Columns(a =>
                        {

                            a.Add()
                            .DataField("target_process_cd")
                            .DataType(GridColumnDataType.String)
                            .Caption("비율대상공정코드");
                            a.Add()
                            .DataField("target_process_nm")
                            .DataType(GridColumnDataType.String)
                            .AllowEditing(false)
                            .Caption("비율대상공정");
                            a.Add()
                            .DataField("manufacture_percent")
                            .DataType(GridColumnDataType.Number)
                            .Caption("허가비율(%)")
                            .Width("100")
                            .Format("#,##0.000");
                            a.Add()
                            .DataField("item_bom_manufacture_qty")
                            .DataType(GridColumnDataType.Number)
                            .Caption("허가량")
                            .Width("80")
                            .Format("#,##0.000");
                            a.Add()
                            .DataField("item_bom_tea_qty")
                            .DataType(GridColumnDataType.Number)
                            .Caption("제조량")
                            .Width("80")
                            .Format("#,##0.000");
                            a.Add()
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드"
                                        ,
                                        pDiv = "D"
                                        ,
                                        pStrWhere = "CM012"
                                        ,
                                        pTableName = "2"
                                    }).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                            ).DataField("item_bom_tea_unit")
                            .DataType(GridColumnDataType.String)
                            .Caption("단위")
                            .Width("50");
                            a.Add()
                            .DataField("item_bom_standard_qty")
                            .DataType(GridColumnDataType.Number)
                            .Caption("표준량")
                            .Width("120")
                            .Format("#,##0.000");
                            a.Add()
                            .DataField("item_bom_batch_qty")
                            .DataType(GridColumnDataType.Number)
                            .Caption("사용량")
                            .Width("120")
                            .Format("#,##0.000");
                            a.Add()
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드"
                                        , pDiv = "D"
                                        , pStrWhere = "CM012"
                                        , pTableName = "2"
                                    }).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                            ).DataField("item_bom_batch_unit")
                            .DataType(GridColumnDataType.String)
                            .Caption("단위")
                            .Width("50");
                            a.Add()
                            .DataField("sum_ck")
                            .DataType(GridColumnDataType.Boolean)
                            .Caption("총중량반영");
                        });
                        c.Add()
                        .Caption("칭량 및 기록서 옵션")
                        .Columns(a =>
                        {

                            a.Add()
                                .DataField("item_bom_standard_ucl_qty")
                                .DataType(GridColumnDataType.Number)
                                .Caption("칭량허용오차(%)")
                                .Format("#,##0.####");
                        });
                        c.Add()
                        .Caption("계산방법")
                        .Columns(a =>
                        {
                            a.Add()
                            .Caption("계산법")
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드"
                                        , pDiv = "D"
                                        , pStrWhere = "WR004"
                                        , pTableName = "2"
                                    }
                                    ).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                            ).DataField("item_bom_calc_type")
                            .DataType(GridColumnDataType.String);
                            a.Add()
                            .DataField("item_bom_last_type")
                            .DataType(GridColumnDataType.Boolean)
                            .Caption("중량보정");
                            a.Add()
                            .DataField("item_bom_use_rate")
                            .DataType(GridColumnDataType.Number)
                            .Format("#,##0.000")
                            .Caption("OverAge(%)");
                            a.Add()
                            .DataField("item_bom_specific_gravity")
                            .DataType(GridColumnDataType.Number)
                            .Format("#,##0.000")
                            .Caption("비중");
                            a.Add()
                            .Caption("계산옵션")
                            .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new
                                    {
                                        pGubun = "소수점자리수"
                                        , pDiv = "D"
                                        , pStrWhere = "CM083"
                                        , pTableName = "3"
                                    }
                                    ).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                            ).DataField("item_bom_rounding")
                            .DataType(GridColumnDataType.String);
                        });

                        c.Add()
                            .DataField("remark")
                            .Caption("기타")
                            .DataType(GridColumnDataType.String);

                    })
                    .ColumnFixing(cf => cf.Enabled(true))
                    .Summary(s =>
                        s.TotalItems(items =>
                            items.Add()
                                .Column("item_bom_last_type")
                                .DisplayFormat("Sum:")
                            )
                        //허가비율
                        .TotalItems(items =>
                            items.Add()
                                .Name("manufacture_percent_summary")
                                .ShowInColumn("manufacture_percent")
                                .DisplayFormat("{0}")
                                .ValueFormat("#,##0.000")
                                .SummaryType(SummaryType.Custom)
                            )
                        //허가량
                        .TotalItems(items =>
                            items.Add()
                                .Name("item_bom_manufacture_qty_summary")
                                .ShowInColumn("item_bom_manufacture_qty")
                                .DisplayFormat("{0}")
                                .ValueFormat("#,##0.000")
                                .SummaryType(SummaryType.Custom)
                            )
                        //제조량
                        .TotalItems(items =>
                            items.Add()
                                .Name("item_bom_tea_qty_summary")
                                .ShowInColumn("item_bom_tea_qty")
                                .DisplayFormat("{0}")
                                .ValueFormat("#,##0.000")
                                .SummaryType(SummaryType.Custom)
                            )
                        //표준량
                        .TotalItems(items =>
                            items.Add()
                                .Name("item_bom_standard_qty_summary")
                                .ShowInColumn("item_bom_standard_qty")
                                .DisplayFormat("{0}")
                                .ValueFormat("#,##0.000")
                                .SummaryType(SummaryType.Custom)
                            )
                        //사용량
                        .TotalItems(items =>
                            items.Add()
                                .Name("item_bom_batch_qty_summary")
                                .ShowInColumn("item_bom_batch_qty")
                                .DisplayFormat("{0}")
                                .ValueFormat("#,##0.000")
                                .SummaryType(SummaryType.Custom)
                            )
                        .CalculateCustomSummary("CustomSummary")
                    )
                    .OnRowUpdated("prescriptionUpdate")
                    .OnRowInserted("prescriptionInsert")
                    .OnRowRemoved("prescriptionDelete")
                    .OnEditorPrepared("prescriptionDataCheck")
                    .OnCellClick("getGrid")
                    .OnInitNewRow("initPrescriptionSeq")
                    .OnToolbarPreparing("HideToolbarButton")
                )
                </text>))
        </div>
    }

    @* === 원료 조회 팝업 === *@
    <div id="ItemGuideMaterialPopup"></div>

    @* === 제조기록서 정보 입력 팝업 === *@
    @(Html.DevExtreme().Popup()
        .ID("ItemGuideAddPopup")
        .Width(650)
        .Height(320)
        .ShowTitle(true)
        .Title("입력")
        .Visible(false)
        .DragEnabled(true)
        .CloseOnOutsideClick(false)
        .OnHiding("ItemGuideResetInsertForm")
    )

    @using (Html.DevExtreme().NamedTemplate("itemguideAddPopupTemplate"))
    {
        <form id="ItemGuideInputForm">
            <div class="input-wrapper">

                <label class="col-2">품목코드</label>
                <div class="input-group col-3">
                    <input type="text" id="ItemGuideItemCode3" class="form-control required" name="item_cd" readonly="readonly">
                    @*<div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" id="searchItemBtn" onclick="SearchItem3()">
                                <i class="fa fa-search"></i>
                            </button>
                        </div>*@
                </div>

                <label class="col-2">품목명</label>
                <div class="input-group col-4">
                    <input type="text" id="ItemGuideItemName3" class="form-control required" name="item_nm" readonly="readonly">
                </div>

            </div>

            <div class="input-wrapper">

                <label class="col-2">수량</label>
                <div class="input-group col-3">
                    <input type="number" class="form-control required" name="batch_size">
                </div>

                <label class="col-2">단위</label>
                <div class="input-group col-2">
                    <select class="form-control" name="batch_size_unit">
                        @foreach (DataRow row in ((DataTable)ViewBag.unitGubuns).Rows)
                        {
                            <option value="@row["keyfield"]">@row["displayfield"]</option>
                        }
                    </select>
                </div>

            </div>

            <div class="input-wrapper">

                <label class="col-2">개정번호</label>
                <div class="input-group col-3">
                    <input type="text" id="revision_num" class="form-control required" name="revision_num">
                </div>

                <label class="col-2">시행일자</label>
                <div class="input-group col-4">
                    <input type="text" id="itemguideDatePicker" class="form-control required datepicker" name="revision_use_date">
                </div>

            </div>

            <div class="input-wrapper">

                <label class="col-2">비고</label>
                <div class="input-group col-9">
                    <input type="text" class="form-control" name="revision_special_mention">
                </div>

            </div>

            <div class="input-wrapper">

                <label class="col-2">개정사유</label>
                <div class="input-group col-9">
                    <textarea class="form-control required" name="revision_remark" rows="5"></textarea>
                </div>
            </div>

        </form>
        @(Html.DevExtreme().Toolbar()
            .ID("ItemGuideToolbar")
            .Items(items =>
            {
                items.Add()
                    .Widget(w => w
                    .Button()
                    .Type(ButtonType.Default)
                    .StylingMode(ButtonStylingMode.Contained)
                    .ID("ItemGuideAdd")
                    .Icon("save")
                    .Text("저장")
                    .OnClick("ItemGuideAdd")
                    )
                    .Location(ToolbarItemLocation.After);
            })
            )
    }

    @* === 전자 서명 팝업 === *@
    @(Html.DevExtreme().Popup()
        .ID("ItemGuideSignPopup")
        .Width(500)
        .Height(420)
        .ShowTitle(true)
        .Title("작업자 인증")
        .OnHidden("clearSignInput")
        .Visible(false)
        .DragEnabled(true)
        .CloseOnOutsideClick(false)
    )

    @using (Html.DevExtreme().NamedTemplate("itemguideSignPopupTemplate"))
    {
        <h6>전자서명은 수기서명과 동일한 효력을 갖습니다.</h6>

        <form id="ItemGuideSignForm">

            <div class="input-wrapper">
                <label class="col-3">아이디</label>
                <input type="text" class="col-8 form-control" name="txt_ID">

                <label class="col-3">비밀번호</label>
                <input type="password" class="col-8 form-control" name="txt_Pass">
            </div>

        </form>
        <div class="align-content-end">
            <button class="btn btn-secondary" onclick="itemGuideSignSubmit()">확인</button>
        </div>

        <br />
        <hr />

        <label class="col-3">부서</label>
        <input type="text" class="col-8 form-control" name="dept_nm" readonly="readonly" />
        <label class="col-3">성명</label>
        <input type="text" class="col-8 form-control" name="emp_nm" readonly="readonly" />
    }

    <div id="ItemGuide_Top" class="mainTop mb-1">

        <div class="row mb-1">

            <div class="col-9">

                <form id="ItemGuide_Form">

                    <div class="input-wrapper">

                        <div class="input-group input-group-sm col-5">
                            <div class="input-group-prepend">
                                <span class="input-group-text">품목코드</span>
                            </div>
                            <input type="text" class="form-control col-3" id="ItemGuideItemCode" name="item_cd">
                            <div class="input-group-append">
                                <button class="btn btn-outline-secondary" type="button" onclick="ItemGuideSearchItem()">
                                    <i class="fa fa-search"></i>
                                </button>
                            </div>
                            <input type="text" class="form-control" id="ItemGuideItemName" name="item_nm">
                        </div>

                        <div class="input-group input-group-sm col-2">
                            <div class="input-group-prepend">
                                <span class="input-group-text">수량</span>
                            </div>
                            <select class="form-control" id="ItemGuideQuantity" name="batch_size" onchange="ItemGuideSelectRevisionNum()">
                            </select>
                        </div>

                        <div class="input-group input-group-sm col-1">
                            <div class="input-group-prepend">
                                <span class="input-group-text">단위</span>
                            </div>
                            <select class="form-control" name="batch_size_unit" id="ItemGuideBatchSizeUnit">
                                @foreach (DataRow row in ((DataTable)ViewBag.unitGubuns).Rows)
                                {
                                    <option value="@row["keyfield"]">@row["displayfield"]</option>
                                }
                            </select>
                        </div>

                        <div class="input-group input-group-sm col-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text">개정번호</span>
                            </div>
                            <select class="form-control" id="ItemGuideRevisionNo" name="Revision_no" onchange="GetItemDetail()">
                            </select>
                        </div>

                    </div>

                </form>

            </div>

            <div class="CRUD-btn col-3">
                @* === CRUD 버튼 === *@
                @{Html.SetToolbar(0, true, "Search;Input;Edit;Delete;Save;Undo;Preview;");}
            </div>

        </div>

        <div class="row">

            <div class="col-12" style="display:inherit;" id="ItemGuideForm2">

                <div class="col-8 display-flex">

                    <div class="custom-control custom-switch pr-1">
                        <input type="checkbox" class="custom-control-input" id="revisionInfoToggle" onclick="revisionInfoToggle()" checked="checked">
                        <label class="custom-control-label" for="revisionInfoToggle">제/개정 정보</label>
                    </div>

                    <div class="custom-control custom-switch pr-1">
                        <input type="checkbox" class="custom-control-input" id="itemProcessToggle" onclick="itemProcessToggle()">
                        <label class="custom-control-label" for="itemProcessToggle">공정 정보</label>
                    </div>


                    <div class="custom-control custom-switch pr-1">
                        <input type="checkbox" class="custom-control-input" id="itemPrescriptionToggle" onclick="itemPrescriptionToggle()">
                        <label class="custom-control-label" for="itemPrescriptionToggle">처방전 정보</label>
                    </div>


                    <div class="custom-control custom-switch pr-1">
                        <input type="checkbox" class="custom-control-input" id="itemProcessExamToggle" onclick="itemProcessExamToggle()">
                        <label class="custom-control-label" for="itemProcessExamToggle">공정검사 설정</label>
                    </div>


                    <div class="custom-control custom-switch pr-1">
                        <input type="checkbox" class="custom-control-input" id="itemWorkGuideToggle" onclick="itemWorkGuideToggle()">
                        <label class="custom-control-label" for="itemWorkGuideToggle">작업방법 정보</label>
                    </div>

                </div>

                <div class="col-4 align-end-only">

                    <button class="btn btn-secondary" onclick="revisionSearch()">조건별 조회</button>

                    <div class="radioDiv">
                        <label>승인여부</label>
                        <input type="checkbox" name="revision_sign_end_ck" class="checkbox" onclick="return false;" />
                        <label>사용여부</label>
                        <input type="checkbox" name="revision_current_ck" class="checkbox" onclick="return false;" />
                    </div>

                    <button class="btn btn-secondary" onclick="ItemGuideUseCheck()">사용확인</button>

                </div>

            </div>
        </div>

    </div>

    <div class="row mb-1" id="itemRevisionInfoDiv">

        <div class="col-4 pr-1">

            <div class="box mb-0">
                <div class="divName">
                    <p>제조기록서 정보</p>
                </div>

                <div class="div-content-wrapper">

                    <form id="itemRevisionInfoForm">

                        <div class="input-wrapper">
                            <label class="col-4">개정번호</label>
                            <div class="input-group col-7 required">
                                <input type="text" id="revision_num" class="form-control" name="revision_num">
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-4">시행일자</label>
                            <div class="input-group col-7">
                                <input type="text" class="form-control datepicker" name="revision_use_date">
                            </div>
                        </div>

                        <div class="input-wrapper">
                            <label class="col-4">비고</label>
                            <div class="input-group col-7">
                                <input type="text" class="form-control" name="revision_special_mention">
                            </div>
                        </div>


                        <div class="input-wrapper">
                            <label class="col-4">개정사유</label>
                            <div class="input-group col-7">
                                <textarea class="form-control" rows="4" name="revision_remark"></textarea>
                            </div>
                        </div>

                        <input type="text" hidden="hidden" name="mbr_type" />
                        <input type="text" hidden="hidden" name="export_words" />
                        <input type="text" hidden="hidden" name="batch_weight" />
                        <input type="text" hidden="hidden" name="batch_size_sub" />
                        <input type="text" hidden="hidden" name="permit_standard_qty" />
                        <input type="text" hidden="hidden" name="permit_standard_qty_unit" />
                        <input type="text" hidden="hidden" name="t_making_dept_cd" />
                        <input type="text" hidden="hidden" name="t_making_dept_cd2" />

                    </form>

                </div>
            </div>

        </div>

        <div class="col-4 pl-0">

            <div class="box mb-0">
                <div class="divName mb-0">
                    <p>전자서명 정보 - 제조기록 원본 사용 승인</p>
                </div>

                @(Html.DevExtreme().DataGrid()
                    .ID("itemGuideSignTable")
                    .KeyExpr("sign_set_dt_id")
                    .AllowColumnResizing(true)
                    .FocusedRowEnabled(true)
                    .ShowBorders(true)
                    .ShowColumnLines(true)
                    .ShowRowLines(true)
                    .Height(160)
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .Columns(columns =>
                    {
                        columns.Add()
                            .DataField("displayfield")
                            .Caption("구분");
                        columns.Add()
                            .DataField("sign_emp_nm")
                            .Caption("서명자");
                        columns.Add()
                            .DataField("sign_time")
                            .Width(185)
                            .Caption("서명일자");
                        columns.Add()
                            .AllowFiltering(false)
                            .AllowSorting(false)
                            .DataField("sign_image")
                            .Name("sign_image")
                            .Caption("서명")
                            .Width(100)
                            .CellTemplate(@<text>
                                <div>
                                    <img src="<%- value %>" alt="" style="width:80px; height:25px;"/>
                                </div>
                            </text>);
                        //columns.Add()
                        //    .DataField("sign_image")
                        //    .Caption("서명");
                    })
                    .OnCellClick("itemGuideSign")
                )
            </div>

        </div>

    </div>

    <div class="row">

        <div id="itemProcessDiv" class="col-12">

            <div class="box mb-0">
                <div class="divName">
                    <p>공정</p>
                </div>

                <div class="display-flex display-flex-space-between">
                    <div class="align-start-only pl-2">
                        <button class="btn btn-secondary" onclick="ItemGuide_ProcessInfomationPopup()">제조 공정도</button>
                    </div>

                    <div class="align-end-only pr-2">
                        <button class="btn btn-secondary" onclick="deleteProcess()">삭제</button>
                        <button class="btn btn-secondary" onclick="deleteAllProcess()">전체삭제</button>
                    </div>
                </div>

                <div>
                    @(Html.DevExtreme().TreeList()
                        .ID("itemProcessGrid")
                        .RootValue("")
                        .KeyExpr("mykey")
                        .ParentIdExpr("pkey")
                        .Height(900)
                        .Paging(p => p.PageSize(100000))
                        .Scrolling(scrolling => scrolling.Mode(TreeListScrollingMode.Virtual)
                        .ShowScrollbar(ShowScrollbarMode.Always))
                        .AllowColumnResizing(true)
                        .Sorting(s => s.Mode(GridSortingMode.None))
                        .Columns(columns =>
                        {
                            columns.Add()
                                .DataField("ord1")
                                .Caption("순서");

                            columns.Add()
                                .DataField("fieldname")
                                .DataType(GridColumnDataType.String)
                                .Caption("공정");

                            columns.Add()
                                .DataField("next_process_cd")
                                .DataType(GridColumnDataType.String)
                                .Visible(false);

                            columns.Add()
                                .DataField("next_process_nm")
                                .DataType(GridColumnDataType.String)
                                .CellTemplate(new JS("ItemGuideCellWithButton"))
                                .Caption("다음공정");

                            columns.Add()
                                .DataField("item_proc_qc_ck")
                                .DataType(GridColumnDataType.Boolean)
                                .CalculateCellValue(@"function(rowData) { return (rowData.item_proc_qc_ck == ""Y"" || rowData.item_proc_qc_ck == true); }")
                                .Caption("시험유무");

                            columns.Add()
                                .DataField("item_proc_transfer_ck")
                                .DataType(GridColumnDataType.Boolean)
                                .CalculateCellValue(@"function(rowData) { return (rowData.item_proc_transfer_ck == ""Y"" || rowData.item_proc_transfer_ck == true); }")
                                .Caption("인수인계");

                            columns.Add()
                                .DataField("workroom_cd")
                                .DataType(GridColumnDataType.String)
                                .Visible(false);

                            columns.Add()
                                .DataField("workroom_nm")
                                .DataType(GridColumnDataType.String)
                                .CellTemplate(new JS("ItemGuideCellWithButton"))
                                .Caption("작업실");
                            columns.Add()
                                .DataField("standard_proc_time")
                                .DataType(GridColumnDataType.String)
                                .Caption("작업시간");

                            columns.Add()
                                .DataField("item_proc_warehouse")
                                .DataType(GridColumnDataType.String)
                                .Caption("보관소코드");

                            columns.Add()
                                .DataField("item_proc_warehouse_nm")
                                .DataType(GridColumnDataType.String)
                                .CellTemplate(new JS("ItemGuideCellWithButton"))
                                .Caption("보관소");

                            columns.Add()
                                .DataField("item_proc_standard_weight_qty")
                                .DataType(GridColumnDataType.Number)
                                .Caption("이론생산량");

                            columns.Add()
                                .Lookup(lookup => lookup
                                .DataSource(d => d.WebApi()
                                    .RouteName("Comm")
                                    .LoadAction("GetCommon")
                                    .LoadMethod("GET")
                                    .LoadParams(new
                                    {
                                        pGubun = "공통코드",
                                        pDiv = "D",
                                        pStrWhere = "CM012",
                                        pTableName = "2"
                                    }).Key("keyfield"))
                                .ValueExpr("keyfield")
                                .DisplayExpr("displayfield")
                                ).DataField("item_proc_standard_weight_unit")
                                .Caption("이론단위");

                            columns.Add()
                                .DataField("item_proc_content")
                                .DataType(GridColumnDataType.Number)
                                .Caption("단위중량(개별질량) (g)");

                            columns.Add()
                                .DataField("item_proc_manage_rate_min")
                                .DataType(GridColumnDataType.Number)
                                .Caption("수율(하한)");

                            columns.Add()
                                .DataField("item_proc_manage_rate_max")
                                .DataType(GridColumnDataType.Number)
                                .Caption("수율(상한)");

                            columns.Add()
                                .DataField("ccp_nm")
                                .DataType(GridColumnDataType.String)
                                .CellTemplate(new JS("ItemGuideCellWithButton"))
                                .Caption("CCP 코드");

                            columns.Add()
                                .DataField("grouping_cd")
                                .DataType(GridColumnDataType.String)
                                .Caption("그룹코드");


                            columns.Add()
                                .DataField("ccp_cd")
                                .DataType(GridColumnDataType.String)
                                .Visible(false);

                            //columns.Add()
                            //    .Lookup(lookup => lookup
                            //    .DataSource(d => d.WebApi()
                            //    .RouteName("Comm")
                            //    .LoadAction("GetCommon")
                            //    .LoadMethod("GET")
                            //    .LoadParams(new
                            //    {
                            //        pGubun = "CCPCODE",
                            //        pDiv = "D",
                            //        pStrWhere = "",
                            //        pTableName = "CCPCODE"
                            //    }).Key("keyfield"))
                            //    .ValueExpr("keyfield")
                            //    .DisplayExpr("displayfield")
                            //    ).DataField("ccp_cd")
                            //.Caption("CCP 코드");

                            columns.Add()
                                .DataField("ccpChanged")
                                .DataType(GridColumnDataType.Boolean)
                                .Visible(false);

                        })
                        .ShowRowLines(true)
                        .ShowBorders(true)
                        .ShowColumnLines(true)
                        .Selection(s => s.Mode(SelectionMode.Single))
                        .FocusedRowEnabled(true)
                        //.FocusedRowIndex(0)
                        .ColumnAutoWidth(true)
                        .AutoExpandAll(true)
                        .OnCellClick("getGridPopup")
                        .OnEditorPreparing("ItemGuideHideCheckbox")
                        .OnEditorPrepared("ItemGuideSelectBoxOnChanged")
                        .OnRowUpdated("processUpdate")
                        .OnCellPrepared("processEditableColumn")
                        .OnRowPrepared("ItemGuideParentNodeBackgroundColor")
                        .OnToolbarPreparing("ItemGuideHideSaveButton")
                        //.OnSelectionChanged("getItemProcess")
                        .OnFocusedRowChanged("getItemProcess")
                    )

                </div>

            </div>
        </div>

        <div id="itemProcessDetailDiv" class="col-9 row display-none pl-1 pr-0">

            <div class="display-contents">

                <div class="custom-control custom-switch pr-1 col-12" style="margin-left:20px; height: 25px;">
                    <input type="checkbox" class="custom-control-input" id="itemProcessDetailCopyToggle" onclick="itemProcessDetailCopyToggle()">
                    <label class="custom-control-label" for="itemProcessDetailCopyToggle">타품목에서 복사</label>
                </div>

                @*<div class="col-12">
                        <button class="btn btn-secondary" onclick="itemProcessDetailCopyToggle(true)">표준공정</button>
                        <button class="btn btn-secondary" onclick="itemProcessDetailCopyToggle(false)">타품목에서 복사</button>
                    </div>*@

                <div class="col-4 pr-1" id="standardProcessDiv">
                    <div class="box mb-0">
                        <div class="divName">
                            <p>대표공정</p>
                        </div>

                        <div class="align-end-only pr-2">
                            <button class="btn btn-secondary" onclick="addProcess('Standard')">추가</button>
                            <button class="btn btn-secondary" onclick="moveProcess('Standard','UP')">위</button>
                            <button class="btn btn-secondary" onclick="moveProcess('Standard','DOWN')">아래</button>
                        </div>

                        <div>
                            @(Html.DevExtreme().DataGrid()
                                .ID("standardProcessDataGrid")
                                .AllowColumnResizing(true)
                                .FocusedRowEnabled(true)
                                .FocusedRowIndex(0)
                                .ShowBorders(true)
                                .ShowColumnLines(true)
                                .ShowRowLines(true)
                                .Height(550)
                                .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                                .Selection(s => s.Mode(SelectionMode.Single))
                                .Sorting(s => s.Mode(GridSortingMode.None))
                                .Columns(columns =>
                                {
                                    columns.Add()
                                        .DataField("process_cd")
                                        .Caption("공정코드")
                                        .Width("100");
                                    columns.Add()
                                        .DataField("process_nm")
                                        .Caption("공정명");
                                })
                                .OnRowDblClick("ItemGuide_DbClickProcessInsert")
                            )
                        </div>
                    </div>
                </div>

                <div class="col-8 pl-0 pr-0" id="detailProcessDiv">
                    <div class="box mb-0">
                        <div class="divName">
                            <p>작업공정</p>
                        </div>

                        <div class="align-end-only pr-2">
                            <button class="btn btn-secondary" onclick="addProcess('Detail')">추가</button>
                            <button class="btn btn-secondary" onclick="moveProcess('Detail','UP')">위</button>
                            <button class="btn btn-secondary" onclick="moveProcess('Detail','DOWN')">아래</button>
                        </div>

                        <div>
                            @(Html.DevExtreme().DataGrid()
                                .ID("detailProcessDataGrid")
                                .KeyExpr("process_cd")
                                .ShowBorders(true)
                                .ShowColumnLines(true)
                                .Height(550)
                                .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual)
                                .ShowScrollbar(ShowScrollbarMode.Always))
                                .FocusedRowEnabled(true)
                                .FocusedRowIndex(0)
                                .Selection(s => s.Mode(SelectionMode.Single))
                                .AllowColumnResizing(true)
                                .Sorting(s => s.Mode(GridSortingMode.None))
                                .Columns(columns =>
                                {
                                    columns.Add()
                                        .DataField("process_cd")
                                        .Caption("공정코드");
                                    columns.Add()
                                        .DataField("process_nm")
                                        .Caption("공정명");
                                    columns.Add()
                                        .DataField("process_type_nm")
                                        .Caption("공정타입");
                                    columns.Add()
                                        .DataField("process_qc_ck")
                                        .Caption("시험의뢰")
                               .CalculateCellValue(@"function(rowData) { return (rowData.process_qc_ck == ""1"" || rowData.process_qc_ck == true); }");
                                    columns.Add()
                                        .DataField("process_transfer_ck")
                                        .Caption("인수인계")
                               .CalculateCellValue(@"function(rowData) { return (rowData.process_transfer_ck == ""1"" || rowData.process_transfer_ck == true); }");
                                    columns.Add()
                                        .DataField("process_worker1_nm")
                                        .Caption("작업자");
                                    columns.Add()
                                        .DataField("workroom_nm")
                                        .Caption("작업실");
                                })
                                .OnRowDblClick("ItemGuide_DbClickProcessInsert")
                            )

                        </div>
                    </div>
                </div>

                <div class="col-12 display-none pr-0" id="itemProcessDetailCopyDiv">

                    <div class="box mb-0">

                        <div class="divName">
                            <p>타품목에서 복사</p>
                        </div>

                        <div class="menuDiv">

                            <div class="input-wrapper">
                                <label class="col-1">제품코드</label>
                                <div class="input-group col-2">
                                    <input type="text" id="ItemGuideItemCode4" class="form-control" name="item_cd">
                                    <div class="input-group-append">
                                        <button class="btn btn-outline-secondary" type="button" onclick="SearchItem4()">
                                            <i class="fa fa-search"></i>
                                        </button>
                                    </div>
                                </div>

                                <label class="col-1">제품명</label>
                                <input type="text" id="ItemGuideItemName4" class="col-2 form-control" name="item_nm">

                                <label class="col-1">수량</label>
                                <select class="col-1 form-control" id="ItemGuideQuantity4" name="batch_size" onchange="GetRevisionNumber4()">
                                </select>

                                <label class="col-1">개정번호</label>
                                <select class="col-2 form-control" id="ItemGuideRevisionNo4" name="Revision_no" onchange="GetItemDetail()">
                                </select>

                            </div>

                            <div class="align-end-only margin-10">
                                <button class="btn btn-secondary" onclick="copyProcess()">복사</button>
                            </div>

                        </div>

                    </div>

                </div>

            </div>

        </div>

        <div id="itemPrescriptionDiv" class="col-9 display-none pl-1">

            <div class="box mb-0">

                <div class="divName">
                    <p>처방전 정보</p>
                </div>

                <div class="align-end-only pr-2">
                    <button class="btn btn-secondary" onclick="prescirptionSearch()">처방전 변경</button>
                </div>

                <div>
                    @(Html.DevExtreme().DataGrid()
                        .ID("itemPrescriptionDataGrid")
                        .KeyExpr("row_num")
                        .Height(574)
                        .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                        .ShowBorders(true)
                        .ShowColumnLines(true)
                        .AllowColumnResizing(true)
                        .Sorting(s => s.Mode(GridSortingMode.None))
                        .Columns(columns =>
                        {
                            columns.Add()
                                .DataField("item_bom_seq")
                                .Caption("순서")
                                .Width("50");
                            columns.Add()
                                .DataField("process_nm")
                                .Caption("공정");
                            columns.Add()
                                .DataField("item_bom_child_cd")
                                .Caption("원료코드");
                            columns.Add()
                                .DataField("item_bom_child_nm")
                                .Caption("원료명");
                            columns.Add()
                                .DataField("item_case_cd")
                                .Caption("규격")
                                .Width("50");
                            columns.Add()
                                .DataField("target_process_nm")
                                .Caption("허가비율대상공정");
                            columns.Add()
                                .DataField("manufacture_percent")
                                .Caption("허가비율(%)")
                                .DataType(GridColumnDataType.Number)
                                .Width("100")
                                .Format("#,##0.000");
                            columns.Add()
                                .DataField("item_bom_manufacture_qty_nm")
                                .DataType(GridColumnDataType.Number)
                                .Caption("허가량")
                                .Width("80")
                                .Format("#,##0.000");
                            columns.Add()
                                .DataField("item_bom_tea_qty_nm")
                                .DataType(GridColumnDataType.Number)
                                .Caption("제조량")
                                .Width("80")
                                .Format("#,##0.000");
                            columns.Add()
                                .DataField("item_bom_tea_unit")
                                .Caption("단위")
                                .Width("50");
                            columns.Add()
                                .DataField("item_bom_standard_qty")
                                .DataType(GridColumnDataType.Number)
                                .Caption("표준량")
                                .Width("120")
                                .Format("#,##0.000");
                            columns.Add()
                                .DataField("item_bom_standard_qty_nm")
                                .DataType(GridColumnDataType.Number)
                                .Caption("사용량")
                                .Width("120")
                                .Format("#,##0.000");
                            columns.Add()
                                .DataField("item_bom_batch_unit")
                                .Caption("단위")
                                .Width("50");
                            columns.Add()
                                .DataField("")
                                .Caption("계산식");
                            columns.Add()
                                .DataField("standard_ucl_percent")
                                .DataType(GridColumnDataType.Number)
                                .Caption("칭량오차허용범위(%)")
                                .Width("130")
                                .Format("#,##0.####");
                        })
                    )
                </div>

            </div>

        </div>

        <div id="itemProcExamDiv" class="col-9 display-none pl-1">

            <div class="box mb-0">

                <div class="divName mb-0">
                    <p>공정검사 설정</p>
                </div>

                <div>
                    @(Html.DevExtreme().DataGrid()
                        .ID("itemProcessExamDataGrid")
                        .Height(597)
                        .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                        .ShowBorders(true)
                        .ShowColumnLines(true)
                        .OnRowUpdated("ProcExamUpdate")
                        .AllowColumnResizing(true)
                        .Sorting(s => s.Mode(GridSortingMode.None))
                        .Columns(columns =>
                        {
                            columns.Add()
                                .Width(250)
                                .AllowEditing(false)
                                .DataField("exam_nm")
                                .Caption("공정검사");
                            columns.Add()
                                .Width(60)
                                .DataType(GridColumnDataType.Boolean)
                                .DataField("application_ck")
                                .CalculateCellValue(@"function(rowData)
                                    {
                                        return ((rowData.application_ck == ""Y"" || rowData.application_ck == true) ? true : false);
                                    }")
                                .Caption("설정");
                            columns.Add().DataField("ccp_yn").Caption("CCP여부").Alignment(HorizontalAlignment.Center).DataType(GridColumnDataType.Boolean)
                                   .CalculateCellValue(@"function(rowData) { return (rowData.ccp_yn == ""Y"" || rowData.ccp_yn == true); }");
                            columns.Add()
                                .AllowEditing(false)
                                .DataField("item_process_exam_start_nm")
                                .Caption("검사시기");
                            columns.Add()
                                .DataType(GridColumnDataType.Number)
                                .DataField("process_exam_period")
                                .Caption("주기(분)");
                            columns.Add()
                                .DataType(GridColumnDataType.Number)
                                .DataField("process_exam_qty")
                                .Caption("1회검체수량");
                            columns.Add()
                                .DataType(GridColumnDataType.Number)
                                .DataField("process_exam_standard")
                                .Caption("판정기준");
                            columns.Add()
                                .DataType(GridColumnDataType.Number)
                                .DataField("process_exam_min")
                                .Caption("하한");
                            columns.Add()
                                .DataType(GridColumnDataType.Number)
                                .DataField("process_exam_max")
                                .Caption("상한");
                            columns.Add()
                                .AllowEditing(false)
                                .DataField("item_process_exam_unit_nm")
                                .Caption("결과유형");
                            columns.Add()
                                .Width(250)
                                .DataField("exam_remark")
                                .Caption("검사기준");
                        })
                        .OnToolbarPreparing("HideToolbarButton")
                    )
                </div>

            </div>

        </div>

        <div id="itemWorkGuideDiv" class="col-9 display-none pl-1">

            <div class="display-contents">
                <div class="custom-control custom-switch p-0 ml-1 col-12" style="margin-left:20px; height: 25px;">
                    <button class="btn btn-secondary" onclick="ItemWorkGuideCopyPopup()">타공정에서 복사</button>
                </div>

                <div>
                    <div class="box mb-0">
                        <div class="divName mb-0">
                            <p>작업방법 정보</p>
                        </div>

                        <div>
                            @(Html.DevExtreme().DataGrid()
                            .ID("itemWorkGuideDataGrid")
                            .KeyExpr("workguide_id")
                            .Height(570)
                            .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                            .ShowBorders(true)
                            .ShowColumnLines(true)
                            .FocusedRowEnabled(true)
                            .Sorting(s => s.Mode(GridSortingMode.None))
                            .Editing(editing => {
                                editing.Mode(GridEditMode.Batch);
                                editing.AllowAdding(false);
                                editing.AllowDeleting(false);
                                editing.AllowUpdating(false);
                            })
                            .AllowColumnResizing(true)
                            .Columns(columns =>
                            {
                                columns.Add()
                                    .Width(50)
                                    .DataField("workguide_seq")
                                    .Caption("순서");
                                columns.Add()
                                    .Width(450)
                                    .DataField("workguide_method")
                                    .Caption("작업방법");
                                columns.Add()
                                    .Lookup(lookup => lookup
                                                .DataSource(d => d.WebApi()
                                                    .RouteName("Comm")
                                                    .LoadAction("GetCommon")
                                                    .LoadMethod("GET")
                                                    .LoadParams(new
                                                    {
                                                        pGubun = "공통코드",
                                                        pDiv = "D",
                                                        pStrWhere = "RT001",
                                                        pTableName = "2"
                                                    }).Key("keyfield"))
                                                .ValueExpr("keyfield")
                                                .DisplayExpr("displayfield")
                                            )
                                    .DataField("workguide_data_type")
                                    .Caption("자료종류");

                                columns.Add()
                                    .Caption("관리")
                                    .IsBand(true);
                                columns.Add()
                                    .DataType(GridColumnDataType.Number)
                                    .DataField("workguide_min_manage")
                                    .Caption("관리min")
                                    .OwnerBand(3);
                                columns.Add()
                                    .DataType(GridColumnDataType.Number)
                                    .DataField("workguide_max_manage")
                                    .Caption("관리max")
                                    .OwnerBand(3);

                                //columns.Add()
                                //    .Caption("허가")
                                //    .IsBand(true);
                                //columns.Add()
                                //    .DataType(GridColumnDataType.Number)
                                //    .DataField("workguide_min_permit")
                                //    .Caption("허가min")
                                //    .OwnerBand(6);
                                //columns.Add()
                                //    .DataType(GridColumnDataType.Number)
                                //    .DataField("workguide_max_permit")
                                //    .Caption("허가max")
                                //    .OwnerBand(6);

                                columns.Add()
                                    .Caption("기계(설비)")
                                    .IsBand(true);
                                columns.Add()
                                    .DataField("equip_cd")
                                    .Caption("기계코드")
                                    .OwnerBand(6);
                                //.CellTemplate(new JS("BomCellWithButton"));
                                columns.Add()
                                    .AllowEditing(false)
                                    .DataField("equip_nm")
                                    .Caption("기계명")
                                    .OwnerBand(6);

                                columns.Add()
                                    .Caption("원자재")
                                    .IsBand(true);
                                columns.Add()
                                    .DataField("workguide_sub_item")
                                    .Caption("원자재코드")
                                    .OwnerBand(9);
                                //.CellTemplate(new JS("BomCellWithButton"));
                                columns.Add()
                                    .AllowEditing(false)
                                    .DataField("workguide_sub_item_nm")
                                    .Caption("원자재명")
                                    .OwnerBand(9);

                                columns.Add()
                                    .Caption("반복여부")
                                    .DataField("proc_rep_yn")
                                    .DataType(GridColumnDataType.Boolean)
                                    //.CalculateCellValue(@"function(rowData) { return (rowData.proc_rep_yn == ""Y"" || rowData.proc_rep_yn == true); }");
                                    .CalculateCellValue(@"function(rowData) {
                                        var check = false;
                                        if(rowData.proc_rep_yn == ""Y"" || rowData.proc_rep_yn == true) {
                                            check = true;
                                        }else {
                                            check = false;
                                        }

                                        return check;
                                    }");

                                columns.Add()
                                    .Caption("점검항목")
                                    .DataField("check_proc")
                                    .DataType(GridColumnDataType.Boolean)
                                    //.CalculateCellValue(@"function(rowData) { return (rowData.proc_rep_yn == ""Y"" || rowData.proc_rep_yn == true); }");
                                    .CalculateCellValue(@"function(rowData) {
                                        var check = false;
                                        if(rowData.check_proc == ""Y"" || rowData.check_proc == true) {
                                            check = true;
                                        }else {
                                            check = false;
                                        }

                                        return check;
                                    }");

                                columns.Add()
                                    .Visible(false)
                                    .DataField("workguide_es_yn")
                                    .Caption("전자서명필요");
                                columns.Add()
                                    .Visible(false)
                                    .DataField("workguide_unnecessary_yn")
                                    .Caption("N/A처리가능");
                                columns.Add()
                                    .Visible(false)
                                    .DataField("decimal_cnt")
                                    .Caption("소수점자리수");
                                columns.Add()
                                    .Visible(false)
                                    .DataField("workguide_id")
                                    .Caption("작업방법id");
                            })
                            .OnInitNewRow("initItemWorkguideSeq")
                            .OnRowInserted("ItemWorkGuideInsert")
                            .OnRowUpdated("ItemWorkGuideUpdate")
                            .OnRowRemoved("ItemWorkGuideDelete")
                            .OnCellClick("ItemWorkGuideInfo")
                            .OnToolbarPreparing("HideToolbarButton")
                            .OnEditorPrepared("ItemGuideInfoCheck")
                            )
                        </div>

                        <div class="pl-2">
                            <button class="btn btn-secondary" onclick="ItemBOMWorkGuideAdd()">원료투입</button>
                            @*<label class="mr-2"></label>
                                <input type="checkbox" name="workguide_es_yn" class="checkbox" onchange="changeGridVal()" />*@
                            @*<input type="checkbox" name="workguide_es_yn" class="checkbox" disabled="disabled" onchange="changeGridVal()" />*@
                            @*<label>전자서명 필요</label>
                                <label class="mr-2"></label>
                                <input type="checkbox" name="workguide_unnecessary_yn" class="checkbox" onchange="changeGridVal()" />*@
                            @*<input type="checkbox" name="workguide_unnecessary_yn" class="checkbox" disabled="disabled" onchange="changeGridVal()" />*@
                            @*<label>N/A처리 가능</label>
                                <label class="mr-2"></label>
                                <label>소수점자리수</label>
                                <input type="number" name="decimal_cnt" min="0" size="2" style="width:35px" onchange="changeGridVal()" />*@
                            @*<input type="number" name="decimal_cnt" min="0" size="2" style="width:35px" readonly="readonly" onchange="changeGridVal()" />*@

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
