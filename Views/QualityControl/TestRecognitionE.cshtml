@using System.Data
@using HACCP.Libs
@using HACCP.Libs.Views

@{
    var pagePrefix = ViewContext.RouteData.Values["action"].ToString();
    var pageControllerNm = ViewContext.RouteData.Values["controller"].ToString();

    ViewBag.Title = pagePrefix;
    Layout = null;

    //var venderBuy = @Html.Raw(Json.Encode(ViewBag.venderBuy.Data));
    //var itemMaker = @Html.Raw(Json.Encode(ViewBag.itemMaker.Data));
}

@*시험기록서 승인*@

<script id="@(pagePrefix)Js">

    var _testRecognitionEIsEditing = false;
    var _testRecognitionESignCnt = 0;
    var _testRecognitionESignGubun = "";
    var _testRecognitionESignData = "";

    $(function () {

        /// 팝업설정
        // 필요시, 주석해지
        @*var TestRecognitionEPopupColumns = {
            "testItem": [{ dataField: "item_cd", caption: "품목코드" }
                , { dataField: "item_nm", caption: "품목명" }
                , { dataField: "process_nm", caption: "공정" }
                , { dataField: "test_type_nm", caption: "시험종류" }
                , { dataField: "test_standard_nm", caption: "규격" }
                , { dataField: "item_form_nm", caption: "제형" }],
            "venderBuy": [{ dataField: "vender_cd", caption: "구입업체코드" }
                , { dataField: "vender_nm", caption: "구입업체명" }],
            "itemMaker": [{ dataField: "vender_cd", caption: "원자재공급처코드" }
                , { dataField: "vender_nm", caption: "원자재공급처명" }]
        };

        createPopup("TestRecognitionEItem", "시험품목 조회", [], TestRecognitionEPopupColumns.testItem);
        createPopup("TestRecognitionEVender", "구입업체 조회", @venderBuy, TestRecognitionEPopupColumns.venderBuy);
        createPopup("TestRecognitionEMaker", "원자재공급처 조회", @itemMaker, TestRecognitionEPopupColumns.itemMaker);*@

        // 시험종류 셀렉트 박스 값에 따라 의뢰품목 팝업 그리드 데이터 변경
        //$("#TestRecognitionEItemPopup").dxPopup({
        //    onShown: function (e) {

        //        var test_type = $("#testRecognitionEWriteForm select[name=test_type]").val();

        //        $.ajax({
        //            type: 'GET',
        //            url: '/TestReq/TestRecognitionESelectTestItemPopup',
        //            data: {
        //                test_type: test_type
        //            },
        //            dataType: "json",
        //            async: false,
        //            success: function (result) {

        //                try {
        //                    var jsonData = JSON.parse(result);
        //                    $("#TestRecognitionEItem_gridContainer").dxDataGrid("option", "dataSource", jsonData);
        //                }
        //                catch (e) {
        //                    $("#TestRecognitionEItem_gridContainer").dxDataGrid("option", "dataSource", []);
        //                }

        //            }
        //        })
        //    }
        //});

        //$('input[name=item_cd]+div>button'
        //    + ', input[name=cust_cd]+div>button'
        //    + ', input[name=material_maker_cd]+div>button'
        //    , $('#' + "testRecognitionEWriteForm")).click(function (event) {
        //    testRecognitionEPopUpSearch(event);
        //});

        // 탭메뉴
        // 필요시 주석해지
        //menutab('TestRecognitionETab', 'TestRecognitionETabContent', 1);

        $('#TestRecognitionE .datepicker').datepicker({
            format: "yyyy-mm-dd",	//데이터 포맷 형식(yyyy : 년 mm : 월 dd : 일 )
            clearBtn: false, //날짜 선택한 값 초기화 해주는 버튼 보여주는 옵션 기본값 false 보여주려면 true
            autoclose: true,
            templates: {
                leftArrow: '&laquo;',
                rightArrow: '&raquo;'
            }, //다음달 이전달로 넘어가는 화살표 모양 커스텀 마이징
            todayHighlight: true,	//오늘 날짜에 하이라이팅 기능 기본값 :false
            weekStart: 0,//달력 시작 요일 선택하는 것 기본값은 0인 일요일
            language: "ko"	//달력의 언어 선택, 그에 맞는 js로 교체해줘야한다.
        });

        TestRecognitionEEditCheck(true, 'N');

        $($("#TestRecognitionEUploadFileBtn")).click(function (event) {
            TestRecognitionEUploadFileBtn(event);
        });

        $($("#TestRecognitionEDownloadFileBtn")).click(function (event) {
            TestRecognitionEDownloadFileBtn(event);
        });

        $($("#TestRecognitionEDeleteFileBtn")).click(function (event) {
            TestRecognitionEDeleteFileBtn(event);
        });

        $('input[name^=TestRecognitionETestInfo]').click(function (event) {
            TestRecognitionETestInfoPrint(event);
        });

        $('input[name^=TestRecognitionEReq]').click(function (event) {
            TestRecognitionEReqPrint(event);
        });

        $("#TestRecognitionESearchForm input[name=de_SDate]").datepicker("update", '@DateTime.Now.AddMonths(-1).ToShortDateString()');
        $("#TestRecognitionESearchForm input[name=de_EDate]").datepicker("update", '@DateTime.Now.ToShortDateString()');

        // 프로그램별 함수 정의

        TestRecognitionESearch();

    });

    // 수정중인지 체크
    function TestRecognitionEEditCheck(nowEdit, status) {

        //UtilView.setActiveElement(nowEdit
        //    , status
        //    , "TestRecognitionEToolbar"
        //    , "TestRecognitionEGrid"
        //    , "TestRecognitionEWriteForm"
        //    , ""
        //);

        UtilView.setActiveElementFormId(nowEdit, status, "TestRecognitionEWriteForm", "")

        _testRecognitionEIsEditing = nowEdit;

        $("#TestRecognitionEWriteForm input[name=gubun]").val(status);
    }

    // 시험성적서확인 그리드 포커스 변경
    function TestRecognitionEFocusChanged() {
        // 그리드 초기화
        $("#TestRecognitionESignTable").dxDataGrid("option", "dataSource", []);
        $("#TestRecognitionEDetailGrid").dxDataGrid("option", "dataSource", []);
        $("#TestRecognitionEFileGrid").dxDataGrid("option", "dataSource", []);

        // 그리드 폼binding
        UtilView.setDataGridFormBind("TestRecognitionEGrid", "TestRecognitionEWriteForm");
        UtilView.setDataGridFormBind("TestRecognitionEGrid", "TestRecognitionEForm");

        var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));

        if (!gridData.test_result_yn_c) {
            $("#TestRecognitionEWriteForm input[name=test_result_yn_c]").prop("checked", false);
        }

        _testRecognitionESignCnt = 0;

        $("#rg_YorN1").prop("disabled", false);

        $.ajax({
            type: 'GET',
            url: '/QualityControl/testRecognitionESelectDetail',
            dataType: "json",
            data: {
                dto: JSON.stringify({ testcontrol_id: gridData.testcontrol_id, test_type: gridData.test_type_cd }),
                process_kind: '1'
            },
            async: false,
            success: function (result) {
                try {
                    var jsonData = JSON.parse(result[0]);
                    $("#TestRecognitionEDetailGrid").dxDataGrid("option", "dataSource", jsonData);

                    for (var i = 0; i < jsonData.length; i++) {
                        if (jsonData[i].testitem_result_yn === "N") {
                            $("#rg_YorN1").prop("disabled", true);
                        }
                    }
                }
                catch (e) {
                    $("#TestRecognitionEDetailGrid").dxDataGrid("option", "dataSource", []);
                }

                try {
                    var jsonData = JSON.parse(result[1]);
                    $("#TestRecognitionESignTable").dxDataGrid("option", "dataSource", jsonData);

                    for (var i = 0; i < jsonData.length; i++) {
                        _testRecognitionESignCnt += parseInt(jsonData[i].sign_yn);
                    }

                }
                catch (e) {
                    $("#TestRecognitionESignTable").dxDataGrid("option", "dataSource", []);
                }

                if (_testRecognitionESignCnt > 0) {
                    $("#TestRecognitionEWriteForm input[name=test_result_yn_c]").on("click", function () {
                        return false;
                    });
                } else {
                    $("#TestRecognitionEWriteForm input[name=test_result_yn_c]").off("click");
                }

                //try {
                //    var jsonData = JSON.parse(result[1]);
                //    $("#TestRecognitionEFileGrid").dxDataGrid("option", "dataSource", jsonData);
                //}
                //catch (e) {
                //    $("#TestRecognitionEFileGrid").dxDataGrid("option", "dataSource", []);
                //}
            }
        })
    }

    // detail 그리드 row 포커스 변경
    function TestRecognitionEDetailFocusChanged() {
       //UtilView.setDataGridFormBind("TestRecognitionEGrid", "TestRecognitionEWriteForm");

        TestRecognitionESelectFileList();
    }

    // 시험의뢰 그리드 로우 하이라이트
    function TestRecognitionEHighlightRow(e) {

        if (e.rowType === "data" && e.data.hb_ck === "Y") {             // 허벌라이프 전용원료
            e.rowElement[0].style.backgroundColor = 'greenyellow';
        }
        else if (e.rowType === "data" && e.data.test_status === "14") { // 미생물시험완료
            e.rowElement[0].style.backgroundColor = 'orangered';
        }
    }

    // 시험의뢰 그리드 셀 하이라이트
    function TestRecognitionEHighlightCell(cellInfo) {

        if (cellInfo.rowType == "data" && cellInfo.column.dataField === 'test_type') {

            if (cellInfo.data.test_type_cd === '1') {          // 원료시험
                cellInfo.cellElement[0].style.backgroundColor = 'lightcyan';
            } else if (cellInfo.data.test_type_cd === '2') {   // 자재
                cellInfo.cellElement[0].style.backgroundColor = 'khaki';
            } else if (cellInfo.data.test_type_cd === '3') {   // 반제품
                cellInfo.cellElement[0].style.backgroundColor = 'palegreen';
            } else if (cellInfo.data.test_type_cd === '4') {   // 용출시험
                cellInfo.cellElement[0].style.backgroundColor = 'lightsalmon';
            } else if (cellInfo.data.test_type_cd === '5') {   // 재포장
                cellInfo.cellElement[0].style.backgroundColor = 'lightgoldenrodyellow';
            } else if (cellInfo.data.test_type_cd === '6') {   // 포장
                cellInfo.cellElement[0].style.backgroundColor = 'navajowhite';
            } else if (cellInfo.data.test_type_cd === '7') {   // 출하
                cellInfo.cellElement[0].style.backgroundColor = 'gray';
            } else if (cellInfo.data.test_type_cd === '8') {   // 정제수
                cellInfo.cellElement[0].style.backgroundColor = 'darkcyan';
            } else if (cellInfo.data.test_type_cd === '9') {   // 청정도
                cellInfo.cellElement[0].style.backgroundColor = 'skyblue';
            }
        }
        else if (cellInfo.rowType == "data" && cellInfo.column.dataField === 'test_status') {

            if (cellInfo.data.test_status_no === '0') {            // ___
                //cellInfo.cellElement[0].style.backgroundColor = 'lightblue';
            } else if (cellInfo.data.test_status_no === '1') {     // 의뢰
                cellInfo.cellElement[0].style.backgroundColor = 'silver';
            } else if (cellInfo.data.test_status_no === '2') {     // 접수
                cellInfo.cellElement[0].style.backgroundColor = 'khaki';
            } else if (cellInfo.data.test_status_no === '3') {     // 채취지시
                cellInfo.cellElement[0].style.backgroundColor = 'navajowhite';
            } else if (cellInfo.data.test_status_no === '4') {     // 채취중
                cellInfo.cellElement[0].style.backgroundColor = 'gray';
            } else if (cellInfo.data.test_status_no === '5') {     // 검체채취
                cellInfo.cellElement[0].style.backgroundColor = 'paleturquoise';
            } else if (cellInfo.data.test_status_no === '6') {     // 시험중
                cellInfo.cellElement[0].style.backgroundColor = 'thistle';
            } else if (cellInfo.data.test_status_no === '7') {     // 시험완료
                cellInfo.cellElement[0].style.backgroundColor = 'cornflowerblue';
            } else if (cellInfo.data.test_status_no === '8') {     // 확인
                cellInfo.cellElement[0].style.backgroundColor = 'palegreen';
            } else if (cellInfo.data.test_status_no === '9') {     // 승인

                if (cellInfo.data.test_result_yn_c === 'Y') {             // 적합 판정
                    cellInfo.cellElement[0].style.backgroundColor = 'limegreen';
                } else if (cellInfo.data.test_result_yn_c === 'N') {      // 부적합 판정
                    cellInfo.cellElement[0].style.backgroundColor = 'lightcoral';
                } else if (cellInfo.data.test_result_yn_c === 'C') {      // 조건부 적합
                    cellInfo.cellElement[0].style.backgroundColor = 'greenyellow';
                }

            } else if (cellInfo.data.test_status_no === '10') {    // 통보
                cellInfo.cellElement[0].style.backgroundColor = 'tan';
            } else if (cellInfo.data.test_status_no === '11') {    // 출하
                cellInfo.cellElement[0].style.backgroundColor = 'lightslategray';
            } else if (cellInfo.data.test_status_no === '12') {    // 일정
                cellInfo.cellElement[0].style.backgroundColor = 'pink';
            } else if (cellInfo.data.test_status_no === '13') {    // 의뢰취소
                cellInfo.cellElement[0].style.backgroundColor = 'silver';
                cellInfo.cellElement[0].style.fontColor = 'crimson';
            } else if (cellInfo.data.test_status_no === '14') {    // 미생물시험완료
                cellInfo.cellElement[0].style.backgroundColor = 'goldenrod';
            }
        }
    }


    //#region 팝업 관련

    //var TestRecognitionEHelpPopUpCurInputName = "";

    //function TestRecognitionEPopUpSearch(e) {
    //    TestRecognitionEHelpPopUpCurInputName = UtilView.getParentAttrValByClass(e, ".input-group-append", ".form-control", "name");
    //    var popupId = "";

    //    switch (TestRecognitionEHelpPopUpCurInputName) {
    //        case "item_cd":
    //            popupId = "TestRecognitionEItem";
    //            break;
    //        case "cust_cd":
    //            popupId = "TestRecognitionEVender";
    //            break;
    //        case "material_maker_cd":
    //            popupId = "TestRecognitionEMaker";
    //            break;
    //        default:
    //            popupId = "";
    //            break;
    //    }

    //    if (popupId == "") {
    //        alert("(오류) popup ID 미설정 오류!");
    //    }
    //    $('#' + popupId + 'Popup').dxPopup("instance").show();
    //}

    //function TestRecognitionEItemRowDblClick(selectedItems) {
    //    var data = selectedItems.data;

    //    $("input[name=" + TestRecognitionEHelpPopUpCurInputName + "]", $('#' + "TestRecognitionEWriteForm")).val(data.item_cd);
    //    $("input[name=item_nm]", $('#' + "TestRecognitionEWriteForm")).val(data.item_nm);
    //    $("select[name=process_cd]", $('#' + "TestRecognitionEWriteForm")).val(data.process_cd);

    //    $("#TestRecognitionEItemPopup").dxPopup("instance").hide();
    //}

    //function TestRecognitionEVenderRowDblClick(selectedItems) {
    //    var data = selectedItems.data;

    //    $("input[name=" + TestRecognitionEHelpPopUpCurInputName + "]", $('#' + "TestRecognitionEWriteForm")).val(data.vender_cd);
    //    $("input[name=cust_nm]", $('#' + "TestRecognitionEWriteForm")).val(data.vender_nm);

    //    $("#TestRecognitionEVenderPopup").dxPopup("instance").hide();
    //}

    //function TestRecognitionEMakerRowDblClick(selectedItems) {
    //    var data = selectedItems.data;

    //    $("input[name=" + TestRecognitionEHelpPopUpCurInputName + "]", $('#' + "TestRecognitionEWriteForm")).val(data.vender_cd);
    //    $("input[name=material_maker_nm]", $('#' + "TestRecognitionEWriteForm")).val(data.vender_nm);

    //    $("#TestRecognitionEMakerPopup").dxPopup("instance").hide();
    //}

    //#endregion


    //#region 툴바 클릭 이벤트 관련

    // 조회
    function TestRecognitionESearch() {
        var form = $('#TestRecognitionESearchForm');

        $.ajax({
            type: 'GET',
            url: '/QualityControl/TestRecognitionESelect',
            data: form.serialize(),
            processData: true,
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
            success: function (result) {

                try {
                    var jsonData = JSON.parse(result == "" ? null : result);

                    // jsonData converting(시험종류에따라..)
                    for(let row of jsonData){if(["1","2","3","6"].indexOf(row.test_type_cd)>-1) row.test_judge_no=row.test_no;}

                    var jsonData = JSON.parse(result == "" ? null : result);
                    var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");

                    return new Promise((resolve, reject) => {
                        grid.option("dataSource", jsonData);
                        resolve();
                    })
                    .then(() => {
                        TestRecognitionEFocusChanged();
                    }).catch(() => {

                    });


                } catch (e) {

                    $("#TestRecognitionEGrid").dxDataGrid("option", "dataSource", []);

                }
            }
        })

        //UtilView.dataGridSelect('TestRecognitionEGrid', 'TestRecognitionESearchForm');
    }

    // 입력
    function TestRecognitionEInput() {

        $("#TestRecognitionEWriteForm")[0].reset();
        $("#TestRecognitionESignTable").dxDataGrid("option", "dataSource", []);
        $("#TestRecognitionEFileGrid").dxDataGrid("option", "dataSource", []);

        TestRecognitionEEditCheck(true, 'I');

        $("#TestRecognitionEWriteForm input[name=gmo_yn][value='N']").prop("checked", true);
    }

    // 수정
    function TestRecognitionEEdit() {

        var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");

        if (!grid.option("focusedRowKey")) {
            alert("수정할 사항이 없습니다.");
            return;
        }

        var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));

        var test_status = gridData.test_status;

        if (test_status == "0" || test_status == "1") {

            if (_testRecognitionESignCnt > 0) {
                alert("이미 서명된 시험의뢰는 수정할 수 없습니다.");
                return;
            }
        }
        else if (test_status != "0" || test_status != "1") {
            alert("시험이 진행중이므로 수정할 수 없습니다.");
            return;
        }

        TestRecognitionEEditCheck(true, 'U');
    }

    // 삭제
    async function TestRecognitionEDelete() {
        var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");

        if (!grid.option("focusedRowKey")) {
            alert("삭제할 내용이 없습니다.!");
            return;
        }
        var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));

        var upload_yn = gridData.upload_yn;

        if (upload_yn == "Y") {
            if (confirm("선택한 품목은 시험결과 업로드 취소 후 승인취소가 가능합니다.\n업로드를 취소하고 계속 진행하시겠습니까?")) {
                TestRecognitionEUpload();
            }
        }
        else
        {
            //전자서명이 된 품목인지 확인
            fnChkYN = await TestRecognitionEESStatusCheck(gridData.test_type_cd, gridData.test_status_no, "1");
            if (fnChkYN == "Y") {
                if (confirm("[주의] 시험성적승인을 취소하시겠습니까?")){
                    try {

                        var returnMessage = await TestRecognitionECancelCheckInfo(gridData.testcontrol_id, gridData.test_type_cd);

                        if ($.isNumeric(returnMessage)) {
                            TestRecognitionESearch();
                        }
                        else {
                            alert(returnMessage);
                            return;
                        }

                        if (_testRecognitionESignCnt < 1) {
                            //정보 취소 후 전자서명 취소까지 하나의 세션에서 처리함.
                            var objParam = { testcontrol_id: gridData.testcontrol_id, test_type: gridData.test_type };
                            TestRecognitionECancelResult(objParam);
                        }
                        else {

                            var objParam = { testcontrol_id: gridData.testcontrol_id, test_type: gridData.test_type };

                            $("#TestRecognitionESignPopup").dxPopup("instance").show();

                            // 작업자 서명 팝업 submit 버튼 클릭 이벤트 변경(마지막 작업자 확인)
                            $("#TestRecognitionESignForm button").off("click");
                            $("#TestRecognitionESignForm button").on("click", function () {
                                TestRecognitionECheckLastSignEmp(objParam);
                            });

                        }
                    }
                    catch {
                        alert("취소가능한 상태가 아닙니다.");
                    }
                }
            }
            else {
                alert("취소가능한 상태가 아닙니다.");
            }
        }

        //TestRecognitionEEditCheck(true, 'D');

        //TestRecognitionESave();
    }

    // 마지막 작업자 확인
    function TestRecognitionECheckLastSignEmp(param) {

        var data = new FormData($('#TestRecognitionESignForm')[0]);

        data.set("gubun", "S");

        // ID, PW 존재하는지 확인
        $.ajax({
            type: 'POST',
            url: '/Comm/IDValidation',
            data: data,
            contentType: false,
            processData: false,
            success: async function (result) {
                if (result.length <= 0) {

                    alert("잘못된 ID,PW 입니다.");
                    return;
                }

                var jsonData = JSON.parse(result)[0];

                // 마지막 서명자인지 확인
                $.ajax({
                    type: 'GET',
                    url: '/QualityControl/TestCheckECheckLastSignEmp',
                    dataType: "json",
                    data: {
                        testcontrol_id: param.testcontrol_id,
                        test_type: param.test_type,
                        process_kind: "1",
                        program_cd: "TestRecognitionE"
                    },
                    async: false,
                    success: function (result) {

                        if (jsonData.emp_cd != result.message) {
                            alert("마지막 서명자만 취소 할 수 있습니다.");
                            return;
                        }

                        // 시험 성적서 확인 정보 삭제(적/부 판정, 서명 정보)
                        TestRecognitionECancelResult(param);

                        $("#TestRecognitionESignPopup").dxPopup("instance").hide();

                    }
                });
            }
        });

    }

    // 시험 성적서 확인 정보 삭제(적/부 판정, 서명 정보)
    function TestRecognitionECancelResult(param) {
        $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionECancelSign',
            dataType: "json",
            data: {
                dto: JSON.stringify(param)
            },
            async: false,
            success: function (result) {

                if (result.message != "Y") {
                    alert("삭제에 실패했습니다.");
                    return;
                } else {
                    alert("삭제되었습니다.");
                }

                TestRecognitionESearch();
            }
        });
    }

    // 저장
    function TestRecognitionESave() {}

    // 취소
    function TestRecognitionEUndo() {
        TestRecognitionEEditCheck(false, 'N');
        TestRecognitionEFocusChanged();
    }

    // 출력, 미리보기
    function TestRecognitionEPrint() {
        // <report pre check>
        var gridName = "TestRecognitionEGrid";
        var grid = $("#" + gridName).dxDataGrid("instance");
        var gridFocusRowKey = grid.option("focusedRowKey")
        if (!gridFocusRowKey) {
            alert("출력할 품목을 선택하세요!");
            return;
        }
        var gridData = getGridRowByKey(gridName, gridFocusRowKey);

        var testcontrol_id = gridData.testcontrol_id;
        var test_type = gridData.test_type;

        // 시험완료(7) 이전 상태인 ---(0), 의뢰(1), 접수(2), 검체채취(5), 시험중(6), 시험지시(12) 인 경우
        if (parseInt(gridData.test_status_cd) < 7 ||
            gridData.test_status_cd == "12") {
            alert("[확인] 이전 단계가 완료되지 않았거나, 시험성적 입력이 끝나지 않았습니다\n시험 성적서를 출력 할 수 없습니다");
            return;
        }
        // </report pre check>

        // report 출력 객체 생성
        var report = new ReportHelper($(event.target));
        //var report = new ReportHelper();

        report.addParam({
            objFile: { path: "QualityControl", RptFileName: "TestCertificateCR_GD" },
            objSp: { SpName: "SP_TestCertificateReport", gubun: "S", reportParam: "testcontrol_id:" + testcontrol_id },
            // objEtcInfo 속성정의
            //  - viewerNanme => report뷰어명, 기본값: ReportViewer, 별도의 viewer사용시적용(DayOrderWork.cshtml 참조)
            //  - nCopies     => 프린트할 수량,  기본값:1, 수량지정시 해당수량만큼 프린트함
            objEtcInfo: { subParam: "set_sign_yn=", viewerName: "", nCopies: 1 }
            // dataset(다중테이블)  사용시, 아래주석을 풀어서 사용한다.
            //objTblNm: { tblName: "Header,TotalRate" },
            //sub report필요시, 아래주석을 풀어서 사용한다.
            //objSub: { subRptName: "Process,FinishDate,OrderQty,OrderQty2,Receive,ReceiveEA,Real,RealEA,Rate,Rate2,Remark" },
        });

        // 레포트테스트(생성객체확인)
        //report.testObj();
        report.run();
    }

    // 엑셀 추출
    function TestRecognitionEExcel() {
        var m;
        try { m = UtilView.getCurMenuInfo('menuname'); } catch (e) { m = '이름없음' };
        m += "_" + '@DateTime.Now.ToShortDateString()';
        gridExportToExcel("TestRecognitionEGrid", m);
    }

    //#endregion


    //#region 전자서명 관련

    // 서명 그리드 셀 클릭
    async function TestRecognitionESign(e) {
        // <before> 프로그램별 user define 함수 호출
        if (!await TestRecognitionEsaveSignData()) {
            return;
        }

        // 이하, 공통 로직 정의 start
        if ($("#TestRecognitionEWriteForm input[name=gubun]").val() != "N") {
            return;
        }

        _testRecognitionESignData = e.data;

        if (e.columnIndex == 3) {

            _testRecognitionESignGubun = "EI";

            if (e.data.prev_sign_yn == "0") {
                alert("먼저 앞 단계 승인이 필요합니다.");
                return;
            }

            if (e.data.sign_yn == "1") {

                if (e.data.next_sign_yn == "1") {
                    alert("이미 다음 단계가 승인 되어 있습니다.\n먼저 다음 단계 승인을 삭제(취소)해주세요. ");
                    return;
                } 

                if (confirm("이미 승인 되었습니다. 서명을 삭제하시겠습니까?")) {
                    _testRecognitionESignGubun = "SignCancel";
                } else {
                    return;
                }
            }

            $("#TestRecognitionESignPopup").dxPopup("instance").show();
            $("#TestRecognitionESignForm button").off("click");
            $("#TestRecognitionESignForm button").on("click", function () {
                TestRecognitionESignSubmit();
            });
        }
    }

    // 전자서명 입력
    function TestRecognitionESignSubmit() {

        var data = new FormData($('#TestRecognitionESignForm')[0]);

        data.set("gubun", "S");

        $.ajax({
            type: 'POST',
            url: '/Comm/IDValidation',
            data: data,
            contentType: false,
            processData: false,
            success: async function (result) {
                if (result.length <= 0) {

                    alert("잘못된 ID,PW 입니다.");
                    return;
                }

                var jsonData = JSON.parse(result)[0];

                var isOK = false;
                var fnChkYN = "";        // 함수check Y/N

                var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");
                var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));

                 // 전자서명은 필수가 아닌 경우를 확인
                if (_testRecognitionESignData.necessary_yn !== "Y") {
                    //전자서명 정보저장은 하지않고 상태만 다음상태로 변경.
                    fnChkYN = await TestRecognitionESetNextStatus(gridData.testcontrol_id, gridData.test_type, "1");
                    if (fnChkYN == "Y") {

                        //현재 단계의 모든 필수 서명이 완료된 경우-->프로그램 특성상 추가부분..
                        fnChkYN = await TestRecognitionECheckEnd(gridData.testcontrol_id, gridData.test_type, "1");
                        if (fnChkYN == "Y") {
                            TestRecognitionESaveCheckInfo();
                        }

                        //alert("정상적으로 처리되었습니다.!!!");
                        TestRecognitionESearch();

                        setTimeout(function () {
                            var popup = $("#TestRecognitionESignPopup").dxPopup("instance");
                            popup.hide();
                        }, 1000);
                    }
                    else {
                        alert("인증에 실패했습니다.!!!");
                        return;
                    }
                }
                // 전자서명 필수인 경우
                else {
                    //로그인 사용자와 동일한지 여부 체크
                    if (jsonData.emp_cd !== sessionStorage.getItem("loginCD")) {
                        alert("로그인 사용자와 서명자가 일치하지 않습니다.");
                        return;
                    }

                    var representative_yn = 'N';

                    //서명 책임자와 서명자가 일치하지 않으면 대리자 권한을 체크한다.
                    if (_testRecognitionESignData.responsible_emp_cd !== jsonData.emp_cd) {

                        $.ajax({
                            type: 'GET',
                            url: '/QualityControl/TestRecognitionESignDelegateCheck',
                            data: {
                                emp_cd: jsonData.emp_cd,
                                testcontrol_id: gridData.testcontrol_id,
                                process_kind: '1',
                                test_type: gridData.test_type_cd,
                                sign_set_dt_id: _testRecognitionESignData.sign_set_dt_id
                            },
                            async: false,
                            success: function (result) {
                                if (result.length > 0) {
                                    representative_yn = 'Y';
                                    isOK = true;
                                } else {
                                    isOK = false;
                                }
                            }
                        });

                    } else {
                        isOK = true;
                    }

                    if (!isOK) {
                        alert("권한이 없는 사용자입니다.");
                        return;
                    }


                    //전자 서명 자료를 저장한다
                    var paramData = {
                        gubun: _testRecognitionESignGubun,
                        emp_cd: jsonData.emp_cd,
                        testcontrol_id: gridData.testcontrol_id,
                        process_kind: '1',
                        test_type: gridData.test_type_cd,
                        sign_set_dt_id: _testRecognitionESignData.sign_set_dt_id,
                        validation_type: "2",
                        representative_yn: representative_yn
                    };

                    fnChkYN = await TestRecognitionESaveElectronicSignature(paramData);

                    if (fnChkYN == "Y") {
                        //현재 단계의 모든 필수 서명이 완료된 경우-->프로그램 특성상 추가부분..
                        fnChkYN = await TestRecognitionECheckEnd(gridData.testcontrol_id, gridData.test_type_cd);
                        if (fnChkYN == "Y") {
                            TestRecognitionESaveCheckInfo();
                        }
                    } else {
                        alert("인증에 실패했습니다.!!!");
                        return;
                    }

                    $("#TestRecognitionESignPopup").dxPopup("instance").hide();
                    _testRecognitionESignGubun = "";
                    TestRecognitionESearch();

                }
            }
        });
    }

    // 전자서명 인풋 초기화
    function ClearTestRecognitionESignInput() {
        $('#TestRecognitionESignForm')[0].reset();
        $("#TestRecognitionESignForm button").off("click");
        $("#TestRecognitionESignForm button").on("click", function () {
            TestRecognitionESignSubmit();
        });
    }

    //#endregion


    //#region 파일 관련

    // 파일목록만 조회
    function TestRecognitionESelectFileList() {
        var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");
        var grid2 = $("#TestRecognitionEDetailGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));
        var gridData2 = getGridRowByKey("TestRecognitionEDetailGrid", grid2.option("focusedRowKey"));

        //var testcontrol_id = $("#TestRecognitionEWriteForm input[name=testcontrol_id]").val();

        $.ajax({
            type: 'GET',
            url: '/QualityControl/testRecognitionESelectFile',
            data: {
                testcontrol_id: gridData.testcontrol_id,
                teststandardmaster_id: gridData2.teststandardmaster_id
            },
            success: function (result) {

                try {
                    var json = JSON.parse(result);
                    $("#TestRecognitionEFileGrid").dxDataGrid("option", "dataSource", json);
                } catch (e) {
                    $("#TestRecognitionEFileGrid").dxDataGrid("option", "dataSource", []);
                }
            }
        });
    }

    // 파일 업로드 버튼
    function TestRecognitionEUploadFileBtn(event) {

        //if ($("#TestRecognitionEWriteForm input[name=gubun]").val() !== "U") {
        //    alert("수정중일때만 파일 첨부가 가능합니다.");
        //    return;
        //}
        var grid = $("#TestRecognitionEDetailGrid").dxDataGrid("instance");

        //console.log("filegrid rowkey :" + grid.option("focusedRowKey"));
        if (grid.option("focusedRowKey")) {

            var fileUploader = $('#TestRecognitionEFileUploader').dxFileUploader('instance');
            fileUploader._isCustomClickEvent = true;
            fileUploader._$fileInput.click();
        } else {
            alert("첨부할 시험항목을 선택하십시오!")
        }
    }

    // 파일 업로드
    function TestRecognitionEUploadFile(e) {
        var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");
        var grid2 = $("#TestRecognitionEDetailGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));
        var gridData2 = getGridRowByKey("TestRecognitionEDetailGrid", grid2.option("focusedRowKey"));


        var name = e.component.option("name");
        var url = e.component.option("uploadUrl");
        url = updateQueryStringParameter(url, "testcontrol_id", gridData.testcontrol_id);
        url = updateQueryStringParameter(url, "teststandardmaster_id", gridData2.teststandardmaster_id);
        url = updateQueryStringParameter(url, "name", name);

        e.component.option("uploadUrl", url);
    }

    // 파일 다운로드
    function TestRecognitionEDownloadFileBtn(e) {

        var grid = $("#TestRecognitionEFileGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("TestRecognitionEFileGrid", grid.option("focusedRowKey"));

        var grid2 = $("#TestRecognitionEGrid").dxDataGrid("instance");
        var grid3 = $("#TestRecognitionEDetailGrid").dxDataGrid("instance");
        var gridData2 = getGridRowByKey("TestRecognitionEGrid", grid2.option("focusedRowKey"));
        var gridData3 = getGridRowByKey("TestRecognitionEDetailGrid", grid3.option("focusedRowKey"));

        var fileId = gridData.test_back_data_id;

        if (fileId != "") {
            var url = "";
            url = updateQueryStringParameter(url, "testcontrol_id", gridData2.testcontrol_id);
            url = updateQueryStringParameter(url, "teststandardmaster_id", gridData3.teststandardmaster_id);
            url = updateQueryStringParameter(url, "file_id", fileId);

            //console.log("url : " + url);

            document.location.assign('/QualityControl/TestRecognitionEDownloadFile'+url);
        }
    }

    // 파일 삭제
    function TestRecognitionEDeleteFileBtn() {

        if (!confirm("선택한 문서를 삭제하시겠습니까?")) {
            return;
        }

        var grid = $("#TestRecognitionEFileGrid").dxDataGrid("instance");
        var gridData = getGridRowByKey("TestRecognitionEFileGrid", grid.option("focusedRowKey"));

        var grid2 = $("#TestRecognitionEGrid").dxDataGrid("instance");
        var grid3 = $("#TestRecognitionEDetailGrid").dxDataGrid("instance");
        var gridData2 = getGridRowByKey("TestRecognitionEGrid", grid2.option("focusedRowKey"));
        var gridData3 = getGridRowByKey("TestRecognitionEDetailGrid", grid3.option("focusedRowKey"));

        $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionEDeleteFile',
            data: {
                testcontrol_id: gridData2.testcontrol_id,
                teststandardmaster_id: gridData3.teststandardmaster_id,
                file_id: gridData.test_back_data_id
            },
            success: function (result) {

                alert("삭제하였습니다.");

                TestRecognitionESelectFileList();
            }
        });
    }

    //#endregion


    //#region 프로그램별 함수
    async function TestRecognitionEsaveSignData() {
        //debugger;
        var grid = $("#TestRecognitionEGrid").dxDataGrid("instance");
        if (!grid.option("focusedRowKey")) {
            return false;
        }
        var gridData = getGridRowByKey("TestRecognitionEGrid", grid.option("focusedRowKey"));

        //debugger;

        var test_type_ck = gridData.test_type_cd;
        var testcontrol_id = gridData.testcontrol_id;

        //사용기한, 재시험 여부 체크
        if (test_type_ck != "10" && test_type_ck != "2") {
            if (!validationElementCk('TestRecognitionEWriteForm', 'retest_yn', true, '사용기한 정보가 없습니다.!!!')) return false;
        }

        //사용기한 일자 체크
        if (test_type_ck != "10" && test_type_ck != "2") {
            if (!validationElementCk('TestRecognitionEWriteForm', 'valid_period', false, '')) {
                    alert('사용일자가 없습니다.!!!');
                    return false;
            }
        }

        //프로그램 특성상 추가된 코드
        if (!validationElementCk('TestRecognitionEWriteForm', 'test_result_yn_c', true, '적합/ 부적합 판정에 체크되어 있지 않습니다')) return false;

        //시험이 적합일때는 유효기한 여부와 시험완료여부를 체크한다.
        //적합을 선택한 경우, 시험항목을 체크해서 부적합이 있으면 에러 메시지를 준다.
        var check = true;
        var test_result_yn_c = $('input[name=test_result_yn_c]:checked', $('#TestRecognitionEWriteForm')).val();
        if (test_result_yn_c == "Y") {
            if (!validationElementCk('TestRecognitionEWriteForm', 'valid_period', true, '사용기한을 입력하십시오.!!!')) return fals;

            var item_cd = gridData.item_cd;
            if (await TestRecognitionECheckTestStandard(testcontrol_id) == false) {
                alert("시험이 모두 완료되지 않았습니다");
                return false;
            }

            //첨부 데이터 확인 여부 체크
            if (await TestRecognitionEDataCheckYN(testcontrol_id) == "N") {
                alert("첨부 자료의 확인을 완료한 후 서명할 수 있습니다.");
                return false;
            }

            var grid2 = $("#TestRecognitionEDetailGrid").dxDataGrid("instance");
            var objRows = grid2.getVisibleRows();
            for (var index in objRows) {
                //참고시험이 아닌경우에만 해당
                if (grid2.cellValue(index, "reference_test_yn") != "Y" && grid2.cellValue(index, "testitem_result_yn") == "N" && grid2.cellValue(index, "retest_check") != "ReTest") {
                    check = false;
                    break;
                }
            }

            if (check == false) {
                alert("시험항목중 부적합 된 항목이 존재하는 경우 적합 판정을 할 수 없습니다.");
                return false;
            }

            var test_date = gridData.test_date;
            if (await TestRecognitionECheckTestDate(testcontrol_id, test_date) == "N") {
                alert("승인일자는 시험일자 이후여야 합니다.");
                return false;
            }

        }

        //var start_qty = $("#TestRecognitionEWriteForm input[name=start_qty]").val();

        //if (start_qty < 0) {
        //    alert("의뢰량이 마이너스입니다.");
        //    return;
        //}

        //var form = $('#TestRecognitionEWriteForm')[0];
        //var formData = new FormData(form);

        //if (!UtilView.checkValidForm("TestRecognitionEWriteForm")) {
        //    return;
        //}

        //UtilView.dataGridTRX(formData, () => TestRecognitionESearch());

        return true;
    }

    async function TestRecognitionECheckTestStandard(testcontrol_id) {
        var objParam = { testcontrol_id: testcontrol_id};
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionECheckTestStandard',
            data: {
                dto: JSON.stringify(objParam)
            }
        });
        return result;
    }

    async function TestRecognitionEDataCheckYN(testcontrol_id) {
        var objParam = { testcontrol_id: testcontrol_id };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionEDataCheckYN',
            data: {
                dto: JSON.stringify(objParam)
            }
        });
        return result;
    }

    async function TestRecognitionECheckTestDate(testcontrol_id, test_date) {
        var objParam = { testcontrol_id: testcontrol_id, test_date:test_date };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionECheckTestDate',
            data: {
                dto: JSON.stringify(objParam)
            }
        });
        return result;
    }

    async function TestRecognitionESetStatusTestCompleteForReject(testcontrol_id) {
        var objParam = { testcontrol_id: testcontrol_id };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionESetStatusTestCompleteForReject',
            data: {
                dto: objParam
            }
        });
        return result;
    }

    async function TestRecognitionESaveElectronicSignature(paramData) {
        //var objParam = { testcontrol_id: testcontrol_id };
        var objParam = paramData;
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionESaveElectronicSignature',
            data: paramData
        });
        return result;
    }

    async function TestRecognitionESaveCheckInfo() {

        var writeForm = $('#TestRecognitionEWriteForm');

        var extend_yn = UtilView.isEmpty($('input[name=extend_yn]:checked', writeForm).val()) ? "N" : "Y";

        var objParam = {
            testcontrol_id : $('input[name=testcontrol_id]', writeForm).val(),
            test_result_yn_c: $('input[name=test_result_yn_c]:checked', writeForm).val(),
            test_date: $('input[name=test_date]', writeForm).val(),
            test_inform_remark: $('textarea[name=test_inform_remark]', writeForm).val(),
            valid_period: $('input[name=valid_period]', writeForm).val(),
            retest_yn: $('input[name=retest_yn]:checked', writeForm).val(),
            test_result_value: $('input[name=test_result_value]', writeForm).val(),
            qc_valid_period: $('input[name=qc_valid_period]', writeForm).val(),
            extend_yn: extend_yn,
            test_result_value0: $('input[name=test_result_value0]', writeForm).val(),
            test_result_pollination: $('input[name=test_result_pollination]', writeForm).val(),
            test_result_solvent: $('input[name=test_result_solvent]', writeForm).val()
        }

        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionESaveCheckInfo',
            data: {
                dto: JSON.stringify(objParam)
            }
        });
        return result;
    }

    async function TestRecognitionESetNextStatus(testcontrol_id, test_type, process_kind) {
        var objParam = { testcontrol_id: testcontrol_id, test_type: test_type, process_kind: process_kind };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionESetNextStatus',
            data: objParam
        });
        return result;
    }

    async function TestRecognitionECheckEnd(testcontrol_id, test_type, process_kind) {
        var objParam = { testcontrol_id: testcontrol_id, test_type_cd: test_type, process_kind: process_kind};
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionECheckEnd',
            data: {
                dto: JSON.stringify(objParam)
            }
        });
        return result;
    }

    async function TestRecognitionEUpload(testcontrol_id, test_type_cd, upload_yn) {
        if (test_type_cd == "1" || test_type_cd == "2")
        {
            var returnMessage;
            var type;
            //업로드된 것("Y")이면 취소, 아닌것("N")은 업로드
            type = upload_yn == "Y" ? "C" : "A";
            returnMessage = await TestRecognitionEInterfaceUpload(testcontrol_id, test_type_cd, type);
            if (!$.isNumeric(returnMessage)) {
                 alert(returnMessage);
            }
        }
    }

    async function TestRecognitionEInterfaceUpload(testcontrol_id, test_type, createtype) {
        var objParam = { testcontrol_id: testcontrol_id, test_type: test_type, create_type : createtype };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionEInterfaceUpload',
            data: objParam
        });
        return result;
    }

    async function TestRecognitionEESStatusCheck(test_type_cd, test_status, process_kind) {
        var objParam = { test_type: test_type_cd, test_status: test_status, process_kind: process_kind };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionEESStatusCheck',
            data: objParam
        });
        return result;
    }

    async function TestRecognitionECancelCheckInfo(testcontrol_id, test_type_cd) {
        var objParam = { testcontrol_id: testcontrol_id, test_type: test_type_cd };
        const result = await $.ajax({
            type: 'POST',
            url: '/QualityControl/TestRecognitionECancelCheckInfo',
            data: objParam
        });

        return result;
    }

    function TestRecognitionECheckTestStatus(gridData) {
        var test_status_cd = gridData.test_status_no;
        var test_judge_no = gridData.test_judge_no;

        var checkStatus = false;

        // 지시(12) 상태거나, // 확인 이전상태인 경우
        if ((test_status_cd == "12" ||   parseInt(test_status_cd) < 8))
        {
            alert("[불가] 이전 단계가 완료되지 않거나, 시험 확인 결과가 입력되지 않았습니다.\n성적 확인 결과를 취소 할 수 없습니다.");
            checkStatus = false;
        }else if (test_status_cd == "14" && test_judge_no == "") {
            checkStatus = true;
        } else if (parseInt(test_status_cd) > 8) // 확인 다음상태인 경우
        {
            alert("[불가]승인된 정보는 취소할 수 없습니다.");
            checkStatus = false;
        }
        return checkStatus;
    }

    // 의뢰 및 통보서 출력
    function TestRecognitionEReqPrint(e) {
        var evtBtnGb = e.target.getAttribute("name").lastIndexOf("Preview") > -1 ? "Preview" : "Print";

        // <report pre check>
        var gridName = "TestRecognitionEGrid";
        var grid = $("#" + gridName).dxDataGrid("instance");
        var gridFocusRowKey = grid.option("focusedRowKey")

        if (!gridFocusRowKey) {
            alert("출력할 품목을 선택하세요!");
            return;
        }
        var gridData = getGridRowByKey(gridName, gridFocusRowKey);

        var testcontrol_id = gridData.testcontrol_id;
        //var test_type = gridData.test_type;
        // </report pre check>

        // report 출력 객체 생성
        var report = new ReportHelper();
        report.btnType = evtBtnGb;

        //var report = new ReportHelper();
        var reportParams = "testcontrol_id:" + testcontrol_id;

        report.addParam({
            objFile: { path: "QualityControl", RptFileName: "rptTestInform" },
            objSp: { SpName: "SP_TestInformReport", gubun: "S5", reportParam: reportParams },
            // objEtcInfo 속성정의
            //  - viewerNanme => report뷰어명, 기본값: ReportViewer, 별도의 viewer사용시적용(DayOrderWork.cshtml 참조)
            //  - nCopies     => 프린트할 수량,  기본값:1, 수량지정시 해당수량만큼 프린트함
            objEtcInfo: { subParam: "", viewerName: "", nCopies: 1 }
            // dataset(다중테이블)  사용시, 아래주석을 풀어서 사용한다.
            //objTblNm: { tblName: "Header,TotalRate" },
            //sub report필요시, 아래주석을 풀어서 사용한다.
            //objSub: { subRptName: "Process,FinishDate,OrderQty,OrderQty2,Receive,ReceiveEA,Real,RealEA,Rate,Rate2,Remark" },
        });
        report.run();
    }

    // 시험 결과 통보서 출력
    function TestRecognitionETestInfoPrint(e) {
        var evtBtnGb = e.target.getAttribute("name").lastIndexOf("Preview") > -1 ? "Preview" : "Print";

        // <report pre check>
        var gridName = "TestRecognitionEGrid";
        var grid = $("#" + gridName).dxDataGrid("instance");
        var gridFocusRowKey = grid.option("focusedRowKey")

        if (!gridFocusRowKey) {
            alert("출력할 품목을 선택하세요!");
            return;
        }
        var gridData = getGridRowByKey(gridName, gridFocusRowKey);

        var testcontrol_id = gridData.testcontrol_id;
        //var test_type = gridData.test_type;
        // </report pre check>

        // report 출력 객체 생성
        var report = new ReportHelper();
        report.btnType = evtBtnGb;
        //var report = new ReportHelper();
        var reportParams = "testcontrol_id:" + testcontrol_id;

        report.addParam({
            objFile: { path: "QualityControl", RptFileName: "rptTest_Inform" },
            objSp: { SpName: "SP_TestInformReport", gubun: "S3", reportParam: reportParams },
            // objEtcInfo 속성정의
            //  - viewerNanme => report뷰어명, 기본값: ReportViewer, 별도의 viewer사용시적용(DayOrderWork.cshtml 참조)
            //  - nCopies     => 프린트할 수량,  기본값:1, 수량지정시 해당수량만큼 프린트함
            objEtcInfo: { subParam: "", viewerName: "", nCopies: 1 }
            // dataset(다중테이블)  사용시, 아래주석을 풀어서 사용한다.
            //objTblNm: { tblName: "Header,TotalRate" },
            //sub report필요시, 아래주석을 풀어서 사용한다.
            //objSub: { subRptName: "Process,FinishDate,OrderQty,OrderQty2,Receive,ReceiveEA,Real,RealEA,Rate,Rate2,Remark" },
        });
        report.run();
    }

    //#endregion 프로그램별 함수

</script>

<style>

    /* 포커스된 시험의뢰 그리드 로우의 글자색 검정색으로(하이라이트 된 로우와 셀의 글자 잘 보기 위함) */
    #TestRecognitionEGrid .dx-datagrid-rowsview .dx-row-focused.dx-data-row .dx-command-edit .dx-link, #TestRecognitionEGrid .dx-datagrid-rowsview .dx-row-focused.dx-data-row > td:not(.dx-focused), #TestRecognitionEGrid .dx-datagrid-rowsview .dx-row-focused.dx-data-row > tr > td:not(.dx-focused) {
        color: #242424;
    }
</style>


<div id="@(pagePrefix)" page-ctrl-name="@(pageControllerNm)" autoresize="N">

    <div id="TestRecognitionEItemPopup"></div>
    <div id="TestRecognitionEVenderPopup"></div>
    <div id="TestRecognitionEMakerPopup"></div>

    <div>
        @(Html.DevExtreme().Popup()
            .ID("TestRecognitionESignPopup")
            .Width(400)
            .Height(200)
            .ShowTitle(true)
            .Title("작업자 인증")
            .OnHidden("ClearTestRecognitionESignInput")
            .Visible(false)
            .DragEnabled(true)
            .CloseOnOutsideClick(false)
            .ContentTemplate(new JS("TestRecognitionESignPopupTemplate"))
        )
    </div>

    @using (Html.DevExtreme().NamedTemplate("TestRecognitionESignPopupTemplate"))
    {
        <h6>전자서명은 수기서명과 동일한 효력을 갖습니다.</h6>

        <form id="TestRecognitionESignForm" class="mb-1">

            <div class="input-wrapper mb-1">
                <label class="col-3">아이디</label>
                <input type="text" class="col-8 form-control" name="txt_ID">
            </div>
            <div class="input-wrapper">
                <label class="col-3">비밀번호</label>
                <input type="password" class="col-8 form-control" name="txt_Pass">
            </div>
            <div class="align-end-only">
                <button type="button" class="btn btn-secondary">확인</button>
            </div>
        </form>
    }

    <div class="mainTop row">

        <div class="col-8">

            <form id="@(pagePrefix)SearchForm">

                <div class="input-wrapper">

                    <div class="col-3 input-group input-group-sm">
                        <div class="input-group-prepend">
                            <span class="input-group-text">구분</span>
                        </div>
                        <label class="p-1"></label>

                        <div class="input-group-prepend">
                            <input class="input-group-append" type="radio" value="1" id="@(pagePrefix)selectdate1" name="rg_ReqorRec" checked />
                        </div>
                        <span class="form-control-sm"><label for="@(pagePrefix)selectdate1">의뢰</label></span>

                        <div class="input-group-prepend">
                            <input class="input-group-append" type="radio" value="2" id="@(pagePrefix)selectdate2" name="rg_ReqorRec" />

                        </div>
                        <span class="form-control-sm"><label for="@(pagePrefix)selectdate2">접수</label></span>
                        <div class="input-group-prepend">
                            <input class="input-group-append" type="radio" value="3" id="@(pagePrefix)selectdate3" name="rg_ReqorRec" />

                        </div>
                        <span class="form-control-sm"><label for="@(pagePrefix)selectdate3">승인</label></span>
                    </div>

                    <div class="input-group input-group-sm col-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">시험종류</span>
                        </div>
                        <select class="form-control" name="le_testitem_nm">
                            @foreach (DataRow row in ((DataTable)Public_Function.GetMaster("공통코드", "S", "QC004")).Rows)
                            {
                                <option value="@row["keyfield"]">@row["displayfield"]</option>
                            }
                        </select>
                    </div>

                    <div class="input-group input-group-sm col-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">진행상태</span>
                        </div>
                        <select class="form-control" name="rg_status">
                            <option value="%">전체</option>
                            <option value="1">대상</option>
                            <option value="2">완료</option>
                        </select>
                    </div>
                </div>
                <div class="input-wrapper">

                    <div class="col-3 input-group input-group-sm">
                        <div class="input-group-prepend">
                            <span class="input-group-text">기간</span>
                        </div>
                        <input type="text" class="form-control datepicker text-center" name="de_SDate" autocomplete="off">
                        <label class="col-1 form-text"> ~ </label>
                        <input type="text" class="form-control input-sm datepicker text-center" name="de_EDate" autocomplete="off">
                    </div>

                    <div class="input-group input-group-sm col-2">
                        <div class="input-group-prepend">
                            <span class="input-group-text">제형</span>
                        </div>
                        <select class="form-control" name="le_item_form_cd">
                            @foreach (DataRow row in ((DataTable)Public_Function.GetMaster("공통코드", "S", "CM065")).Rows)
                            {
                                <option value="@row["keyfield"]">@row["displayfield"]</option>
                            }
                        </select>
                    </div>

                    <div class="input-group input-group-sm col-4">
                        <div class="input-group-prepend">
                            <span class="input-group-text">검색어</span>
                        </div>
                        <select class="form-control" name="ce_gubun_number">
                            <option value="0">의뢰품목</option>
                            <option value="1">의뢰번호</option>
                            <option value="2">제조(관리)번호</option>
                        </select>
                        <input type="text" class="form-control input-sm text-center" name="te_number">
                    </div>

                </div>

            </form>

        </div>
        <!-- $CRUD버튼-->
        <div class="CRUD-btn col-4">
            @* === CRUD 버튼 === *@
            @{Html.SetToolbar(0, true, "Search;Delete;Print;Preview;Excel");}
        </div>
    </div>

    <div class="row">

        @*<div class="col-2">
            &nbsp;
        </div>
        <div class="row col-5">*@

        <div class="col-2">
            <input type="button" name="TestRecognitionETestInfoPreview" class="m-1 btn btn-sm btn-primary" value="시험 결과 통보서" />
            <input type="button" name="TestRecognitionETestInfoPrint" class="m-1 btn btn-sm btn-primary" value="출력" />
        </div>
        <div class="col-2">
            <input type="button" name="TestRecognitionEReqPreview" class="m-1 btn btn-sm btn-primary" value="의뢰 및 통보서" />
            <input type="button" name="TestRecognitionEReqPrint" class="m-1 btn btn-sm btn-primary" value="출력" />
        </div>

        @*</div>        
        <div class="col-2">
            &nbsp;
        </div>*@

    </div>

    <div class="row mb-0">

        <div class="col-9 pr-1">
            <div class="box mb-0">

                @(Html.DevExtreme().DataGrid()
                    .ID("TestRecognitionEGrid")
                    .KeyExpr("testcontrol_id")
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                    .Height(550)
                    .ShowBorders(true)
                    .FocusedRowEnabled(true)
                    .FocusedRowIndex(0)
                    .SearchPanel(searchPanel => searchPanel.Visible(true))
                    .Export(e => e.Enabled(true).AllowExportSelectedData(true))
                    .ShowColumnLines(true)
                    .HoverStateEnabled(true)
                    .ColumnAutoWidth(true)
                    .AllowColumnResizing(true)
                    .Columns(c =>
                    {

                        c.Add().DataField("test_type").Caption("시험종류");

                        c.Add().DataField("item_cd").Caption("품목코드");
                        c.Add().DataField("item_nm").Caption("품목");
                        c.Add().DataField("start_no").Caption("제조번호");
                        c.Add().DataField("test_no").Caption("의뢰번호");
                        c.Add().DataField("test_standard_nm_1").Caption("규격");
                        c.Add().DataField("process_nm").Caption("구분");
                        c.Add().DataField("test_result_yn").Caption("판정");
                        c.Add().DataField("test_status").Caption("진행상태");
                        c.Add().DataField("request_date").Caption("의뢰일자");
                        c.Add().DataField("receive_date").Caption("접수일자");
                        c.Add().DataField("instruction_date").Caption("지시일자");
                        c.Add().DataField("test_date").Caption("승인일자");
                    })
                    .OnFocusedRowChanged("TestRecognitionEFocusChanged")
                    .OnRowPrepared("TestRecognitionEHighlightRow")
                    .OnCellPrepared("TestRecognitionEHighlightCell")
                    .OnToolbarPreparing("HideToolbarButton")
                )

            </div>
        </div>

        <div class="col-3 pl-0">

            <div class="box mb-0 flex-box-div">

                <div class="divName mb-1">
                    <p>시험기록서 승인 정보</p>
                </div>

                <form id="TestRecognitionEWriteForm" class="mb-1">

                    <input name="gubun" hidden="hidden" />
                    <input name="testcontrol_id" hidden="hidden" />
                    <input type="hidden" name="test_result_value0" />

                    <div class="input-wrapper">
                        <label class="col-2 pr-0">승인정보</label>
                        <div class="input-group col-7">
                            <input type="radio" class="radio" id="tr_rg_YorN1" name="test_result_yn_c" value="Y" />
                            <label for="tr_rg_YorN1">적합</label>
                            <label class="p-2"></label>
                            <input type="radio" class="radio" id="tr_rg_YorN2" name="test_result_yn_c" value="N" />
                            <label for="tr_rg_YorN2">부적합</label>
                            <label class="p-2"></label>
                            <input type="radio" class="radio" id="tr_rg_YorN3" name="test_result_yn_c" value="C" />
                            <label for="tr_rg_YorN3">조건부적합</label>
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-2 pr-0">역가</label>
                        <div class="input-group col-2">
                            <input type="number" class="form-control" name="test_result_value" />
                        </div>
                        <label class="col-2 pr-0">수분함량</label>
                        <div class="input-group col-2">
                            <input type="number" class="form-control" name="test_result_pollination" />
                        </div>
                        <label class="col-1 pr-0 pl-0">용매</label>
                        <div class="input-group col-2">
                            <input type="number" class="form-control" name="test_result_solvent" />
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-2 pr-0">승인일자</label>
                        <div class="input-group col-3">
                            <input type="text" class="form-control datepicker" name="test_date" />
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-2">비고</label>
                        <div class="input-group col-9">
                            <textarea class="form-control" name="test_inform_remark" />
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-2 pr-0">사용기한</label>
                        <div class="input-group col-5">
                            <input type="radio" class="radio" id="tr_rg_retest_yn1" name="retest_yn" value="Y" />
                            <label for="tr_rg_retest_yn1">재시험일자</label>
                            <label class="p-2"></label>
                            <input type="radio" class="radio" id="tr_rg_retest_yn2" name="retest_yn" value="N" />
                            <label for="tr_rg_retest_yn2">유통기한</label>
                        </div>
                        <div class="input-group col-3">
                            <input type="text" class="form-control datepicker align-center" name="valid_period" />
                        </div>
                    </div>
                    <div class="input-wrapper">
                        <label class="col-3 pr-0">(QC)유통기한</label>
                        <div class="input-group col-3">
                            <input type="text" class="form-control datepicker" name="qc_valid_period" />
                        </div>
                        <div class="input-group-append col-5">
                            <input type="checkbox" class="form-check" id="tr_ck_extend_yn1" name="extend_yn" value="Y" />
                            부형제 기한연장
                        </div>
                    </div>
                </form>

                <div class="divName mb-1">
                    <p>전자서명 정보</p>
                </div>
                <div id="TestRecognitionETabContent_1" class="height-inherit">
                    @(Html.DevExtreme().DataGrid()
                    .ID("TestRecognitionESignTable")
                    .ShowBorders(true)
                    .ShowColumnLines(true)
                    .ShowRowLines(true)
                    .FocusedRowEnabled(true)
                    .FocusedRowIndex(0)
                    .KeyExpr("sign_set_dt_id")
                    .OnCellClick("TestRecognitionESign")
                    .Height(300)
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .ColumnAutoWidth(true)
                    .AllowColumnResizing(true)
                    .ColumnResizingMode(ColumnResizingMode.Widget)
                    .ColumnChooser(cc => cc.Enabled(true))
                    .AllowColumnReordering(true)
                    .Columns(columns =>
                    {
                        columns.Add()
                            .DataField("displayfield")
                            //.Width("15%")
                            .Caption("구분");
                        columns.Add()
                            .DataField("sign_emp_nm")
                            //.Width("20%")
                            .Caption("서명자");
                        columns.Add()
                            .DataField("sign_time")
                            .Caption("서명일자");
                        columns.Add()
                            .AllowFiltering(false)
                            .AllowSorting(false)
                            .DataField("sign_image")
                            .Name("sign_image")
                            .Caption("서명")
                            //.Width("25%")
                            .CellTemplate(@<text>
                                    <div>
                                        <img src="<%- value %>" alt="" style="width:80px; height:25px;"/>
                                    </div>
                                </text>);
                        })
                    )

                </div>
                <!-- 탭버튼 controll 탭버튼 : 필요시 사용 -->
                @*<ul class="nav nav-tabs" id="TestRecognitionETab">
                        <li class="nav-item">
                            <a class="nav-link active" onclick="menutab('TestRecognitionETab', 'TestRecognitionETabContent', 1);">전자서명 정보</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" onclick="menutab('TestRecognitionETab', 'TestRecognitionETabContent', 2);">첨부파일</a>
                        </li>
                    </ul>*@

                <!-- 탭 content : 필요시 사용 -->
                @*<div id="TestRecognitionETabContent" class="flex-grow-1">

                        <!-- 탭1: 전자서명 content-->
                        <div id="TestRecognitionETabContent_1" class="height-inherit">

                            @(Html.DevExtreme().DataGrid()
                                    .ID("TestRecognitionESignTable")
                                    .ShowBorders(true)
                                    .ShowColumnLines(true)
                                    .ShowRowLines(true)
                                    .FocusedRowEnabled(true)
                                    .FocusedRowIndex(0)
                                    .KeyExpr("sign_set_dt_id")
                                    .OnCellClick("TestRecognitionESign")
                                    .Height(100)
                                    .Selection(s => s.Mode(SelectionMode.Single))
                                    .Columns(columns =>
                                    {
                                        columns.Add()
                                            .DataField("displayfield")
                                            .Width("15%")
                                            .Caption("구분");
                                        columns.Add()
                                            .DataField("sign_emp_nm")
                                            .Width("20%")
                                            .Caption("서명자");
                                        columns.Add()
                                            .DataField("sign_time")
                                            .Caption("서명일자");
                                        columns.Add()
                                            .AllowFiltering(false)
                                            .AllowSorting(false)
                                            .DataField("sign_image")
                                            .Name("sign_image")
                                            .Caption("서명")
                                            .Width("25%")
                                            .CellTemplate(@<text>
                                                <div>
                                                    <img src="<%- value %>" alt="" style="width:80px; height:25px;"/>
                                                </div>
                                            </text>);
                                    })
                                )

                        </div>

                        <!-- 탭2: 파일관리 content-->
                        <div id="TestRecognitionETabContent_2" class="height-inherit">

                            <div class="align-end-only">
                                <button class="btn btn-secondary" id="TestRecognitionEUploadFileBtn">등록</button>
                                <button class="btn btn-secondary" id="TestRecognitionEDownloadFileBtn">다운로드</button>
                                <button class="btn btn-secondary" id="TestRecognitionEDeleteFileBtn">삭제</button>
                            </div>

                            @(Html.DevExtreme().FileUploader()
                                    .Visible(false)
                                    .ID("TestRecognitionEFileUploader")
                                    .Name("TestRecognitionEAttatchedFile")
                                    .Multiple(false)
                                    .AllowedFileExtensions(new[] { ".hwp", ".doc", ".docx", ".dot", ".pdf", ".rtf"})
                                    .UploadUrl(Url.Action("TestRecognitionEUploadFile", "TestReq"))
                                    .UploadMode(FileUploadMode.Instantly)
                                    .MaxFileSize(int.MaxValue)
                                    .OnValueChanged("TestRecognitionEUploadFile")
                                    .OnUploaded("TestRecognitionESelectFileList")
                                )
                            @(Html.DevExtreme().DataGrid()
                                    .ID("TestRecognitionEFileGrid")
                                    .ShowBorders(true)
                                    .ShowColumnLines(true)
                                    .ShowRowLines(true)
                                    .FocusedRowEnabled(true)
                                    .FocusedRowIndex(0)
                                    .KeyExpr("testcontrol_id")
                                    .Height(211)
                                    .Selection(s => s.Mode(SelectionMode.Single))
                                    .Columns(columns =>
                                    {
                                        columns.Add()
                                            .DataField("doc_file_name")
                                            .Caption("파일명");
                                    })
                                )

                        </div>

                    </div> *@

            </div>

        </div>

    </div>
    <div class="row ml-0 mt-1 mb-1">
        <form id="TestRecognitionEForm">
            <table class="table table-sm table-borderless font-weight-bold mt-0 mb-0">
                <tr>
                    <th>시험종류</th>
                    <td><input type="text" name="test_type" class="form-control" readonly="readonly" size="10" /></td>
                    <th>제조(관리)번호</th>
                    <td><input type="text" name="start_no" class="form-control" readonly="readonly" size="20" /></td>
                    <th>의뢰(관리)번호</th>
                    <td><input type="text" name="test_no" class="form-control" readonly="readonly" size="20" /></td>
                    <th>규격</th>
                    <td><input type="text" name="test_standard_nm_1" class="form-control" readonly="readonly" size="20" /></td>
                    <th>구분</th>
                    <td><input type="text" name="process_nm" class="form-control" readonly="readonly" size="20" /></td>
                </tr>
                <tr>
                    <th>품목</th>
                    <td colspan="3"><input type="text" name="item_nm" class="form-control" readonly="readonly" size="54" /></td>
                    <th>영문명</th>
                    <td colspan="3"><input type="text" name="item_enm" class="form-control" readonly="readonly" size="55" /></td>
                    <th>시험번호</th>
                    <td><input type="text" name="test_judge_no" class="form-control" readonly="readonly" size="20" /></td>
                </tr>
            </table>
        </form>
    </div>
    <div class="row mb-0">
        <div class="col-10 pr-1">
            <div class="box mb-0">
                @(Html.DevExtreme().DataGrid()
                    .ID("TestRecognitionEDetailGrid")
                    .KeyExpr("teststandardmaster_id")
                    .Scrolling(scrolling => scrolling.Mode(GridScrollingMode.Virtual).ShowScrollbar(ShowScrollbarMode.Always))
                    .Height(180)
                    .ShowBorders(true)
                    .FocusedRowEnabled(true)
                    .FocusedRowIndex(0)
                    //.SearchPanel(searchPanel => searchPanel.Visible(false))
                    //.Export(e => e.Enabled(true).AllowExportSelectedData(true))
                    .ShowColumnLines(true)
                    .HoverStateEnabled(true)
                    .ColumnAutoWidth(true)
                    .AllowColumnResizing(true)
                    .Columns(c =>
                    {
                        c.Add().DataField("testitem_nm").Caption("시험항목");
                        c.Add().DataField("teststandard_nm").Caption("시험기준");
                        c.Add().DataField("reference_test_yn").Caption("참고시점");
                        c.Add().DataField("content_check").Caption("함량");
                        c.Add().DataField("testitem_result").Caption("시험결과");
                        c.Add().DataField("result_yn").Caption("판정");
                        c.Add().DataField("judge_date").Caption("시험일");
                        c.Add().DataField("testitem_emp_nm").Caption("시험자");
                        c.Add().DataField("testitem_result_remark").Caption("비고");
                        c.Add().DataField("backdata_yn").Caption("자료");
                        c.Add().DataField("retest_check").Caption("재시험");
                    })
                    .OnFocusedRowChanged("TestRecognitionEDetailFocusChanged")
                    //.OnRowPrepared("TestRecognitionEHighlightRow")
                    //.OnCellPrepared("TestRecognitionEHighlightCell")
                    .OnToolbarPreparing("HideToolbarButton")
                )
            </div>
        </div>
        <div class="col-2 pl-0">
            <div class="box mb-0">
                <div class="align-end-only p-1">
                    <span class="align-center pr-3">첨부자료</span>
                    @*<button class="btn btn-secondary" id="TestRecognitionEUploadFileBtn">등록</button>*@
                    <button class="btn btn-secondary" id="TestRecognitionEDownloadFileBtn">다운로드</button>
                    @*<button class="btn btn-secondary" id="TestRecognitionEDeleteFileBtn">삭제</button>*@
                </div>

                @(Html.DevExtreme().FileUploader()
                    .Visible(false)
                    .ID("TestRecognitionEFileUploader")
                    .Name("TestRecognitionEAttatchedFile")
                    .Multiple(false)
                    .AllowedFileExtensions(new[] { ".hwp", ".doc", ".docx", ".dot", ".pdf", ".rtf"})
                    .UploadUrl(Url.Action("TestRecognitionEUploadFile", "QualityControl"))
                    .UploadMode(FileUploadMode.Instantly)
                    .MaxFileSize(int.MaxValue)
                    .OnValueChanged("TestRecognitionEUploadFile")
                    .OnUploaded("TestRecognitionESelectFileList")
                )
                @(Html.DevExtreme().DataGrid()
                    .ID("TestRecognitionEFileGrid")
                    .ShowBorders(true)
                    .ShowColumnLines(true)
                    .ShowRowLines(true)
                    .FocusedRowEnabled(true)
                    .FocusedRowIndex(0)
                    .KeyExpr("test_back_data_id")
                    .Height(150)
                    .Selection(s => s.Mode(SelectionMode.Single))
                    .Columns(columns =>
                    {
                        columns.Add()
                            .DataField("doc_file_name")
                            .Caption("파일명");
                    })
                )
            </div>
        </div>
    </div>

</div>